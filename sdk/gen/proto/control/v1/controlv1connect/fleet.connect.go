// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control/v1/fleet.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/control/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FleetServiceName is the fully-qualified name of the FleetService service.
	FleetServiceName = "fleetd.control.v1.FleetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FleetServiceGetFleetStatsProcedure is the fully-qualified name of the FleetService's
	// GetFleetStats RPC.
	FleetServiceGetFleetStatsProcedure = "/fleetd.control.v1.FleetService/GetFleetStats"
	// FleetServiceListDevicesProcedure is the fully-qualified name of the FleetService's ListDevices
	// RPC.
	FleetServiceListDevicesProcedure = "/fleetd.control.v1.FleetService/ListDevices"
	// FleetServiceGetDeviceProcedure is the fully-qualified name of the FleetService's GetDevice RPC.
	FleetServiceGetDeviceProcedure = "/fleetd.control.v1.FleetService/GetDevice"
	// FleetServiceUpdateDeviceProcedure is the fully-qualified name of the FleetService's UpdateDevice
	// RPC.
	FleetServiceUpdateDeviceProcedure = "/fleetd.control.v1.FleetService/UpdateDevice"
	// FleetServiceDeleteDeviceProcedure is the fully-qualified name of the FleetService's DeleteDevice
	// RPC.
	FleetServiceDeleteDeviceProcedure = "/fleetd.control.v1.FleetService/DeleteDevice"
	// FleetServiceExecuteCommandProcedure is the fully-qualified name of the FleetService's
	// ExecuteCommand RPC.
	FleetServiceExecuteCommandProcedure = "/fleetd.control.v1.FleetService/ExecuteCommand"
	// FleetServiceListGroupsProcedure is the fully-qualified name of the FleetService's ListGroups RPC.
	FleetServiceListGroupsProcedure = "/fleetd.control.v1.FleetService/ListGroups"
	// FleetServiceCreateGroupProcedure is the fully-qualified name of the FleetService's CreateGroup
	// RPC.
	FleetServiceCreateGroupProcedure = "/fleetd.control.v1.FleetService/CreateGroup"
	// FleetServiceUpdateGroupProcedure is the fully-qualified name of the FleetService's UpdateGroup
	// RPC.
	FleetServiceUpdateGroupProcedure = "/fleetd.control.v1.FleetService/UpdateGroup"
	// FleetServiceDeleteGroupProcedure is the fully-qualified name of the FleetService's DeleteGroup
	// RPC.
	FleetServiceDeleteGroupProcedure = "/fleetd.control.v1.FleetService/DeleteGroup"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fleetServiceServiceDescriptor              = v1.File_proto_control_v1_fleet_proto.Services().ByName("FleetService")
	fleetServiceGetFleetStatsMethodDescriptor  = fleetServiceServiceDescriptor.Methods().ByName("GetFleetStats")
	fleetServiceListDevicesMethodDescriptor    = fleetServiceServiceDescriptor.Methods().ByName("ListDevices")
	fleetServiceGetDeviceMethodDescriptor      = fleetServiceServiceDescriptor.Methods().ByName("GetDevice")
	fleetServiceUpdateDeviceMethodDescriptor   = fleetServiceServiceDescriptor.Methods().ByName("UpdateDevice")
	fleetServiceDeleteDeviceMethodDescriptor   = fleetServiceServiceDescriptor.Methods().ByName("DeleteDevice")
	fleetServiceExecuteCommandMethodDescriptor = fleetServiceServiceDescriptor.Methods().ByName("ExecuteCommand")
	fleetServiceListGroupsMethodDescriptor     = fleetServiceServiceDescriptor.Methods().ByName("ListGroups")
	fleetServiceCreateGroupMethodDescriptor    = fleetServiceServiceDescriptor.Methods().ByName("CreateGroup")
	fleetServiceUpdateGroupMethodDescriptor    = fleetServiceServiceDescriptor.Methods().ByName("UpdateGroup")
	fleetServiceDeleteGroupMethodDescriptor    = fleetServiceServiceDescriptor.Methods().ByName("DeleteGroup")
)

// FleetServiceClient is a client for the fleetd.control.v1.FleetService service.
type FleetServiceClient interface {
	// Get fleet statistics
	GetFleetStats(context.Context, *connect.Request[v1.GetFleetStatsRequest]) (*connect.Response[v1.GetFleetStatsResponse], error)
	// List all devices in the fleet
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// Get a specific device
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// Update device configuration
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	// Delete a device from the fleet
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
	// Execute command on devices
	ExecuteCommand(context.Context, *connect.Request[v1.ExecuteCommandRequest]) (*connect.Response[v1.ExecuteCommandResponse], error)
	// Get device groups
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	// Create a device group
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	// Update a device group
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	// Delete a device group
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
}

// NewFleetServiceClient constructs a client for the fleetd.control.v1.FleetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFleetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FleetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fleetServiceClient{
		getFleetStats: connect.NewClient[v1.GetFleetStatsRequest, v1.GetFleetStatsResponse](
			httpClient,
			baseURL+FleetServiceGetFleetStatsProcedure,
			connect.WithSchema(fleetServiceGetFleetStatsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+FleetServiceListDevicesProcedure,
			connect.WithSchema(fleetServiceListDevicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[v1.GetDeviceRequest, v1.GetDeviceResponse](
			httpClient,
			baseURL+FleetServiceGetDeviceProcedure,
			connect.WithSchema(fleetServiceGetDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDevice: connect.NewClient[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse](
			httpClient,
			baseURL+FleetServiceUpdateDeviceProcedure,
			connect.WithSchema(fleetServiceUpdateDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse](
			httpClient,
			baseURL+FleetServiceDeleteDeviceProcedure,
			connect.WithSchema(fleetServiceDeleteDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executeCommand: connect.NewClient[v1.ExecuteCommandRequest, v1.ExecuteCommandResponse](
			httpClient,
			baseURL+FleetServiceExecuteCommandProcedure,
			connect.WithSchema(fleetServiceExecuteCommandMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[v1.ListGroupsRequest, v1.ListGroupsResponse](
			httpClient,
			baseURL+FleetServiceListGroupsProcedure,
			connect.WithSchema(fleetServiceListGroupsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createGroup: connect.NewClient[v1.CreateGroupRequest, v1.CreateGroupResponse](
			httpClient,
			baseURL+FleetServiceCreateGroupProcedure,
			connect.WithSchema(fleetServiceCreateGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[v1.UpdateGroupRequest, v1.UpdateGroupResponse](
			httpClient,
			baseURL+FleetServiceUpdateGroupProcedure,
			connect.WithSchema(fleetServiceUpdateGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteGroup: connect.NewClient[v1.DeleteGroupRequest, v1.DeleteGroupResponse](
			httpClient,
			baseURL+FleetServiceDeleteGroupProcedure,
			connect.WithSchema(fleetServiceDeleteGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fleetServiceClient implements FleetServiceClient.
type fleetServiceClient struct {
	getFleetStats  *connect.Client[v1.GetFleetStatsRequest, v1.GetFleetStatsResponse]
	listDevices    *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	getDevice      *connect.Client[v1.GetDeviceRequest, v1.GetDeviceResponse]
	updateDevice   *connect.Client[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse]
	deleteDevice   *connect.Client[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse]
	executeCommand *connect.Client[v1.ExecuteCommandRequest, v1.ExecuteCommandResponse]
	listGroups     *connect.Client[v1.ListGroupsRequest, v1.ListGroupsResponse]
	createGroup    *connect.Client[v1.CreateGroupRequest, v1.CreateGroupResponse]
	updateGroup    *connect.Client[v1.UpdateGroupRequest, v1.UpdateGroupResponse]
	deleteGroup    *connect.Client[v1.DeleteGroupRequest, v1.DeleteGroupResponse]
}

// GetFleetStats calls fleetd.control.v1.FleetService.GetFleetStats.
func (c *fleetServiceClient) GetFleetStats(ctx context.Context, req *connect.Request[v1.GetFleetStatsRequest]) (*connect.Response[v1.GetFleetStatsResponse], error) {
	return c.getFleetStats.CallUnary(ctx, req)
}

// ListDevices calls fleetd.control.v1.FleetService.ListDevices.
func (c *fleetServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// GetDevice calls fleetd.control.v1.FleetService.GetDevice.
func (c *fleetServiceClient) GetDevice(ctx context.Context, req *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// UpdateDevice calls fleetd.control.v1.FleetService.UpdateDevice.
func (c *fleetServiceClient) UpdateDevice(ctx context.Context, req *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return c.updateDevice.CallUnary(ctx, req)
}

// DeleteDevice calls fleetd.control.v1.FleetService.DeleteDevice.
func (c *fleetServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// ExecuteCommand calls fleetd.control.v1.FleetService.ExecuteCommand.
func (c *fleetServiceClient) ExecuteCommand(ctx context.Context, req *connect.Request[v1.ExecuteCommandRequest]) (*connect.Response[v1.ExecuteCommandResponse], error) {
	return c.executeCommand.CallUnary(ctx, req)
}

// ListGroups calls fleetd.control.v1.FleetService.ListGroups.
func (c *fleetServiceClient) ListGroups(ctx context.Context, req *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// CreateGroup calls fleetd.control.v1.FleetService.CreateGroup.
func (c *fleetServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// UpdateGroup calls fleetd.control.v1.FleetService.UpdateGroup.
func (c *fleetServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls fleetd.control.v1.FleetService.DeleteGroup.
func (c *fleetServiceClient) DeleteGroup(ctx context.Context, req *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// FleetServiceHandler is an implementation of the fleetd.control.v1.FleetService service.
type FleetServiceHandler interface {
	// Get fleet statistics
	GetFleetStats(context.Context, *connect.Request[v1.GetFleetStatsRequest]) (*connect.Response[v1.GetFleetStatsResponse], error)
	// List all devices in the fleet
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// Get a specific device
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// Update device configuration
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	// Delete a device from the fleet
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
	// Execute command on devices
	ExecuteCommand(context.Context, *connect.Request[v1.ExecuteCommandRequest]) (*connect.Response[v1.ExecuteCommandResponse], error)
	// Get device groups
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	// Create a device group
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	// Update a device group
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	// Delete a device group
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
}

// NewFleetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFleetServiceHandler(svc FleetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fleetServiceGetFleetStatsHandler := connect.NewUnaryHandler(
		FleetServiceGetFleetStatsProcedure,
		svc.GetFleetStats,
		connect.WithSchema(fleetServiceGetFleetStatsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceListDevicesHandler := connect.NewUnaryHandler(
		FleetServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(fleetServiceListDevicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeviceHandler := connect.NewUnaryHandler(
		FleetServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(fleetServiceGetDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceUpdateDeviceHandler := connect.NewUnaryHandler(
		FleetServiceUpdateDeviceProcedure,
		svc.UpdateDevice,
		connect.WithSchema(fleetServiceUpdateDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		FleetServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(fleetServiceDeleteDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceExecuteCommandHandler := connect.NewUnaryHandler(
		FleetServiceExecuteCommandProcedure,
		svc.ExecuteCommand,
		connect.WithSchema(fleetServiceExecuteCommandMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceListGroupsHandler := connect.NewUnaryHandler(
		FleetServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(fleetServiceListGroupsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceCreateGroupHandler := connect.NewUnaryHandler(
		FleetServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(fleetServiceCreateGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceUpdateGroupHandler := connect.NewUnaryHandler(
		FleetServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(fleetServiceUpdateGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceDeleteGroupHandler := connect.NewUnaryHandler(
		FleetServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		connect.WithSchema(fleetServiceDeleteGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.control.v1.FleetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FleetServiceGetFleetStatsProcedure:
			fleetServiceGetFleetStatsHandler.ServeHTTP(w, r)
		case FleetServiceListDevicesProcedure:
			fleetServiceListDevicesHandler.ServeHTTP(w, r)
		case FleetServiceGetDeviceProcedure:
			fleetServiceGetDeviceHandler.ServeHTTP(w, r)
		case FleetServiceUpdateDeviceProcedure:
			fleetServiceUpdateDeviceHandler.ServeHTTP(w, r)
		case FleetServiceDeleteDeviceProcedure:
			fleetServiceDeleteDeviceHandler.ServeHTTP(w, r)
		case FleetServiceExecuteCommandProcedure:
			fleetServiceExecuteCommandHandler.ServeHTTP(w, r)
		case FleetServiceListGroupsProcedure:
			fleetServiceListGroupsHandler.ServeHTTP(w, r)
		case FleetServiceCreateGroupProcedure:
			fleetServiceCreateGroupHandler.ServeHTTP(w, r)
		case FleetServiceUpdateGroupProcedure:
			fleetServiceUpdateGroupHandler.ServeHTTP(w, r)
		case FleetServiceDeleteGroupProcedure:
			fleetServiceDeleteGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFleetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFleetServiceHandler struct{}

func (UnimplementedFleetServiceHandler) GetFleetStats(context.Context, *connect.Request[v1.GetFleetStatsRequest]) (*connect.Response[v1.GetFleetStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.GetFleetStats is not implemented"))
}

func (UnimplementedFleetServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.ListDevices is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.GetDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.UpdateDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.DeleteDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) ExecuteCommand(context.Context, *connect.Request[v1.ExecuteCommandRequest]) (*connect.Response[v1.ExecuteCommandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.ExecuteCommand is not implemented"))
}

func (UnimplementedFleetServiceHandler) ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.ListGroups is not implemented"))
}

func (UnimplementedFleetServiceHandler) CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.CreateGroup is not implemented"))
}

func (UnimplementedFleetServiceHandler) UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.UpdateGroup is not implemented"))
}

func (UnimplementedFleetServiceHandler) DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.FleetService.DeleteGroup is not implemented"))
}
