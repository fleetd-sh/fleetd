// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control/v1/organization.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/control/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "fleetd.control.v1.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganization RPC.
	OrganizationServiceCreateOrganizationProcedure = "/fleetd.control.v1.OrganizationService/CreateOrganization"
	// OrganizationServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganization RPC.
	OrganizationServiceGetOrganizationProcedure = "/fleetd.control.v1.OrganizationService/GetOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/fleetd.control.v1.OrganizationService/UpdateOrganization"
	// OrganizationServiceListOrganizationsProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizations RPC.
	OrganizationServiceListOrganizationsProcedure = "/fleetd.control.v1.OrganizationService/ListOrganizations"
	// OrganizationServiceCreateAPIKeyProcedure is the fully-qualified name of the OrganizationService's
	// CreateAPIKey RPC.
	OrganizationServiceCreateAPIKeyProcedure = "/fleetd.control.v1.OrganizationService/CreateAPIKey"
	// OrganizationServiceListAPIKeysProcedure is the fully-qualified name of the OrganizationService's
	// ListAPIKeys RPC.
	OrganizationServiceListAPIKeysProcedure = "/fleetd.control.v1.OrganizationService/ListAPIKeys"
	// OrganizationServiceRevokeAPIKeyProcedure is the fully-qualified name of the OrganizationService's
	// RevokeAPIKey RPC.
	OrganizationServiceRevokeAPIKeyProcedure = "/fleetd.control.v1.OrganizationService/RevokeAPIKey"
	// OrganizationServiceCreateProjectProcedure is the fully-qualified name of the
	// OrganizationService's CreateProject RPC.
	OrganizationServiceCreateProjectProcedure = "/fleetd.control.v1.OrganizationService/CreateProject"
	// OrganizationServiceListProjectsProcedure is the fully-qualified name of the OrganizationService's
	// ListProjects RPC.
	OrganizationServiceListProjectsProcedure = "/fleetd.control.v1.OrganizationService/ListProjects"
	// OrganizationServiceGetProjectProcedure is the fully-qualified name of the OrganizationService's
	// GetProject RPC.
	OrganizationServiceGetProjectProcedure = "/fleetd.control.v1.OrganizationService/GetProject"
	// OrganizationServiceUpdateProjectProcedure is the fully-qualified name of the
	// OrganizationService's UpdateProject RPC.
	OrganizationServiceUpdateProjectProcedure = "/fleetd.control.v1.OrganizationService/UpdateProject"
	// OrganizationServiceDeleteProjectProcedure is the fully-qualified name of the
	// OrganizationService's DeleteProject RPC.
	OrganizationServiceDeleteProjectProcedure = "/fleetd.control.v1.OrganizationService/DeleteProject"
	// OrganizationServiceGetUsageMetricsProcedure is the fully-qualified name of the
	// OrganizationService's GetUsageMetrics RPC.
	OrganizationServiceGetUsageMetricsProcedure = "/fleetd.control.v1.OrganizationService/GetUsageMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	organizationServiceServiceDescriptor                  = v1.File_proto_control_v1_organization_proto.Services().ByName("OrganizationService")
	organizationServiceCreateOrganizationMethodDescriptor = organizationServiceServiceDescriptor.Methods().ByName("CreateOrganization")
	organizationServiceGetOrganizationMethodDescriptor    = organizationServiceServiceDescriptor.Methods().ByName("GetOrganization")
	organizationServiceUpdateOrganizationMethodDescriptor = organizationServiceServiceDescriptor.Methods().ByName("UpdateOrganization")
	organizationServiceListOrganizationsMethodDescriptor  = organizationServiceServiceDescriptor.Methods().ByName("ListOrganizations")
	organizationServiceCreateAPIKeyMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("CreateAPIKey")
	organizationServiceListAPIKeysMethodDescriptor        = organizationServiceServiceDescriptor.Methods().ByName("ListAPIKeys")
	organizationServiceRevokeAPIKeyMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("RevokeAPIKey")
	organizationServiceCreateProjectMethodDescriptor      = organizationServiceServiceDescriptor.Methods().ByName("CreateProject")
	organizationServiceListProjectsMethodDescriptor       = organizationServiceServiceDescriptor.Methods().ByName("ListProjects")
	organizationServiceGetProjectMethodDescriptor         = organizationServiceServiceDescriptor.Methods().ByName("GetProject")
	organizationServiceUpdateProjectMethodDescriptor      = organizationServiceServiceDescriptor.Methods().ByName("UpdateProject")
	organizationServiceDeleteProjectMethodDescriptor      = organizationServiceServiceDescriptor.Methods().ByName("DeleteProject")
	organizationServiceGetUsageMetricsMethodDescriptor    = organizationServiceServiceDescriptor.Methods().ByName("GetUsageMetrics")
)

// OrganizationServiceClient is a client for the fleetd.control.v1.OrganizationService service.
type OrganizationServiceClient interface {
	// Create an organization
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// Get organization details
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Update organization
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// List organizations (admin only)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Create API key
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// List API keys
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	// Revoke API key
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error)
	// Create project
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	// List projects
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get project
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	// Update project
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	// Delete project
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	// Get usage metrics
	GetUsageMetrics(context.Context, *connect.Request[v1.GetUsageMetricsRequest]) (*connect.Response[v1.GetUsageMetricsResponse], error)
}

// NewOrganizationServiceClient constructs a client for the fleetd.control.v1.OrganizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &organizationServiceClient{
		createOrganization: connect.NewClient[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationServiceCreateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationProcedure,
			connect.WithSchema(organizationServiceGetOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceUpdateOrganizationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationsProcedure,
			connect.WithSchema(organizationServiceListOrganizationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAPIKey: connect.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+OrganizationServiceCreateAPIKeyProcedure,
			connect.WithSchema(organizationServiceCreateAPIKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAPIKeys: connect.NewClient[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse](
			httpClient,
			baseURL+OrganizationServiceListAPIKeysProcedure,
			connect.WithSchema(organizationServiceListAPIKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revokeAPIKey: connect.NewClient[v1.RevokeAPIKeyRequest, v1.RevokeAPIKeyResponse](
			httpClient,
			baseURL+OrganizationServiceRevokeAPIKeyProcedure,
			connect.WithSchema(organizationServiceRevokeAPIKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+OrganizationServiceCreateProjectProcedure,
			connect.WithSchema(organizationServiceCreateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+OrganizationServiceListProjectsProcedure,
			connect.WithSchema(organizationServiceListProjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+OrganizationServiceGetProjectProcedure,
			connect.WithSchema(organizationServiceGetProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateProjectProcedure,
			connect.WithSchema(organizationServiceUpdateProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, v1.DeleteProjectResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteProjectProcedure,
			connect.WithSchema(organizationServiceDeleteProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUsageMetrics: connect.NewClient[v1.GetUsageMetricsRequest, v1.GetUsageMetricsResponse](
			httpClient,
			baseURL+OrganizationServiceGetUsageMetricsProcedure,
			connect.WithSchema(organizationServiceGetUsageMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createOrganization *connect.Client[v1.CreateOrganizationRequest, v1.CreateOrganizationResponse]
	getOrganization    *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listOrganizations  *connect.Client[v1.ListOrganizationsRequest, v1.ListOrganizationsResponse]
	createAPIKey       *connect.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	listAPIKeys        *connect.Client[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse]
	revokeAPIKey       *connect.Client[v1.RevokeAPIKeyRequest, v1.RevokeAPIKeyResponse]
	createProject      *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	listProjects       *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	getProject         *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	updateProject      *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	deleteProject      *connect.Client[v1.DeleteProjectRequest, v1.DeleteProjectResponse]
	getUsageMetrics    *connect.Client[v1.GetUsageMetricsRequest, v1.GetUsageMetricsResponse]
}

// CreateOrganization calls fleetd.control.v1.OrganizationService.CreateOrganization.
func (c *organizationServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// GetOrganization calls fleetd.control.v1.OrganizationService.GetOrganization.
func (c *organizationServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls fleetd.control.v1.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls fleetd.control.v1.OrganizationService.ListOrganizations.
func (c *organizationServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// CreateAPIKey calls fleetd.control.v1.OrganizationService.CreateAPIKey.
func (c *organizationServiceClient) CreateAPIKey(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// ListAPIKeys calls fleetd.control.v1.OrganizationService.ListAPIKeys.
func (c *organizationServiceClient) ListAPIKeys(ctx context.Context, req *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return c.listAPIKeys.CallUnary(ctx, req)
}

// RevokeAPIKey calls fleetd.control.v1.OrganizationService.RevokeAPIKey.
func (c *organizationServiceClient) RevokeAPIKey(ctx context.Context, req *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error) {
	return c.revokeAPIKey.CallUnary(ctx, req)
}

// CreateProject calls fleetd.control.v1.OrganizationService.CreateProject.
func (c *organizationServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ListProjects calls fleetd.control.v1.OrganizationService.ListProjects.
func (c *organizationServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GetProject calls fleetd.control.v1.OrganizationService.GetProject.
func (c *organizationServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// UpdateProject calls fleetd.control.v1.OrganizationService.UpdateProject.
func (c *organizationServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls fleetd.control.v1.OrganizationService.DeleteProject.
func (c *organizationServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetUsageMetrics calls fleetd.control.v1.OrganizationService.GetUsageMetrics.
func (c *organizationServiceClient) GetUsageMetrics(ctx context.Context, req *connect.Request[v1.GetUsageMetricsRequest]) (*connect.Response[v1.GetUsageMetricsResponse], error) {
	return c.getUsageMetrics.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the fleetd.control.v1.OrganizationService
// service.
type OrganizationServiceHandler interface {
	// Create an organization
	CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error)
	// Get organization details
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	// Update organization
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// List organizations (admin only)
	ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error)
	// Create API key
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	// List API keys
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	// Revoke API key
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error)
	// Create project
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	// List projects
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	// Get project
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	// Update project
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	// Delete project
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error)
	// Get usage metrics
	GetUsageMetrics(context.Context, *connect.Request[v1.GetUsageMetricsRequest]) (*connect.Response[v1.GetUsageMetricsResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationServiceCreateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationServiceGetOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceUpdateOrganizationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationsHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(organizationServiceListOrganizationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateAPIKeyHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		connect.WithSchema(organizationServiceCreateAPIKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListAPIKeysHandler := connect.NewUnaryHandler(
		OrganizationServiceListAPIKeysProcedure,
		svc.ListAPIKeys,
		connect.WithSchema(organizationServiceListAPIKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceRevokeAPIKeyHandler := connect.NewUnaryHandler(
		OrganizationServiceRevokeAPIKeyProcedure,
		svc.RevokeAPIKey,
		connect.WithSchema(organizationServiceRevokeAPIKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateProjectHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(organizationServiceCreateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListProjectsHandler := connect.NewUnaryHandler(
		OrganizationServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(organizationServiceListProjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetProjectHandler := connect.NewUnaryHandler(
		OrganizationServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(organizationServiceGetProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateProjectHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(organizationServiceUpdateProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteProjectHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(organizationServiceDeleteProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetUsageMetricsHandler := connect.NewUnaryHandler(
		OrganizationServiceGetUsageMetricsProcedure,
		svc.GetUsageMetrics,
		connect.WithSchema(organizationServiceGetUsageMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.control.v1.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateOrganizationProcedure:
			organizationServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceGetOrganizationProcedure:
			organizationServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationsProcedure:
			organizationServiceListOrganizationsHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateAPIKeyProcedure:
			organizationServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case OrganizationServiceListAPIKeysProcedure:
			organizationServiceListAPIKeysHandler.ServeHTTP(w, r)
		case OrganizationServiceRevokeAPIKeyProcedure:
			organizationServiceRevokeAPIKeyHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateProjectProcedure:
			organizationServiceCreateProjectHandler.ServeHTTP(w, r)
		case OrganizationServiceListProjectsProcedure:
			organizationServiceListProjectsHandler.ServeHTTP(w, r)
		case OrganizationServiceGetProjectProcedure:
			organizationServiceGetProjectHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateProjectProcedure:
			organizationServiceUpdateProjectHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteProjectProcedure:
			organizationServiceDeleteProjectHandler.ServeHTTP(w, r)
		case OrganizationServiceGetUsageMetricsProcedure:
			organizationServiceGetUsageMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateOrganization(context.Context, *connect.Request[v1.CreateOrganizationRequest]) (*connect.Response[v1.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizations(context.Context, *connect.Request[v1.ListOrganizationsRequest]) (*connect.Response[v1.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.ListOrganizations is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.CreateAPIKey is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.ListAPIKeys is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[v1.RevokeAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.RevokeAPIKey is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.CreateProject is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.ListProjects is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.GetProject is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.UpdateProject is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[v1.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.DeleteProject is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetUsageMetrics(context.Context, *connect.Request[v1.GetUsageMetricsRequest]) (*connect.Response[v1.GetUsageMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.OrganizationService.GetUsageMetrics is not implemented"))
}
