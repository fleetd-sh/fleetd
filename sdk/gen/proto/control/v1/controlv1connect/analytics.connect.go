// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control/v1/analytics.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/control/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnalyticsServiceName is the fully-qualified name of the AnalyticsService service.
	AnalyticsServiceName = "fleetd.control.v1.AnalyticsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnalyticsServiceGetMetricsOverviewProcedure is the fully-qualified name of the AnalyticsService's
	// GetMetricsOverview RPC.
	AnalyticsServiceGetMetricsOverviewProcedure = "/fleetd.control.v1.AnalyticsService/GetMetricsOverview"
	// AnalyticsServiceQueryMetricsProcedure is the fully-qualified name of the AnalyticsService's
	// QueryMetrics RPC.
	AnalyticsServiceQueryMetricsProcedure = "/fleetd.control.v1.AnalyticsService/QueryMetrics"
	// AnalyticsServiceGetDeviceMetricsProcedure is the fully-qualified name of the AnalyticsService's
	// GetDeviceMetrics RPC.
	AnalyticsServiceGetDeviceMetricsProcedure = "/fleetd.control.v1.AnalyticsService/GetDeviceMetrics"
	// AnalyticsServiceGetAggregatedMetricsProcedure is the fully-qualified name of the
	// AnalyticsService's GetAggregatedMetrics RPC.
	AnalyticsServiceGetAggregatedMetricsProcedure = "/fleetd.control.v1.AnalyticsService/GetAggregatedMetrics"
	// AnalyticsServiceGenerateReportProcedure is the fully-qualified name of the AnalyticsService's
	// GenerateReport RPC.
	AnalyticsServiceGenerateReportProcedure = "/fleetd.control.v1.AnalyticsService/GenerateReport"
	// AnalyticsServiceGetAlertsProcedure is the fully-qualified name of the AnalyticsService's
	// GetAlerts RPC.
	AnalyticsServiceGetAlertsProcedure = "/fleetd.control.v1.AnalyticsService/GetAlerts"
	// AnalyticsServiceCreateAlertRuleProcedure is the fully-qualified name of the AnalyticsService's
	// CreateAlertRule RPC.
	AnalyticsServiceCreateAlertRuleProcedure = "/fleetd.control.v1.AnalyticsService/CreateAlertRule"
	// AnalyticsServiceGetDeviceLogsProcedure is the fully-qualified name of the AnalyticsService's
	// GetDeviceLogs RPC.
	AnalyticsServiceGetDeviceLogsProcedure = "/fleetd.control.v1.AnalyticsService/GetDeviceLogs"
	// AnalyticsServiceSearchLogsProcedure is the fully-qualified name of the AnalyticsService's
	// SearchLogs RPC.
	AnalyticsServiceSearchLogsProcedure = "/fleetd.control.v1.AnalyticsService/SearchLogs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	analyticsServiceServiceDescriptor                    = v1.File_proto_control_v1_analytics_proto.Services().ByName("AnalyticsService")
	analyticsServiceGetMetricsOverviewMethodDescriptor   = analyticsServiceServiceDescriptor.Methods().ByName("GetMetricsOverview")
	analyticsServiceQueryMetricsMethodDescriptor         = analyticsServiceServiceDescriptor.Methods().ByName("QueryMetrics")
	analyticsServiceGetDeviceMetricsMethodDescriptor     = analyticsServiceServiceDescriptor.Methods().ByName("GetDeviceMetrics")
	analyticsServiceGetAggregatedMetricsMethodDescriptor = analyticsServiceServiceDescriptor.Methods().ByName("GetAggregatedMetrics")
	analyticsServiceGenerateReportMethodDescriptor       = analyticsServiceServiceDescriptor.Methods().ByName("GenerateReport")
	analyticsServiceGetAlertsMethodDescriptor            = analyticsServiceServiceDescriptor.Methods().ByName("GetAlerts")
	analyticsServiceCreateAlertRuleMethodDescriptor      = analyticsServiceServiceDescriptor.Methods().ByName("CreateAlertRule")
	analyticsServiceGetDeviceLogsMethodDescriptor        = analyticsServiceServiceDescriptor.Methods().ByName("GetDeviceLogs")
	analyticsServiceSearchLogsMethodDescriptor           = analyticsServiceServiceDescriptor.Methods().ByName("SearchLogs")
)

// AnalyticsServiceClient is a client for the fleetd.control.v1.AnalyticsService service.
type AnalyticsServiceClient interface {
	// Get fleet metrics overview
	GetMetricsOverview(context.Context, *connect.Request[v1.GetMetricsOverviewRequest]) (*connect.Response[v1.GetMetricsOverviewResponse], error)
	// Query time-series metrics
	QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error)
	// Get device metrics
	GetDeviceMetrics(context.Context, *connect.Request[v1.GetDeviceMetricsRequest]) (*connect.Response[v1.GetDeviceMetricsResponse], error)
	// Get aggregated metrics
	GetAggregatedMetrics(context.Context, *connect.Request[v1.GetAggregatedMetricsRequest]) (*connect.Response[v1.GetAggregatedMetricsResponse], error)
	// Generate analytics report
	GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error)
	// Get alerts
	GetAlerts(context.Context, *connect.Request[v1.GetAlertsRequest]) (*connect.Response[v1.GetAlertsResponse], error)
	// Create alert rule
	CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error)
	// Get device logs
	GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error)
	// Search logs
	SearchLogs(context.Context, *connect.Request[v1.SearchLogsRequest]) (*connect.Response[v1.SearchLogsResponse], error)
}

// NewAnalyticsServiceClient constructs a client for the fleetd.control.v1.AnalyticsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnalyticsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnalyticsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &analyticsServiceClient{
		getMetricsOverview: connect.NewClient[v1.GetMetricsOverviewRequest, v1.GetMetricsOverviewResponse](
			httpClient,
			baseURL+AnalyticsServiceGetMetricsOverviewProcedure,
			connect.WithSchema(analyticsServiceGetMetricsOverviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryMetrics: connect.NewClient[v1.QueryMetricsRequest, v1.QueryMetricsResponse](
			httpClient,
			baseURL+AnalyticsServiceQueryMetricsProcedure,
			connect.WithSchema(analyticsServiceQueryMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeviceMetrics: connect.NewClient[v1.GetDeviceMetricsRequest, v1.GetDeviceMetricsResponse](
			httpClient,
			baseURL+AnalyticsServiceGetDeviceMetricsProcedure,
			connect.WithSchema(analyticsServiceGetDeviceMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAggregatedMetrics: connect.NewClient[v1.GetAggregatedMetricsRequest, v1.GetAggregatedMetricsResponse](
			httpClient,
			baseURL+AnalyticsServiceGetAggregatedMetricsProcedure,
			connect.WithSchema(analyticsServiceGetAggregatedMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateReport: connect.NewClient[v1.GenerateReportRequest, v1.GenerateReportResponse](
			httpClient,
			baseURL+AnalyticsServiceGenerateReportProcedure,
			connect.WithSchema(analyticsServiceGenerateReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAlerts: connect.NewClient[v1.GetAlertsRequest, v1.GetAlertsResponse](
			httpClient,
			baseURL+AnalyticsServiceGetAlertsProcedure,
			connect.WithSchema(analyticsServiceGetAlertsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAlertRule: connect.NewClient[v1.CreateAlertRuleRequest, v1.CreateAlertRuleResponse](
			httpClient,
			baseURL+AnalyticsServiceCreateAlertRuleProcedure,
			connect.WithSchema(analyticsServiceCreateAlertRuleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeviceLogs: connect.NewClient[v1.GetDeviceLogsRequest, v1.GetDeviceLogsResponse](
			httpClient,
			baseURL+AnalyticsServiceGetDeviceLogsProcedure,
			connect.WithSchema(analyticsServiceGetDeviceLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchLogs: connect.NewClient[v1.SearchLogsRequest, v1.SearchLogsResponse](
			httpClient,
			baseURL+AnalyticsServiceSearchLogsProcedure,
			connect.WithSchema(analyticsServiceSearchLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// analyticsServiceClient implements AnalyticsServiceClient.
type analyticsServiceClient struct {
	getMetricsOverview   *connect.Client[v1.GetMetricsOverviewRequest, v1.GetMetricsOverviewResponse]
	queryMetrics         *connect.Client[v1.QueryMetricsRequest, v1.QueryMetricsResponse]
	getDeviceMetrics     *connect.Client[v1.GetDeviceMetricsRequest, v1.GetDeviceMetricsResponse]
	getAggregatedMetrics *connect.Client[v1.GetAggregatedMetricsRequest, v1.GetAggregatedMetricsResponse]
	generateReport       *connect.Client[v1.GenerateReportRequest, v1.GenerateReportResponse]
	getAlerts            *connect.Client[v1.GetAlertsRequest, v1.GetAlertsResponse]
	createAlertRule      *connect.Client[v1.CreateAlertRuleRequest, v1.CreateAlertRuleResponse]
	getDeviceLogs        *connect.Client[v1.GetDeviceLogsRequest, v1.GetDeviceLogsResponse]
	searchLogs           *connect.Client[v1.SearchLogsRequest, v1.SearchLogsResponse]
}

// GetMetricsOverview calls fleetd.control.v1.AnalyticsService.GetMetricsOverview.
func (c *analyticsServiceClient) GetMetricsOverview(ctx context.Context, req *connect.Request[v1.GetMetricsOverviewRequest]) (*connect.Response[v1.GetMetricsOverviewResponse], error) {
	return c.getMetricsOverview.CallUnary(ctx, req)
}

// QueryMetrics calls fleetd.control.v1.AnalyticsService.QueryMetrics.
func (c *analyticsServiceClient) QueryMetrics(ctx context.Context, req *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error) {
	return c.queryMetrics.CallUnary(ctx, req)
}

// GetDeviceMetrics calls fleetd.control.v1.AnalyticsService.GetDeviceMetrics.
func (c *analyticsServiceClient) GetDeviceMetrics(ctx context.Context, req *connect.Request[v1.GetDeviceMetricsRequest]) (*connect.Response[v1.GetDeviceMetricsResponse], error) {
	return c.getDeviceMetrics.CallUnary(ctx, req)
}

// GetAggregatedMetrics calls fleetd.control.v1.AnalyticsService.GetAggregatedMetrics.
func (c *analyticsServiceClient) GetAggregatedMetrics(ctx context.Context, req *connect.Request[v1.GetAggregatedMetricsRequest]) (*connect.Response[v1.GetAggregatedMetricsResponse], error) {
	return c.getAggregatedMetrics.CallUnary(ctx, req)
}

// GenerateReport calls fleetd.control.v1.AnalyticsService.GenerateReport.
func (c *analyticsServiceClient) GenerateReport(ctx context.Context, req *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error) {
	return c.generateReport.CallUnary(ctx, req)
}

// GetAlerts calls fleetd.control.v1.AnalyticsService.GetAlerts.
func (c *analyticsServiceClient) GetAlerts(ctx context.Context, req *connect.Request[v1.GetAlertsRequest]) (*connect.Response[v1.GetAlertsResponse], error) {
	return c.getAlerts.CallUnary(ctx, req)
}

// CreateAlertRule calls fleetd.control.v1.AnalyticsService.CreateAlertRule.
func (c *analyticsServiceClient) CreateAlertRule(ctx context.Context, req *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error) {
	return c.createAlertRule.CallUnary(ctx, req)
}

// GetDeviceLogs calls fleetd.control.v1.AnalyticsService.GetDeviceLogs.
func (c *analyticsServiceClient) GetDeviceLogs(ctx context.Context, req *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error) {
	return c.getDeviceLogs.CallUnary(ctx, req)
}

// SearchLogs calls fleetd.control.v1.AnalyticsService.SearchLogs.
func (c *analyticsServiceClient) SearchLogs(ctx context.Context, req *connect.Request[v1.SearchLogsRequest]) (*connect.Response[v1.SearchLogsResponse], error) {
	return c.searchLogs.CallUnary(ctx, req)
}

// AnalyticsServiceHandler is an implementation of the fleetd.control.v1.AnalyticsService service.
type AnalyticsServiceHandler interface {
	// Get fleet metrics overview
	GetMetricsOverview(context.Context, *connect.Request[v1.GetMetricsOverviewRequest]) (*connect.Response[v1.GetMetricsOverviewResponse], error)
	// Query time-series metrics
	QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error)
	// Get device metrics
	GetDeviceMetrics(context.Context, *connect.Request[v1.GetDeviceMetricsRequest]) (*connect.Response[v1.GetDeviceMetricsResponse], error)
	// Get aggregated metrics
	GetAggregatedMetrics(context.Context, *connect.Request[v1.GetAggregatedMetricsRequest]) (*connect.Response[v1.GetAggregatedMetricsResponse], error)
	// Generate analytics report
	GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error)
	// Get alerts
	GetAlerts(context.Context, *connect.Request[v1.GetAlertsRequest]) (*connect.Response[v1.GetAlertsResponse], error)
	// Create alert rule
	CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error)
	// Get device logs
	GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error)
	// Search logs
	SearchLogs(context.Context, *connect.Request[v1.SearchLogsRequest]) (*connect.Response[v1.SearchLogsResponse], error)
}

// NewAnalyticsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnalyticsServiceHandler(svc AnalyticsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	analyticsServiceGetMetricsOverviewHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetMetricsOverviewProcedure,
		svc.GetMetricsOverview,
		connect.WithSchema(analyticsServiceGetMetricsOverviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceQueryMetricsHandler := connect.NewUnaryHandler(
		AnalyticsServiceQueryMetricsProcedure,
		svc.QueryMetrics,
		connect.WithSchema(analyticsServiceQueryMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetDeviceMetricsHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetDeviceMetricsProcedure,
		svc.GetDeviceMetrics,
		connect.WithSchema(analyticsServiceGetDeviceMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetAggregatedMetricsHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetAggregatedMetricsProcedure,
		svc.GetAggregatedMetrics,
		connect.WithSchema(analyticsServiceGetAggregatedMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGenerateReportHandler := connect.NewUnaryHandler(
		AnalyticsServiceGenerateReportProcedure,
		svc.GenerateReport,
		connect.WithSchema(analyticsServiceGenerateReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetAlertsHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetAlertsProcedure,
		svc.GetAlerts,
		connect.WithSchema(analyticsServiceGetAlertsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceCreateAlertRuleHandler := connect.NewUnaryHandler(
		AnalyticsServiceCreateAlertRuleProcedure,
		svc.CreateAlertRule,
		connect.WithSchema(analyticsServiceCreateAlertRuleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceGetDeviceLogsHandler := connect.NewUnaryHandler(
		AnalyticsServiceGetDeviceLogsProcedure,
		svc.GetDeviceLogs,
		connect.WithSchema(analyticsServiceGetDeviceLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	analyticsServiceSearchLogsHandler := connect.NewUnaryHandler(
		AnalyticsServiceSearchLogsProcedure,
		svc.SearchLogs,
		connect.WithSchema(analyticsServiceSearchLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.control.v1.AnalyticsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnalyticsServiceGetMetricsOverviewProcedure:
			analyticsServiceGetMetricsOverviewHandler.ServeHTTP(w, r)
		case AnalyticsServiceQueryMetricsProcedure:
			analyticsServiceQueryMetricsHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetDeviceMetricsProcedure:
			analyticsServiceGetDeviceMetricsHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetAggregatedMetricsProcedure:
			analyticsServiceGetAggregatedMetricsHandler.ServeHTTP(w, r)
		case AnalyticsServiceGenerateReportProcedure:
			analyticsServiceGenerateReportHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetAlertsProcedure:
			analyticsServiceGetAlertsHandler.ServeHTTP(w, r)
		case AnalyticsServiceCreateAlertRuleProcedure:
			analyticsServiceCreateAlertRuleHandler.ServeHTTP(w, r)
		case AnalyticsServiceGetDeviceLogsProcedure:
			analyticsServiceGetDeviceLogsHandler.ServeHTTP(w, r)
		case AnalyticsServiceSearchLogsProcedure:
			analyticsServiceSearchLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnalyticsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnalyticsServiceHandler struct{}

func (UnimplementedAnalyticsServiceHandler) GetMetricsOverview(context.Context, *connect.Request[v1.GetMetricsOverviewRequest]) (*connect.Response[v1.GetMetricsOverviewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GetMetricsOverview is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) QueryMetrics(context.Context, *connect.Request[v1.QueryMetricsRequest]) (*connect.Response[v1.QueryMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.QueryMetrics is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetDeviceMetrics(context.Context, *connect.Request[v1.GetDeviceMetricsRequest]) (*connect.Response[v1.GetDeviceMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GetDeviceMetrics is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetAggregatedMetrics(context.Context, *connect.Request[v1.GetAggregatedMetricsRequest]) (*connect.Response[v1.GetAggregatedMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GetAggregatedMetrics is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GenerateReport(context.Context, *connect.Request[v1.GenerateReportRequest]) (*connect.Response[v1.GenerateReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GenerateReport is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetAlerts(context.Context, *connect.Request[v1.GetAlertsRequest]) (*connect.Response[v1.GetAlertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GetAlerts is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) CreateAlertRule(context.Context, *connect.Request[v1.CreateAlertRuleRequest]) (*connect.Response[v1.CreateAlertRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.CreateAlertRule is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.GetDeviceLogs is not implemented"))
}

func (UnimplementedAnalyticsServiceHandler) SearchLogs(context.Context, *connect.Request[v1.SearchLogsRequest]) (*connect.Response[v1.SearchLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.AnalyticsService.SearchLogs is not implemented"))
}
