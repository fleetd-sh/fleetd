// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control/v1/deployment.proto

package controlv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/control/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "fleetd.control.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceCreateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CreateDeployment RPC.
	DeploymentServiceCreateDeploymentProcedure = "/fleetd.control.v1.DeploymentService/CreateDeployment"
	// DeploymentServiceGetDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// GetDeployment RPC.
	DeploymentServiceGetDeploymentProcedure = "/fleetd.control.v1.DeploymentService/GetDeployment"
	// DeploymentServiceListDeploymentsProcedure is the fully-qualified name of the DeploymentService's
	// ListDeployments RPC.
	DeploymentServiceListDeploymentsProcedure = "/fleetd.control.v1.DeploymentService/ListDeployments"
	// DeploymentServiceUpdateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// UpdateDeployment RPC.
	DeploymentServiceUpdateDeploymentProcedure = "/fleetd.control.v1.DeploymentService/UpdateDeployment"
	// DeploymentServiceStartDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// StartDeployment RPC.
	DeploymentServiceStartDeploymentProcedure = "/fleetd.control.v1.DeploymentService/StartDeployment"
	// DeploymentServicePauseDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// PauseDeployment RPC.
	DeploymentServicePauseDeploymentProcedure = "/fleetd.control.v1.DeploymentService/PauseDeployment"
	// DeploymentServiceCancelDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CancelDeployment RPC.
	DeploymentServiceCancelDeploymentProcedure = "/fleetd.control.v1.DeploymentService/CancelDeployment"
	// DeploymentServiceGetDeploymentStatusProcedure is the fully-qualified name of the
	// DeploymentService's GetDeploymentStatus RPC.
	DeploymentServiceGetDeploymentStatusProcedure = "/fleetd.control.v1.DeploymentService/GetDeploymentStatus"
	// DeploymentServiceUploadArtifactProcedure is the fully-qualified name of the DeploymentService's
	// UploadArtifact RPC.
	DeploymentServiceUploadArtifactProcedure = "/fleetd.control.v1.DeploymentService/UploadArtifact"
	// DeploymentServiceListArtifactsProcedure is the fully-qualified name of the DeploymentService's
	// ListArtifacts RPC.
	DeploymentServiceListArtifactsProcedure = "/fleetd.control.v1.DeploymentService/ListArtifacts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deploymentServiceServiceDescriptor                   = v1.File_proto_control_v1_deployment_proto.Services().ByName("DeploymentService")
	deploymentServiceCreateDeploymentMethodDescriptor    = deploymentServiceServiceDescriptor.Methods().ByName("CreateDeployment")
	deploymentServiceGetDeploymentMethodDescriptor       = deploymentServiceServiceDescriptor.Methods().ByName("GetDeployment")
	deploymentServiceListDeploymentsMethodDescriptor     = deploymentServiceServiceDescriptor.Methods().ByName("ListDeployments")
	deploymentServiceUpdateDeploymentMethodDescriptor    = deploymentServiceServiceDescriptor.Methods().ByName("UpdateDeployment")
	deploymentServiceStartDeploymentMethodDescriptor     = deploymentServiceServiceDescriptor.Methods().ByName("StartDeployment")
	deploymentServicePauseDeploymentMethodDescriptor     = deploymentServiceServiceDescriptor.Methods().ByName("PauseDeployment")
	deploymentServiceCancelDeploymentMethodDescriptor    = deploymentServiceServiceDescriptor.Methods().ByName("CancelDeployment")
	deploymentServiceGetDeploymentStatusMethodDescriptor = deploymentServiceServiceDescriptor.Methods().ByName("GetDeploymentStatus")
	deploymentServiceUploadArtifactMethodDescriptor      = deploymentServiceServiceDescriptor.Methods().ByName("UploadArtifact")
	deploymentServiceListArtifactsMethodDescriptor       = deploymentServiceServiceDescriptor.Methods().ByName("ListArtifacts")
)

// DeploymentServiceClient is a client for the fleetd.control.v1.DeploymentService service.
type DeploymentServiceClient interface {
	// Create a new deployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get deployment details
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// List deployments
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	// Update deployment configuration
	UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error)
	// Start or resume a deployment
	StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error)
	// Pause a deployment
	PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error)
	// Cancel a deployment
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	// Get deployment status
	GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error)
	// Upload deployment artifact
	UploadArtifact(context.Context) *connect.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
	// List artifacts
	ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error)
}

// NewDeploymentServiceClient constructs a client for the fleetd.control.v1.DeploymentService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deploymentServiceClient{
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCreateDeploymentProcedure,
			connect.WithSchema(deploymentServiceCreateDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentProcedure,
			connect.WithSchema(deploymentServiceGetDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDeployments: connect.NewClient[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentsProcedure,
			connect.WithSchema(deploymentServiceListDeploymentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDeployment: connect.NewClient[v1.UpdateDeploymentRequest, v1.UpdateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceUpdateDeploymentProcedure,
			connect.WithSchema(deploymentServiceUpdateDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startDeployment: connect.NewClient[v1.StartDeploymentRequest, v1.StartDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceStartDeploymentProcedure,
			connect.WithSchema(deploymentServiceStartDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseDeployment: connect.NewClient[v1.PauseDeploymentRequest, v1.PauseDeploymentResponse](
			httpClient,
			baseURL+DeploymentServicePauseDeploymentProcedure,
			connect.WithSchema(deploymentServicePauseDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelDeployment: connect.NewClient[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCancelDeploymentProcedure,
			connect.WithSchema(deploymentServiceCancelDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeploymentStatus: connect.NewClient[v1.GetDeploymentStatusRequest, v1.GetDeploymentStatusResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentStatusProcedure,
			connect.WithSchema(deploymentServiceGetDeploymentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadArtifact: connect.NewClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse](
			httpClient,
			baseURL+DeploymentServiceUploadArtifactProcedure,
			connect.WithSchema(deploymentServiceUploadArtifactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listArtifacts: connect.NewClient[v1.ListArtifactsRequest, v1.ListArtifactsResponse](
			httpClient,
			baseURL+DeploymentServiceListArtifactsProcedure,
			connect.WithSchema(deploymentServiceListArtifactsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	createDeployment    *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment       *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	listDeployments     *connect.Client[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse]
	updateDeployment    *connect.Client[v1.UpdateDeploymentRequest, v1.UpdateDeploymentResponse]
	startDeployment     *connect.Client[v1.StartDeploymentRequest, v1.StartDeploymentResponse]
	pauseDeployment     *connect.Client[v1.PauseDeploymentRequest, v1.PauseDeploymentResponse]
	cancelDeployment    *connect.Client[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse]
	getDeploymentStatus *connect.Client[v1.GetDeploymentStatusRequest, v1.GetDeploymentStatusResponse]
	uploadArtifact      *connect.Client[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
	listArtifacts       *connect.Client[v1.ListArtifactsRequest, v1.ListArtifactsResponse]
}

// CreateDeployment calls fleetd.control.v1.DeploymentService.CreateDeployment.
func (c *deploymentServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls fleetd.control.v1.DeploymentService.GetDeployment.
func (c *deploymentServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// ListDeployments calls fleetd.control.v1.DeploymentService.ListDeployments.
func (c *deploymentServiceClient) ListDeployments(ctx context.Context, req *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return c.listDeployments.CallUnary(ctx, req)
}

// UpdateDeployment calls fleetd.control.v1.DeploymentService.UpdateDeployment.
func (c *deploymentServiceClient) UpdateDeployment(ctx context.Context, req *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error) {
	return c.updateDeployment.CallUnary(ctx, req)
}

// StartDeployment calls fleetd.control.v1.DeploymentService.StartDeployment.
func (c *deploymentServiceClient) StartDeployment(ctx context.Context, req *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error) {
	return c.startDeployment.CallUnary(ctx, req)
}

// PauseDeployment calls fleetd.control.v1.DeploymentService.PauseDeployment.
func (c *deploymentServiceClient) PauseDeployment(ctx context.Context, req *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error) {
	return c.pauseDeployment.CallUnary(ctx, req)
}

// CancelDeployment calls fleetd.control.v1.DeploymentService.CancelDeployment.
func (c *deploymentServiceClient) CancelDeployment(ctx context.Context, req *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return c.cancelDeployment.CallUnary(ctx, req)
}

// GetDeploymentStatus calls fleetd.control.v1.DeploymentService.GetDeploymentStatus.
func (c *deploymentServiceClient) GetDeploymentStatus(ctx context.Context, req *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error) {
	return c.getDeploymentStatus.CallUnary(ctx, req)
}

// UploadArtifact calls fleetd.control.v1.DeploymentService.UploadArtifact.
func (c *deploymentServiceClient) UploadArtifact(ctx context.Context) *connect.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse] {
	return c.uploadArtifact.CallClientStream(ctx)
}

// ListArtifacts calls fleetd.control.v1.DeploymentService.ListArtifacts.
func (c *deploymentServiceClient) ListArtifacts(ctx context.Context, req *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error) {
	return c.listArtifacts.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the fleetd.control.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	// Create a new deployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get deployment details
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// List deployments
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	// Update deployment configuration
	UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error)
	// Start or resume a deployment
	StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error)
	// Pause a deployment
	PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error)
	// Cancel a deployment
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	// Get deployment status
	GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error)
	// Upload deployment artifact
	UploadArtifact(context.Context, *connect.ClientStream[v1.UploadArtifactRequest]) (*connect.Response[v1.UploadArtifactResponse], error)
	// List artifacts
	ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(deploymentServiceCreateDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(deploymentServiceGetDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceListDeploymentsHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentsProcedure,
		svc.ListDeployments,
		connect.WithSchema(deploymentServiceListDeploymentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceUpdateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceUpdateDeploymentProcedure,
		svc.UpdateDeployment,
		connect.WithSchema(deploymentServiceUpdateDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceStartDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceStartDeploymentProcedure,
		svc.StartDeployment,
		connect.WithSchema(deploymentServiceStartDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServicePauseDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServicePauseDeploymentProcedure,
		svc.PauseDeployment,
		connect.WithSchema(deploymentServicePauseDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceCancelDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCancelDeploymentProcedure,
		svc.CancelDeployment,
		connect.WithSchema(deploymentServiceCancelDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentStatusHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentStatusProcedure,
		svc.GetDeploymentStatus,
		connect.WithSchema(deploymentServiceGetDeploymentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceUploadArtifactHandler := connect.NewClientStreamHandler(
		DeploymentServiceUploadArtifactProcedure,
		svc.UploadArtifact,
		connect.WithSchema(deploymentServiceUploadArtifactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceListArtifactsHandler := connect.NewUnaryHandler(
		DeploymentServiceListArtifactsProcedure,
		svc.ListArtifacts,
		connect.WithSchema(deploymentServiceListArtifactsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.control.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceCreateDeploymentProcedure:
			deploymentServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentProcedure:
			deploymentServiceGetDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceListDeploymentsProcedure:
			deploymentServiceListDeploymentsHandler.ServeHTTP(w, r)
		case DeploymentServiceUpdateDeploymentProcedure:
			deploymentServiceUpdateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceStartDeploymentProcedure:
			deploymentServiceStartDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServicePauseDeploymentProcedure:
			deploymentServicePauseDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceCancelDeploymentProcedure:
			deploymentServiceCancelDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentStatusProcedure:
			deploymentServiceGetDeploymentStatusHandler.ServeHTTP(w, r)
		case DeploymentServiceUploadArtifactProcedure:
			deploymentServiceUploadArtifactHandler.ServeHTTP(w, r)
		case DeploymentServiceListArtifactsProcedure:
			deploymentServiceListArtifactsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.CreateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.GetDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.ListDeployments is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) UpdateDeployment(context.Context, *connect.Request[v1.UpdateDeploymentRequest]) (*connect.Response[v1.UpdateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.UpdateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.StartDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.PauseDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.CancelDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.GetDeploymentStatus is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) UploadArtifact(context.Context, *connect.ClientStream[v1.UploadArtifactRequest]) (*connect.Response[v1.UploadArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.UploadArtifact is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.control.v1.DeploymentService.ListArtifacts is not implemented"))
}
