// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/agent/v1/telemetry.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TelemetryServiceName is the fully-qualified name of the TelemetryService service.
	TelemetryServiceName = "fleetd.agent.v1.TelemetryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TelemetryServiceSendMetricsProcedure is the fully-qualified name of the TelemetryService's
	// SendMetrics RPC.
	TelemetryServiceSendMetricsProcedure = "/fleetd.agent.v1.TelemetryService/SendMetrics"
	// TelemetryServiceStreamLogsProcedure is the fully-qualified name of the TelemetryService's
	// StreamLogs RPC.
	TelemetryServiceStreamLogsProcedure = "/fleetd.agent.v1.TelemetryService/StreamLogs"
	// TelemetryServiceSendEventsProcedure is the fully-qualified name of the TelemetryService's
	// SendEvents RPC.
	TelemetryServiceSendEventsProcedure = "/fleetd.agent.v1.TelemetryService/SendEvents"
	// TelemetryServiceSendTelemetryProcedure is the fully-qualified name of the TelemetryService's
	// SendTelemetry RPC.
	TelemetryServiceSendTelemetryProcedure = "/fleetd.agent.v1.TelemetryService/SendTelemetry"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	telemetryServiceServiceDescriptor             = v1.File_proto_agent_v1_telemetry_proto.Services().ByName("TelemetryService")
	telemetryServiceSendMetricsMethodDescriptor   = telemetryServiceServiceDescriptor.Methods().ByName("SendMetrics")
	telemetryServiceStreamLogsMethodDescriptor    = telemetryServiceServiceDescriptor.Methods().ByName("StreamLogs")
	telemetryServiceSendEventsMethodDescriptor    = telemetryServiceServiceDescriptor.Methods().ByName("SendEvents")
	telemetryServiceSendTelemetryMethodDescriptor = telemetryServiceServiceDescriptor.Methods().ByName("SendTelemetry")
)

// TelemetryServiceClient is a client for the fleetd.agent.v1.TelemetryService service.
type TelemetryServiceClient interface {
	// Send metrics batch
	SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error)
	// Stream logs to the server
	StreamLogs(context.Context) *connect.ClientStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse]
	// Send events
	SendEvents(context.Context, *connect.Request[v1.SendEventsRequest]) (*connect.Response[v1.SendEventsResponse], error)
	// Send custom telemetry data
	SendTelemetry(context.Context, *connect.Request[v1.SendTelemetryRequest]) (*connect.Response[v1.SendTelemetryResponse], error)
}

// NewTelemetryServiceClient constructs a client for the fleetd.agent.v1.TelemetryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTelemetryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TelemetryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &telemetryServiceClient{
		sendMetrics: connect.NewClient[v1.SendMetricsRequest, v1.SendMetricsResponse](
			httpClient,
			baseURL+TelemetryServiceSendMetricsProcedure,
			connect.WithSchema(telemetryServiceSendMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		streamLogs: connect.NewClient[v1.StreamLogsRequest, v1.StreamLogsResponse](
			httpClient,
			baseURL+TelemetryServiceStreamLogsProcedure,
			connect.WithSchema(telemetryServiceStreamLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendEvents: connect.NewClient[v1.SendEventsRequest, v1.SendEventsResponse](
			httpClient,
			baseURL+TelemetryServiceSendEventsProcedure,
			connect.WithSchema(telemetryServiceSendEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendTelemetry: connect.NewClient[v1.SendTelemetryRequest, v1.SendTelemetryResponse](
			httpClient,
			baseURL+TelemetryServiceSendTelemetryProcedure,
			connect.WithSchema(telemetryServiceSendTelemetryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// telemetryServiceClient implements TelemetryServiceClient.
type telemetryServiceClient struct {
	sendMetrics   *connect.Client[v1.SendMetricsRequest, v1.SendMetricsResponse]
	streamLogs    *connect.Client[v1.StreamLogsRequest, v1.StreamLogsResponse]
	sendEvents    *connect.Client[v1.SendEventsRequest, v1.SendEventsResponse]
	sendTelemetry *connect.Client[v1.SendTelemetryRequest, v1.SendTelemetryResponse]
}

// SendMetrics calls fleetd.agent.v1.TelemetryService.SendMetrics.
func (c *telemetryServiceClient) SendMetrics(ctx context.Context, req *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error) {
	return c.sendMetrics.CallUnary(ctx, req)
}

// StreamLogs calls fleetd.agent.v1.TelemetryService.StreamLogs.
func (c *telemetryServiceClient) StreamLogs(ctx context.Context) *connect.ClientStreamForClient[v1.StreamLogsRequest, v1.StreamLogsResponse] {
	return c.streamLogs.CallClientStream(ctx)
}

// SendEvents calls fleetd.agent.v1.TelemetryService.SendEvents.
func (c *telemetryServiceClient) SendEvents(ctx context.Context, req *connect.Request[v1.SendEventsRequest]) (*connect.Response[v1.SendEventsResponse], error) {
	return c.sendEvents.CallUnary(ctx, req)
}

// SendTelemetry calls fleetd.agent.v1.TelemetryService.SendTelemetry.
func (c *telemetryServiceClient) SendTelemetry(ctx context.Context, req *connect.Request[v1.SendTelemetryRequest]) (*connect.Response[v1.SendTelemetryResponse], error) {
	return c.sendTelemetry.CallUnary(ctx, req)
}

// TelemetryServiceHandler is an implementation of the fleetd.agent.v1.TelemetryService service.
type TelemetryServiceHandler interface {
	// Send metrics batch
	SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error)
	// Stream logs to the server
	StreamLogs(context.Context, *connect.ClientStream[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error)
	// Send events
	SendEvents(context.Context, *connect.Request[v1.SendEventsRequest]) (*connect.Response[v1.SendEventsResponse], error)
	// Send custom telemetry data
	SendTelemetry(context.Context, *connect.Request[v1.SendTelemetryRequest]) (*connect.Response[v1.SendTelemetryResponse], error)
}

// NewTelemetryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTelemetryServiceHandler(svc TelemetryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	telemetryServiceSendMetricsHandler := connect.NewUnaryHandler(
		TelemetryServiceSendMetricsProcedure,
		svc.SendMetrics,
		connect.WithSchema(telemetryServiceSendMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceStreamLogsHandler := connect.NewClientStreamHandler(
		TelemetryServiceStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(telemetryServiceStreamLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceSendEventsHandler := connect.NewUnaryHandler(
		TelemetryServiceSendEventsProcedure,
		svc.SendEvents,
		connect.WithSchema(telemetryServiceSendEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceSendTelemetryHandler := connect.NewUnaryHandler(
		TelemetryServiceSendTelemetryProcedure,
		svc.SendTelemetry,
		connect.WithSchema(telemetryServiceSendTelemetryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.agent.v1.TelemetryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TelemetryServiceSendMetricsProcedure:
			telemetryServiceSendMetricsHandler.ServeHTTP(w, r)
		case TelemetryServiceStreamLogsProcedure:
			telemetryServiceStreamLogsHandler.ServeHTTP(w, r)
		case TelemetryServiceSendEventsProcedure:
			telemetryServiceSendEventsHandler.ServeHTTP(w, r)
		case TelemetryServiceSendTelemetryProcedure:
			telemetryServiceSendTelemetryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTelemetryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTelemetryServiceHandler struct{}

func (UnimplementedTelemetryServiceHandler) SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.TelemetryService.SendMetrics is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) StreamLogs(context.Context, *connect.ClientStream[v1.StreamLogsRequest]) (*connect.Response[v1.StreamLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.TelemetryService.StreamLogs is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) SendEvents(context.Context, *connect.Request[v1.SendEventsRequest]) (*connect.Response[v1.SendEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.TelemetryService.SendEvents is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) SendTelemetry(context.Context, *connect.Request[v1.SendTelemetryRequest]) (*connect.Response[v1.SendTelemetryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.TelemetryService.SendTelemetry is not implemented"))
}
