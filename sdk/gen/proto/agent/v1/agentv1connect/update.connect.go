// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/agent/v1/update.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateServiceName is the fully-qualified name of the UpdateService service.
	UpdateServiceName = "fleetd.agent.v1.UpdateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdateServiceCheckUpdateProcedure is the fully-qualified name of the UpdateService's CheckUpdate
	// RPC.
	UpdateServiceCheckUpdateProcedure = "/fleetd.agent.v1.UpdateService/CheckUpdate"
	// UpdateServiceDownloadUpdateProcedure is the fully-qualified name of the UpdateService's
	// DownloadUpdate RPC.
	UpdateServiceDownloadUpdateProcedure = "/fleetd.agent.v1.UpdateService/DownloadUpdate"
	// UpdateServiceReportProgressProcedure is the fully-qualified name of the UpdateService's
	// ReportProgress RPC.
	UpdateServiceReportProgressProcedure = "/fleetd.agent.v1.UpdateService/ReportProgress"
	// UpdateServiceConfirmUpdateProcedure is the fully-qualified name of the UpdateService's
	// ConfirmUpdate RPC.
	UpdateServiceConfirmUpdateProcedure = "/fleetd.agent.v1.UpdateService/ConfirmUpdate"
	// UpdateServiceRollbackUpdateProcedure is the fully-qualified name of the UpdateService's
	// RollbackUpdate RPC.
	UpdateServiceRollbackUpdateProcedure = "/fleetd.agent.v1.UpdateService/RollbackUpdate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	updateServiceServiceDescriptor              = v1.File_proto_agent_v1_update_proto.Services().ByName("UpdateService")
	updateServiceCheckUpdateMethodDescriptor    = updateServiceServiceDescriptor.Methods().ByName("CheckUpdate")
	updateServiceDownloadUpdateMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("DownloadUpdate")
	updateServiceReportProgressMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("ReportProgress")
	updateServiceConfirmUpdateMethodDescriptor  = updateServiceServiceDescriptor.Methods().ByName("ConfirmUpdate")
	updateServiceRollbackUpdateMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("RollbackUpdate")
)

// UpdateServiceClient is a client for the fleetd.agent.v1.UpdateService service.
type UpdateServiceClient interface {
	// Check for available updates
	CheckUpdate(context.Context, *connect.Request[v1.CheckUpdateRequest]) (*connect.Response[v1.CheckUpdateResponse], error)
	// Download an update
	DownloadUpdate(context.Context, *connect.Request[v1.DownloadUpdateRequest]) (*connect.ServerStreamForClient[v1.DownloadUpdateResponse], error)
	// Report update progress
	ReportProgress(context.Context, *connect.Request[v1.ReportProgressRequest]) (*connect.Response[v1.ReportProgressResponse], error)
	// Confirm update completion
	ConfirmUpdate(context.Context, *connect.Request[v1.ConfirmUpdateRequest]) (*connect.Response[v1.ConfirmUpdateResponse], error)
	// Rollback an update
	RollbackUpdate(context.Context, *connect.Request[v1.RollbackUpdateRequest]) (*connect.Response[v1.RollbackUpdateResponse], error)
}

// NewUpdateServiceClient constructs a client for the fleetd.agent.v1.UpdateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &updateServiceClient{
		checkUpdate: connect.NewClient[v1.CheckUpdateRequest, v1.CheckUpdateResponse](
			httpClient,
			baseURL+UpdateServiceCheckUpdateProcedure,
			connect.WithSchema(updateServiceCheckUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		downloadUpdate: connect.NewClient[v1.DownloadUpdateRequest, v1.DownloadUpdateResponse](
			httpClient,
			baseURL+UpdateServiceDownloadUpdateProcedure,
			connect.WithSchema(updateServiceDownloadUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportProgress: connect.NewClient[v1.ReportProgressRequest, v1.ReportProgressResponse](
			httpClient,
			baseURL+UpdateServiceReportProgressProcedure,
			connect.WithSchema(updateServiceReportProgressMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		confirmUpdate: connect.NewClient[v1.ConfirmUpdateRequest, v1.ConfirmUpdateResponse](
			httpClient,
			baseURL+UpdateServiceConfirmUpdateProcedure,
			connect.WithSchema(updateServiceConfirmUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rollbackUpdate: connect.NewClient[v1.RollbackUpdateRequest, v1.RollbackUpdateResponse](
			httpClient,
			baseURL+UpdateServiceRollbackUpdateProcedure,
			connect.WithSchema(updateServiceRollbackUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateServiceClient implements UpdateServiceClient.
type updateServiceClient struct {
	checkUpdate    *connect.Client[v1.CheckUpdateRequest, v1.CheckUpdateResponse]
	downloadUpdate *connect.Client[v1.DownloadUpdateRequest, v1.DownloadUpdateResponse]
	reportProgress *connect.Client[v1.ReportProgressRequest, v1.ReportProgressResponse]
	confirmUpdate  *connect.Client[v1.ConfirmUpdateRequest, v1.ConfirmUpdateResponse]
	rollbackUpdate *connect.Client[v1.RollbackUpdateRequest, v1.RollbackUpdateResponse]
}

// CheckUpdate calls fleetd.agent.v1.UpdateService.CheckUpdate.
func (c *updateServiceClient) CheckUpdate(ctx context.Context, req *connect.Request[v1.CheckUpdateRequest]) (*connect.Response[v1.CheckUpdateResponse], error) {
	return c.checkUpdate.CallUnary(ctx, req)
}

// DownloadUpdate calls fleetd.agent.v1.UpdateService.DownloadUpdate.
func (c *updateServiceClient) DownloadUpdate(ctx context.Context, req *connect.Request[v1.DownloadUpdateRequest]) (*connect.ServerStreamForClient[v1.DownloadUpdateResponse], error) {
	return c.downloadUpdate.CallServerStream(ctx, req)
}

// ReportProgress calls fleetd.agent.v1.UpdateService.ReportProgress.
func (c *updateServiceClient) ReportProgress(ctx context.Context, req *connect.Request[v1.ReportProgressRequest]) (*connect.Response[v1.ReportProgressResponse], error) {
	return c.reportProgress.CallUnary(ctx, req)
}

// ConfirmUpdate calls fleetd.agent.v1.UpdateService.ConfirmUpdate.
func (c *updateServiceClient) ConfirmUpdate(ctx context.Context, req *connect.Request[v1.ConfirmUpdateRequest]) (*connect.Response[v1.ConfirmUpdateResponse], error) {
	return c.confirmUpdate.CallUnary(ctx, req)
}

// RollbackUpdate calls fleetd.agent.v1.UpdateService.RollbackUpdate.
func (c *updateServiceClient) RollbackUpdate(ctx context.Context, req *connect.Request[v1.RollbackUpdateRequest]) (*connect.Response[v1.RollbackUpdateResponse], error) {
	return c.rollbackUpdate.CallUnary(ctx, req)
}

// UpdateServiceHandler is an implementation of the fleetd.agent.v1.UpdateService service.
type UpdateServiceHandler interface {
	// Check for available updates
	CheckUpdate(context.Context, *connect.Request[v1.CheckUpdateRequest]) (*connect.Response[v1.CheckUpdateResponse], error)
	// Download an update
	DownloadUpdate(context.Context, *connect.Request[v1.DownloadUpdateRequest], *connect.ServerStream[v1.DownloadUpdateResponse]) error
	// Report update progress
	ReportProgress(context.Context, *connect.Request[v1.ReportProgressRequest]) (*connect.Response[v1.ReportProgressResponse], error)
	// Confirm update completion
	ConfirmUpdate(context.Context, *connect.Request[v1.ConfirmUpdateRequest]) (*connect.Response[v1.ConfirmUpdateResponse], error)
	// Rollback an update
	RollbackUpdate(context.Context, *connect.Request[v1.RollbackUpdateRequest]) (*connect.Response[v1.RollbackUpdateResponse], error)
}

// NewUpdateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateServiceHandler(svc UpdateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateServiceCheckUpdateHandler := connect.NewUnaryHandler(
		UpdateServiceCheckUpdateProcedure,
		svc.CheckUpdate,
		connect.WithSchema(updateServiceCheckUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceDownloadUpdateHandler := connect.NewServerStreamHandler(
		UpdateServiceDownloadUpdateProcedure,
		svc.DownloadUpdate,
		connect.WithSchema(updateServiceDownloadUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceReportProgressHandler := connect.NewUnaryHandler(
		UpdateServiceReportProgressProcedure,
		svc.ReportProgress,
		connect.WithSchema(updateServiceReportProgressMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceConfirmUpdateHandler := connect.NewUnaryHandler(
		UpdateServiceConfirmUpdateProcedure,
		svc.ConfirmUpdate,
		connect.WithSchema(updateServiceConfirmUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceRollbackUpdateHandler := connect.NewUnaryHandler(
		UpdateServiceRollbackUpdateProcedure,
		svc.RollbackUpdate,
		connect.WithSchema(updateServiceRollbackUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.agent.v1.UpdateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateServiceCheckUpdateProcedure:
			updateServiceCheckUpdateHandler.ServeHTTP(w, r)
		case UpdateServiceDownloadUpdateProcedure:
			updateServiceDownloadUpdateHandler.ServeHTTP(w, r)
		case UpdateServiceReportProgressProcedure:
			updateServiceReportProgressHandler.ServeHTTP(w, r)
		case UpdateServiceConfirmUpdateProcedure:
			updateServiceConfirmUpdateHandler.ServeHTTP(w, r)
		case UpdateServiceRollbackUpdateProcedure:
			updateServiceRollbackUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateServiceHandler struct{}

func (UnimplementedUpdateServiceHandler) CheckUpdate(context.Context, *connect.Request[v1.CheckUpdateRequest]) (*connect.Response[v1.CheckUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.UpdateService.CheckUpdate is not implemented"))
}

func (UnimplementedUpdateServiceHandler) DownloadUpdate(context.Context, *connect.Request[v1.DownloadUpdateRequest], *connect.ServerStream[v1.DownloadUpdateResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.UpdateService.DownloadUpdate is not implemented"))
}

func (UnimplementedUpdateServiceHandler) ReportProgress(context.Context, *connect.Request[v1.ReportProgressRequest]) (*connect.Response[v1.ReportProgressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.UpdateService.ReportProgress is not implemented"))
}

func (UnimplementedUpdateServiceHandler) ConfirmUpdate(context.Context, *connect.Request[v1.ConfirmUpdateRequest]) (*connect.Response[v1.ConfirmUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.UpdateService.ConfirmUpdate is not implemented"))
}

func (UnimplementedUpdateServiceHandler) RollbackUpdate(context.Context, *connect.Request[v1.RollbackUpdateRequest]) (*connect.Response[v1.RollbackUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.UpdateService.RollbackUpdate is not implemented"))
}
