// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/agent/v1/device.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "fleetd.agent.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceRegisterProcedure is the fully-qualified name of the DeviceService's Register RPC.
	DeviceServiceRegisterProcedure = "/fleetd.agent.v1.DeviceService/Register"
	// DeviceServiceHeartbeatProcedure is the fully-qualified name of the DeviceService's Heartbeat RPC.
	DeviceServiceHeartbeatProcedure = "/fleetd.agent.v1.DeviceService/Heartbeat"
	// DeviceServiceReportStatusProcedure is the fully-qualified name of the DeviceService's
	// ReportStatus RPC.
	DeviceServiceReportStatusProcedure = "/fleetd.agent.v1.DeviceService/ReportStatus"
	// DeviceServiceDeregisterProcedure is the fully-qualified name of the DeviceService's Deregister
	// RPC.
	DeviceServiceDeregisterProcedure = "/fleetd.agent.v1.DeviceService/Deregister"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deviceServiceServiceDescriptor            = v1.File_proto_agent_v1_device_proto.Services().ByName("DeviceService")
	deviceServiceRegisterMethodDescriptor     = deviceServiceServiceDescriptor.Methods().ByName("Register")
	deviceServiceHeartbeatMethodDescriptor    = deviceServiceServiceDescriptor.Methods().ByName("Heartbeat")
	deviceServiceReportStatusMethodDescriptor = deviceServiceServiceDescriptor.Methods().ByName("ReportStatus")
	deviceServiceDeregisterMethodDescriptor   = deviceServiceServiceDescriptor.Methods().ByName("Deregister")
)

// DeviceServiceClient is a client for the fleetd.agent.v1.DeviceService service.
type DeviceServiceClient interface {
	// Register a new device with the fleet
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Send periodic heartbeat to maintain connection
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// Report device status and health
	ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error)
	// Deregister a device from the fleet
	Deregister(context.Context, *connect.Request[v1.DeregisterRequest]) (*connect.Response[v1.DeregisterResponse], error)
}

// NewDeviceServiceClient constructs a client for the fleetd.agent.v1.DeviceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deviceServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+DeviceServiceRegisterProcedure,
			connect.WithSchema(deviceServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+DeviceServiceHeartbeatProcedure,
			connect.WithSchema(deviceServiceHeartbeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportStatus: connect.NewClient[v1.ReportStatusRequest, v1.ReportStatusResponse](
			httpClient,
			baseURL+DeviceServiceReportStatusProcedure,
			connect.WithSchema(deviceServiceReportStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deregister: connect.NewClient[v1.DeregisterRequest, v1.DeregisterResponse](
			httpClient,
			baseURL+DeviceServiceDeregisterProcedure,
			connect.WithSchema(deviceServiceDeregisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	register     *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	heartbeat    *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	reportStatus *connect.Client[v1.ReportStatusRequest, v1.ReportStatusResponse]
	deregister   *connect.Client[v1.DeregisterRequest, v1.DeregisterResponse]
}

// Register calls fleetd.agent.v1.DeviceService.Register.
func (c *deviceServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Heartbeat calls fleetd.agent.v1.DeviceService.Heartbeat.
func (c *deviceServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// ReportStatus calls fleetd.agent.v1.DeviceService.ReportStatus.
func (c *deviceServiceClient) ReportStatus(ctx context.Context, req *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error) {
	return c.reportStatus.CallUnary(ctx, req)
}

// Deregister calls fleetd.agent.v1.DeviceService.Deregister.
func (c *deviceServiceClient) Deregister(ctx context.Context, req *connect.Request[v1.DeregisterRequest]) (*connect.Response[v1.DeregisterResponse], error) {
	return c.deregister.CallUnary(ctx, req)
}

// DeviceServiceHandler is an implementation of the fleetd.agent.v1.DeviceService service.
type DeviceServiceHandler interface {
	// Register a new device with the fleet
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Send periodic heartbeat to maintain connection
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// Report device status and health
	ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error)
	// Deregister a device from the fleet
	Deregister(context.Context, *connect.Request[v1.DeregisterRequest]) (*connect.Response[v1.DeregisterResponse], error)
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceRegisterHandler := connect.NewUnaryHandler(
		DeviceServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(deviceServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceHeartbeatHandler := connect.NewUnaryHandler(
		DeviceServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(deviceServiceHeartbeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceReportStatusHandler := connect.NewUnaryHandler(
		DeviceServiceReportStatusProcedure,
		svc.ReportStatus,
		connect.WithSchema(deviceServiceReportStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceDeregisterHandler := connect.NewUnaryHandler(
		DeviceServiceDeregisterProcedure,
		svc.Deregister,
		connect.WithSchema(deviceServiceDeregisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.agent.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceRegisterProcedure:
			deviceServiceRegisterHandler.ServeHTTP(w, r)
		case DeviceServiceHeartbeatProcedure:
			deviceServiceHeartbeatHandler.ServeHTTP(w, r)
		case DeviceServiceReportStatusProcedure:
			deviceServiceReportStatusHandler.ServeHTTP(w, r)
		case DeviceServiceDeregisterProcedure:
			deviceServiceDeregisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DeviceService.Register is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DeviceService.Heartbeat is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DeviceService.ReportStatus is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Deregister(context.Context, *connect.Request[v1.DeregisterRequest]) (*connect.Response[v1.DeregisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DeviceService.Deregister is not implemented"))
}
