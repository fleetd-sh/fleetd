// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/agent/v1/discovery.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/proto/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiscoveryServiceName is the fully-qualified name of the DiscoveryService service.
	DiscoveryServiceName = "fleetd.agent.v1.DiscoveryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiscoveryServiceAnnounceProcedure is the fully-qualified name of the DiscoveryService's Announce
	// RPC.
	DiscoveryServiceAnnounceProcedure = "/fleetd.agent.v1.DiscoveryService/Announce"
	// DiscoveryServiceDiscoverProcedure is the fully-qualified name of the DiscoveryService's Discover
	// RPC.
	DiscoveryServiceDiscoverProcedure = "/fleetd.agent.v1.DiscoveryService/Discover"
	// DiscoveryServicePairProcedure is the fully-qualified name of the DiscoveryService's Pair RPC.
	DiscoveryServicePairProcedure = "/fleetd.agent.v1.DiscoveryService/Pair"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	discoveryServiceServiceDescriptor        = v1.File_proto_agent_v1_discovery_proto.Services().ByName("DiscoveryService")
	discoveryServiceAnnounceMethodDescriptor = discoveryServiceServiceDescriptor.Methods().ByName("Announce")
	discoveryServiceDiscoverMethodDescriptor = discoveryServiceServiceDescriptor.Methods().ByName("Discover")
	discoveryServicePairMethodDescriptor     = discoveryServiceServiceDescriptor.Methods().ByName("Pair")
)

// DiscoveryServiceClient is a client for the fleetd.agent.v1.DiscoveryService service.
type DiscoveryServiceClient interface {
	// Announce device presence on the network
	Announce(context.Context, *connect.Request[v1.AnnounceRequest]) (*connect.Response[v1.AnnounceResponse], error)
	// Discover devices on the local network
	Discover(context.Context, *connect.Request[v1.DiscoverRequest]) (*connect.ServerStreamForClient[v1.DiscoverResponse], error)
	// Pair a discovered device with the fleet
	Pair(context.Context, *connect.Request[v1.PairRequest]) (*connect.Response[v1.PairResponse], error)
}

// NewDiscoveryServiceClient constructs a client for the fleetd.agent.v1.DiscoveryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscoveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiscoveryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discoveryServiceClient{
		announce: connect.NewClient[v1.AnnounceRequest, v1.AnnounceResponse](
			httpClient,
			baseURL+DiscoveryServiceAnnounceProcedure,
			connect.WithSchema(discoveryServiceAnnounceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		discover: connect.NewClient[v1.DiscoverRequest, v1.DiscoverResponse](
			httpClient,
			baseURL+DiscoveryServiceDiscoverProcedure,
			connect.WithSchema(discoveryServiceDiscoverMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pair: connect.NewClient[v1.PairRequest, v1.PairResponse](
			httpClient,
			baseURL+DiscoveryServicePairProcedure,
			connect.WithSchema(discoveryServicePairMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// discoveryServiceClient implements DiscoveryServiceClient.
type discoveryServiceClient struct {
	announce *connect.Client[v1.AnnounceRequest, v1.AnnounceResponse]
	discover *connect.Client[v1.DiscoverRequest, v1.DiscoverResponse]
	pair     *connect.Client[v1.PairRequest, v1.PairResponse]
}

// Announce calls fleetd.agent.v1.DiscoveryService.Announce.
func (c *discoveryServiceClient) Announce(ctx context.Context, req *connect.Request[v1.AnnounceRequest]) (*connect.Response[v1.AnnounceResponse], error) {
	return c.announce.CallUnary(ctx, req)
}

// Discover calls fleetd.agent.v1.DiscoveryService.Discover.
func (c *discoveryServiceClient) Discover(ctx context.Context, req *connect.Request[v1.DiscoverRequest]) (*connect.ServerStreamForClient[v1.DiscoverResponse], error) {
	return c.discover.CallServerStream(ctx, req)
}

// Pair calls fleetd.agent.v1.DiscoveryService.Pair.
func (c *discoveryServiceClient) Pair(ctx context.Context, req *connect.Request[v1.PairRequest]) (*connect.Response[v1.PairResponse], error) {
	return c.pair.CallUnary(ctx, req)
}

// DiscoveryServiceHandler is an implementation of the fleetd.agent.v1.DiscoveryService service.
type DiscoveryServiceHandler interface {
	// Announce device presence on the network
	Announce(context.Context, *connect.Request[v1.AnnounceRequest]) (*connect.Response[v1.AnnounceResponse], error)
	// Discover devices on the local network
	Discover(context.Context, *connect.Request[v1.DiscoverRequest], *connect.ServerStream[v1.DiscoverResponse]) error
	// Pair a discovered device with the fleet
	Pair(context.Context, *connect.Request[v1.PairRequest]) (*connect.Response[v1.PairResponse], error)
}

// NewDiscoveryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscoveryServiceHandler(svc DiscoveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	discoveryServiceAnnounceHandler := connect.NewUnaryHandler(
		DiscoveryServiceAnnounceProcedure,
		svc.Announce,
		connect.WithSchema(discoveryServiceAnnounceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	discoveryServiceDiscoverHandler := connect.NewServerStreamHandler(
		DiscoveryServiceDiscoverProcedure,
		svc.Discover,
		connect.WithSchema(discoveryServiceDiscoverMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	discoveryServicePairHandler := connect.NewUnaryHandler(
		DiscoveryServicePairProcedure,
		svc.Pair,
		connect.WithSchema(discoveryServicePairMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.agent.v1.DiscoveryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscoveryServiceAnnounceProcedure:
			discoveryServiceAnnounceHandler.ServeHTTP(w, r)
		case DiscoveryServiceDiscoverProcedure:
			discoveryServiceDiscoverHandler.ServeHTTP(w, r)
		case DiscoveryServicePairProcedure:
			discoveryServicePairHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscoveryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscoveryServiceHandler struct{}

func (UnimplementedDiscoveryServiceHandler) Announce(context.Context, *connect.Request[v1.AnnounceRequest]) (*connect.Response[v1.AnnounceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DiscoveryService.Announce is not implemented"))
}

func (UnimplementedDiscoveryServiceHandler) Discover(context.Context, *connect.Request[v1.DiscoverRequest], *connect.ServerStream[v1.DiscoverResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DiscoveryService.Discover is not implemented"))
}

func (UnimplementedDiscoveryServiceHandler) Pair(context.Context, *connect.Request[v1.PairRequest]) (*connect.Response[v1.PairResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.agent.v1.DiscoveryService.Pair is not implemented"))
}
