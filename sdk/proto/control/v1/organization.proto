syntax = "proto3";

package fleetd.control.v1;

option go_package = "fleetd.sh/gen/control/v1;controlpb";

import "google/protobuf/timestamp.proto";
import "proto/control/v1/analytics.proto";

// OrganizationService manages organizations and users
service OrganizationService {
  // Create an organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  // Get organization details
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);

  // Update organization
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);

  // List organizations (admin only)
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse);

  // Create API key
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse);

  // List API keys
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse);

  // Revoke API key
  rpc RevokeAPIKey(RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse);

  // Create project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse);

  // List projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse);

  // Get project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);

  // Update project
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse);

  // Delete project
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse);

  // Get usage metrics
  rpc GetUsageMetrics(GetUsageMetricsRequest) returns (GetUsageMetricsResponse);
}

// CreateOrganizationRequest creates an organization
message CreateOrganizationRequest {
  string name = 1;
  string display_name = 2;
  string email = 3;
  BillingPlan plan = 4;
  map<string, string> metadata = 5;
}

// CreateOrganizationResponse contains created organization
message CreateOrganizationResponse {
  Organization organization = 1;
}

// GetOrganizationRequest gets organization details
message GetOrganizationRequest {
  string organization_id = 1;
}

// GetOrganizationResponse contains organization details
message GetOrganizationResponse {
  Organization organization = 1;
  OrganizationStats stats = 2;
}

// UpdateOrganizationRequest updates organization
message UpdateOrganizationRequest {
  string organization_id = 1;
  string display_name = 2;
  string email = 3;
  BillingPlan plan = 4;
  map<string, string> metadata = 5;
}

// UpdateOrganizationResponse contains updated organization
message UpdateOrganizationResponse {
  Organization organization = 1;
}

// ListOrganizationsRequest lists organizations
message ListOrganizationsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// ListOrganizationsResponse contains organizations
message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  string next_page_token = 2;
}

// CreateAPIKeyRequest creates an API key
message CreateAPIKeyRequest {
  string organization_id = 1;
  string name = 2;
  string description = 3;
  repeated string scopes = 4;
  google.protobuf.Timestamp expires_at = 5;
}

// CreateAPIKeyResponse contains created API key
message CreateAPIKeyResponse {
  APIKey api_key = 1;
  string secret = 2;  // Only returned once
}

// ListAPIKeysRequest lists API keys
message ListAPIKeysRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// ListAPIKeysResponse contains API keys
message ListAPIKeysResponse {
  repeated APIKey api_keys = 1;
  string next_page_token = 2;
}

// RevokeAPIKeyRequest revokes an API key
message RevokeAPIKeyRequest {
  string key_id = 1;
}

// RevokeAPIKeyResponse confirms revocation
message RevokeAPIKeyResponse {
  bool revoked = 1;
}

// CreateProjectRequest creates a project
message CreateProjectRequest {
  string organization_id = 1;
  string name = 2;
  string description = 3;
  ProjectSettings settings = 4;
  map<string, string> metadata = 5;
}

// CreateProjectResponse contains created project
message CreateProjectResponse {
  Project project = 1;
  string provisioning_key = 2;  // Key for device provisioning
}

// ListProjectsRequest lists projects
message ListProjectsRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// ListProjectsResponse contains projects
message ListProjectsResponse {
  repeated Project projects = 1;
  string next_page_token = 2;
}

// GetProjectRequest gets project details
message GetProjectRequest {
  string project_id = 1;
}

// GetProjectResponse contains project details
message GetProjectResponse {
  Project project = 1;
  ProjectStats stats = 2;
}

// UpdateProjectRequest updates a project
message UpdateProjectRequest {
  string project_id = 1;
  string description = 2;
  ProjectSettings settings = 3;
  map<string, string> metadata = 4;
}

// UpdateProjectResponse contains updated project
message UpdateProjectResponse {
  Project project = 1;
}

// DeleteProjectRequest deletes a project
message DeleteProjectRequest {
  string project_id = 1;
}

// DeleteProjectResponse confirms deletion
message DeleteProjectResponse {
  bool deleted = 1;
}

// GetUsageMetricsRequest gets usage metrics
message GetUsageMetricsRequest {
  string organization_id = 1;
  TimeRange time_range = 2;
}

// GetUsageMetricsResponse contains usage metrics
message GetUsageMetricsResponse {
  UsageMetrics metrics = 1;
  repeated UsageTrend trends = 2;
}

// Organization represents an organization
message Organization {
  string id = 1;
  string name = 2;
  string display_name = 3;
  string email = 4;
  BillingPlan plan = 5;
  OrganizationStatus status = 6;
  ResourceLimits limits = 7;
  map<string, string> metadata = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// BillingPlan defines billing plans
enum BillingPlan {
  BILLING_PLAN_UNSPECIFIED = 0;
  BILLING_PLAN_FREE = 1;
  BILLING_PLAN_STARTER = 2;
  BILLING_PLAN_PRO = 3;
  BILLING_PLAN_ENTERPRISE = 4;
}

// OrganizationStatus defines organization status
enum OrganizationStatus {
  ORGANIZATION_STATUS_UNSPECIFIED = 0;
  ORGANIZATION_STATUS_ACTIVE = 1;
  ORGANIZATION_STATUS_SUSPENDED = 2;
  ORGANIZATION_STATUS_DELETED = 3;
}

// ResourceLimits defines resource limits
message ResourceLimits {
  int32 max_devices = 1;
  int32 max_projects = 2;
  int32 max_users = 3;
  int64 max_storage_bytes = 4;
  int64 max_bandwidth_bytes = 5;
  int32 max_api_calls_per_minute = 6;
  int32 data_retention_days = 7;
}

// OrganizationStats contains organization statistics
message OrganizationStats {
  int32 total_devices = 1;
  int32 active_devices = 2;
  int32 total_projects = 3;
  int32 total_users = 4;
  int64 storage_used_bytes = 5;
  int64 bandwidth_used_bytes = 6;
}

// APIKey represents an API key
message APIKey {
  string id = 1;
  string name = 2;
  string description = 3;
  string key_prefix = 4;  // First few chars for identification
  repeated string scopes = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp last_used_at = 7;
  google.protobuf.Timestamp expires_at = 8;
  bool active = 9;
}

// Project represents a project within an organization
message Project {
  string id = 1;
  string organization_id = 2;
  string name = 3;
  string description = 4;
  ProjectSettings settings = 5;
  map<string, string> metadata = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// ProjectSettings contains project settings
message ProjectSettings {
  bool auto_register_devices = 1;
  bool require_device_approval = 2;
  int32 device_heartbeat_timeout_seconds = 3;
  int32 device_offline_threshold_seconds = 4;
  repeated string allowed_device_types = 5;
  map<string, string> default_labels = 6;
}

// ProjectStats contains project statistics
message ProjectStats {
  int32 total_devices = 1;
  int32 online_devices = 2;
  int32 total_deployments = 3;
  int32 active_deployments = 4;
  int64 data_ingested_bytes = 5;
  int64 data_egress_bytes = 6;
}

// UsageMetrics contains usage metrics
message UsageMetrics {
  int64 device_hours = 1;
  int64 data_ingested_bytes = 2;
  int64 data_egress_bytes = 3;
  int64 storage_used_bytes = 4;
  int64 api_calls = 5;
  int64 deployments_count = 6;
  double estimated_cost = 7;
}

// UsageTrend shows usage trends
message UsageTrend {
  string metric = 1;
  repeated DataPoint points = 2;
  double average = 3;
  double peak = 4;
}

