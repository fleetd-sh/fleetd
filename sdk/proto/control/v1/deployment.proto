syntax = "proto3";

package fleetd.control.v1;

option go_package = "fleetd.sh/gen/control/v1;controlpb";

import "google/protobuf/timestamp.proto";

// DeploymentService manages software deployments to devices
service DeploymentService {
  // Create a new deployment
  rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse);

  // Get deployment details
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse);

  // List deployments
  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse);

  // Update deployment configuration
  rpc UpdateDeployment(UpdateDeploymentRequest) returns (UpdateDeploymentResponse);

  // Start or resume a deployment
  rpc StartDeployment(StartDeploymentRequest) returns (StartDeploymentResponse);

  // Pause a deployment
  rpc PauseDeployment(PauseDeploymentRequest) returns (PauseDeploymentResponse);

  // Cancel a deployment
  rpc CancelDeployment(CancelDeploymentRequest) returns (CancelDeploymentResponse);

  // Get deployment status
  rpc GetDeploymentStatus(GetDeploymentStatusRequest) returns (GetDeploymentStatusResponse);

  // Upload deployment artifact
  rpc UploadArtifact(stream UploadArtifactRequest) returns (UploadArtifactResponse);

  // List artifacts
  rpc ListArtifacts(ListArtifactsRequest) returns (ListArtifactsResponse);
}

// CreateDeploymentRequest creates a new deployment
message CreateDeploymentRequest {
  string name = 1;
  string description = 2;
  string artifact_id = 3;
  DeploymentStrategy strategy = 4;
  DeploymentTarget target = 5;
  RolloutPolicy rollout_policy = 6;
  map<string, string> metadata = 7;
}

// CreateDeploymentResponse contains created deployment
message CreateDeploymentResponse {
  Deployment deployment = 1;
}

// GetDeploymentRequest gets deployment details
message GetDeploymentRequest {
  string deployment_id = 1;
  bool include_device_status = 2;
}

// GetDeploymentResponse contains deployment details
message GetDeploymentResponse {
  Deployment deployment = 1;
  repeated DeviceDeploymentStatus device_statuses = 2;
}

// ListDeploymentsRequest lists deployments
message ListDeploymentsRequest {
  string organization_id = 1;
  repeated DeploymentState states = 2;
  int32 page_size = 3;
  string page_token = 4;
}

// ListDeploymentsResponse contains deployments
message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
  string next_page_token = 2;
}

// UpdateDeploymentRequest updates deployment
message UpdateDeploymentRequest {
  string deployment_id = 1;
  string description = 2;
  RolloutPolicy rollout_policy = 3;
  map<string, string> metadata = 4;
}

// UpdateDeploymentResponse contains updated deployment
message UpdateDeploymentResponse {
  Deployment deployment = 1;
}

// StartDeploymentRequest starts a deployment
message StartDeploymentRequest {
  string deployment_id = 1;
  bool force = 2;  // Force start even if preconditions fail
}

// StartDeploymentResponse confirms start
message StartDeploymentResponse {
  bool started = 1;
  string message = 2;
}

// PauseDeploymentRequest pauses a deployment
message PauseDeploymentRequest {
  string deployment_id = 1;
  string reason = 2;
}

// PauseDeploymentResponse confirms pause
message PauseDeploymentResponse {
  bool paused = 1;
}

// CancelDeploymentRequest cancels a deployment
message CancelDeploymentRequest {
  string deployment_id = 1;
  string reason = 2;
  bool rollback = 3;  // Rollback already updated devices
}

// CancelDeploymentResponse confirms cancellation
message CancelDeploymentResponse {
  bool cancelled = 1;
  int32 devices_rolled_back = 2;
}

// GetDeploymentStatusRequest gets deployment status
message GetDeploymentStatusRequest {
  string deployment_id = 1;
}

// GetDeploymentStatusResponse contains deployment status
message GetDeploymentStatusResponse {
  DeploymentStatus status = 1;
}

// UploadArtifactRequest uploads deployment artifact
message UploadArtifactRequest {
  oneof data {
    ArtifactMetadata metadata = 1;
    bytes chunk = 2;
  }
}

// UploadArtifactResponse contains upload result
message UploadArtifactResponse {
  string artifact_id = 1;
  int64 size_bytes = 2;
  string checksum = 3;
}

// ListArtifactsRequest lists artifacts
message ListArtifactsRequest {
  string organization_id = 1;
  repeated string types = 2;
  int32 page_size = 3;
  string page_token = 4;
}

// ListArtifactsResponse contains artifacts
message ListArtifactsResponse {
  repeated Artifact artifacts = 1;
  string next_page_token = 2;
}

// Deployment represents a software deployment
message Deployment {
  string id = 1;
  string name = 2;
  string description = 3;
  string artifact_id = 4;
  DeploymentStrategy strategy = 5;
  DeploymentTarget target = 6;
  RolloutPolicy rollout_policy = 7;
  DeploymentState state = 8;
  DeploymentStatus status = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp started_at = 11;
  google.protobuf.Timestamp completed_at = 12;
  map<string, string> metadata = 13;
}

// DeploymentStrategy defines how to deploy
message DeploymentStrategy {
  DeploymentType type = 1;
  bool allow_downgrade = 2;
  bool force_update = 3;
  ValidationPolicy validation = 4;
}

// DeploymentType defines deployment approach
enum DeploymentType {
  DEPLOYMENT_TYPE_UNSPECIFIED = 0;
  DEPLOYMENT_TYPE_ROLLING = 1;      // Progressive rollout
  DEPLOYMENT_TYPE_CANARY = 2;       // Test on subset first
  DEPLOYMENT_TYPE_BLUE_GREEN = 3;   // Instant switchover
  DEPLOYMENT_TYPE_IMMEDIATE = 4;    // All at once
}

// DeploymentTarget defines target devices
message DeploymentTarget {
  repeated string device_ids = 1;
  repeated string group_ids = 2;
  map<string, string> label_selectors = 3;
  repeated string excluded_device_ids = 4;
}

// RolloutPolicy controls deployment rollout
message RolloutPolicy {
  int32 batch_size = 1;           // Devices per batch
  int32 batch_percentage = 2;     // Percentage per batch
  int32 pause_between_batches = 3; // Seconds between batches
  int32 max_failures = 4;         // Max failures before abort
  double failure_threshold = 5;   // Failure percentage threshold
  bool auto_rollback = 6;         // Auto rollback on failure
}

// ValidationPolicy defines validation requirements
message ValidationPolicy {
  bool require_health_check = 1;
  int32 health_check_timeout = 2;
  bool require_confirmation = 3;
  int32 confirmation_timeout = 4;
}

// DeploymentState represents deployment lifecycle state
enum DeploymentState {
  DEPLOYMENT_STATE_UNSPECIFIED = 0;
  DEPLOYMENT_STATE_DRAFT = 1;
  DEPLOYMENT_STATE_SCHEDULED = 2;
  DEPLOYMENT_STATE_RUNNING = 3;
  DEPLOYMENT_STATE_PAUSED = 4;
  DEPLOYMENT_STATE_COMPLETED = 5;
  DEPLOYMENT_STATE_FAILED = 6;
  DEPLOYMENT_STATE_CANCELLED = 7;
  DEPLOYMENT_STATE_ROLLING_BACK = 8;
}

// DeploymentStatus contains deployment progress
message DeploymentStatus {
  int32 total_devices = 1;
  int32 pending_devices = 2;
  int32 updating_devices = 3;
  int32 updated_devices = 4;
  int32 failed_devices = 5;
  int32 rolled_back_devices = 6;
  double progress_percentage = 7;
  string current_batch = 8;
  repeated DeploymentError errors = 9;
}

// DeviceDeploymentStatus tracks per-device status
message DeviceDeploymentStatus {
  string device_id = 1;
  DeviceUpdateState state = 2;
  int32 progress_percentage = 3;
  string message = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
}

// DeviceUpdateState represents device update state
enum DeviceUpdateState {
  DEVICE_UPDATE_STATE_UNSPECIFIED = 0;
  DEVICE_UPDATE_STATE_PENDING = 1;
  DEVICE_UPDATE_STATE_DOWNLOADING = 2;
  DEVICE_UPDATE_STATE_INSTALLING = 3;
  DEVICE_UPDATE_STATE_VALIDATING = 4;
  DEVICE_UPDATE_STATE_COMPLETED = 5;
  DEVICE_UPDATE_STATE_FAILED = 6;
  DEVICE_UPDATE_STATE_ROLLED_BACK = 7;
}

// Artifact represents a deployable artifact
message Artifact {
  string id = 1;
  string name = 2;
  string version = 3;
  string type = 4;  // firmware, software, config
  int64 size_bytes = 5;
  string checksum = 6;
  string signature = 7;
  map<string, string> metadata = 8;
  google.protobuf.Timestamp uploaded_at = 9;
}

// ArtifactMetadata sent before artifact chunks
message ArtifactMetadata {
  string name = 1;
  string version = 2;
  string type = 3;
  int64 size_bytes = 4;
  string checksum = 5;
  map<string, string> metadata = 6;
}

// DeploymentError represents a deployment error
message DeploymentError {
  string device_id = 1;
  string error_code = 2;
  string message = 3;
  google.protobuf.Timestamp occurred_at = 4;
}