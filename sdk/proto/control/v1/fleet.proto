syntax = "proto3";

package fleetd.control.v1;

option go_package = "fleetd.sh/gen/control/v1;controlpb";

import "google/protobuf/timestamp.proto";
import "proto/common/v1/device.proto";
import "proto/common/v1/metrics.proto";

// FleetService provides fleet-wide management operations
service FleetService {
  // Get fleet statistics
  rpc GetFleetStats(GetFleetStatsRequest) returns (GetFleetStatsResponse);

  // List all devices in the fleet
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);

  // Get a specific device
  rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);

  // Update device configuration
  rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse);

  // Delete a device from the fleet
  rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse);

  // Execute command on devices
  rpc ExecuteCommand(ExecuteCommandRequest) returns (ExecuteCommandResponse);

  // Get device groups
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);

  // Create a device group
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);

  // Update a device group
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse);

  // Delete a device group
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);
}

// GetFleetStatsRequest requests fleet statistics
message GetFleetStatsRequest {
  string organization_id = 1;
  repeated string group_ids = 2;
}

// GetFleetStatsResponse contains fleet statistics
message GetFleetStatsResponse {
  int32 total_devices = 1;
  int32 online_devices = 2;
  int32 offline_devices = 3;
  int32 updating_devices = 4;
  int32 error_devices = 5;
  map<string, int32> devices_by_type = 6;
  map<string, int32> devices_by_status = 7;
  FleetHealth health = 8;
}

// ListDevicesRequest lists devices with filters
message ListDevicesRequest {
  string organization_id = 1;

  // Filters
  repeated string group_ids = 2;
  repeated string device_types = 3;
  repeated fleetd.common.v1.DeviceStatus statuses = 4;
  map<string, string> labels = 5;
  string search_query = 6;

  // Pagination
  int32 page_size = 7;
  string page_token = 8;

  // Sorting
  string order_by = 9;  // name, last_seen, status, etc.
  bool descending = 10;
}

// ListDevicesResponse contains device list
message ListDevicesResponse {
  repeated fleetd.common.v1.Device devices = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// GetDeviceRequest gets a specific device
message GetDeviceRequest {
  string device_id = 1;
  bool include_metrics = 2;
  bool include_logs = 3;
  bool include_events = 4;
}

// GetDeviceResponse contains device details
message GetDeviceResponse {
  fleetd.common.v1.Device device = 1;
  DeviceMetrics metrics = 2;
  repeated fleetd.common.v1.LogEntry recent_logs = 3;
  repeated fleetd.common.v1.Event recent_events = 4;
}

// UpdateDeviceRequest updates device configuration
message UpdateDeviceRequest {
  string device_id = 1;
  map<string, string> labels = 2;
  map<string, string> metadata = 3;
  repeated string add_to_groups = 4;
  repeated string remove_from_groups = 5;
}

// UpdateDeviceResponse confirms update
message UpdateDeviceResponse {
  fleetd.common.v1.Device device = 1;
}

// DeleteDeviceRequest deletes a device
message DeleteDeviceRequest {
  string device_id = 1;
  bool force = 2;  // Force delete even if device is online
}

// DeleteDeviceResponse confirms deletion
message DeleteDeviceResponse {
  bool success = 1;
  string message = 2;
}

// ExecuteCommandRequest executes command on devices
message ExecuteCommandRequest {
  repeated string device_ids = 1;
  repeated string group_ids = 2;
  Command command = 3;
  google.protobuf.Timestamp execute_at = 4;  // Schedule for later
  int32 timeout_seconds = 5;
}

// ExecuteCommandResponse contains command execution result
message ExecuteCommandResponse {
  string command_id = 1;
  int32 devices_targeted = 2;
  map<string, CommandStatus> device_statuses = 3;
}

// ListGroupsRequest lists device groups
message ListGroupsRequest {
  string organization_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// ListGroupsResponse contains groups
message ListGroupsResponse {
  repeated DeviceGroup groups = 1;
  string next_page_token = 2;
}

// CreateGroupRequest creates a device group
message CreateGroupRequest {
  string name = 1;
  string description = 2;
  map<string, string> labels = 3;  // Label selectors
  repeated string device_ids = 4;  // Explicit device IDs
}

// CreateGroupResponse contains created group
message CreateGroupResponse {
  DeviceGroup group = 1;
}

// UpdateGroupRequest updates a group
message UpdateGroupRequest {
  string group_id = 1;
  string name = 2;
  string description = 3;
  map<string, string> labels = 4;
  repeated string add_devices = 5;
  repeated string remove_devices = 6;
}

// UpdateGroupResponse contains updated group
message UpdateGroupResponse {
  DeviceGroup group = 1;
}

// DeleteGroupRequest deletes a group
message DeleteGroupRequest {
  string group_id = 1;
}

// DeleteGroupResponse confirms deletion
message DeleteGroupResponse {
  bool success = 1;
}

// DeviceGroup represents a group of devices
message DeviceGroup {
  string id = 1;
  string name = 2;
  string description = 3;
  map<string, string> label_selectors = 4;
  repeated string device_ids = 5;
  int32 device_count = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// Command to execute on devices
message Command {
  string type = 1;  // reboot, update, collect-logs, execute-script
  map<string, string> parameters = 2;
  string script = 3;  // For execute-script type
}

// CommandStatus represents command execution status
enum CommandStatus {
  COMMAND_STATUS_UNSPECIFIED = 0;
  COMMAND_STATUS_PENDING = 1;
  COMMAND_STATUS_EXECUTING = 2;
  COMMAND_STATUS_SUCCESS = 3;
  COMMAND_STATUS_FAILED = 4;
  COMMAND_STATUS_TIMEOUT = 5;
}

// FleetHealth represents overall fleet health
message FleetHealth {
  HealthStatus status = 1;
  repeated HealthIssue issues = 2;
  google.protobuf.Timestamp last_checked = 3;
}

// HealthStatus represents health state
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_HEALTHY = 1;
  HEALTH_STATUS_DEGRADED = 2;
  HEALTH_STATUS_UNHEALTHY = 3;
}

// HealthIssue represents a health problem
message HealthIssue {
  string type = 1;
  string message = 2;
  int32 affected_devices = 3;
  google.protobuf.Timestamp detected_at = 4;
}

// DeviceMetrics contains device metrics summary
message DeviceMetrics {
  fleetd.common.v1.SystemMetrics current = 1;
  map<string, double> averages = 2;  // 1h, 24h averages
  map<string, double> peaks = 3;     // Peak values
}