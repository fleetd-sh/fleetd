syntax = "proto3";

package fleetd.agent.v1;

option go_package = "fleetd.sh/gen/agent/v1;agentpb";

import "google/protobuf/timestamp.proto";
import "proto/common/v1/device.proto";
import "proto/common/v1/metrics.proto";

// DeviceService handles device lifecycle operations
service DeviceService {
  // Register a new device with the fleet
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Send periodic heartbeat to maintain connection
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Report device status and health
  rpc ReportStatus(ReportStatusRequest) returns (ReportStatusResponse);

  // Deregister a device from the fleet
  rpc Deregister(DeregisterRequest) returns (DeregisterResponse);
}

// RegisterRequest is sent by a device to register with the fleet
message RegisterRequest {
  string name = 1;
  string type = 2;              // Device type (raspberry-pi, esp32, etc.)
  string serial_number = 3;
  string hardware_id = 4;       // Unique hardware identifier
  string provisioning_key = 5;  // Pre-shared key from provisioning

  // Device information
  fleetd.common.v1.HardwareInfo hardware = 6;
  fleetd.common.v1.SoftwareInfo software = 7;
  fleetd.common.v1.NetworkInfo network = 8;

  map<string, string> metadata = 9;
  map<string, string> labels = 10;
}

// RegisterResponse contains the device registration result
message RegisterResponse {
  string device_id = 1;
  string device_token = 2;  // Auth token for future requests
  string api_endpoint = 3;  // Specific endpoint for this device

  // Initial configuration
  DeviceConfig config = 4;
}

// HeartbeatRequest is sent periodically by devices
message HeartbeatRequest {
  string device_id = 1;
  fleetd.common.v1.SystemMetrics metrics = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// HeartbeatResponse may contain pending commands
message HeartbeatResponse {
  // Commands the device should execute
  repeated DeviceCommand commands = 1;

  // Configuration updates
  DeviceConfig config = 2;

  // Next heartbeat interval in seconds
  int32 next_heartbeat_seconds = 3;
}

// ReportStatusRequest is sent to report device status
message ReportStatusRequest {
  string device_id = 1;
  fleetd.common.v1.DeviceStatus status = 2;
  string status_message = 3;
  fleetd.common.v1.SystemMetrics metrics = 4;
  map<string, string> attributes = 5;
  google.protobuf.Timestamp timestamp = 6;
}

// ReportStatusResponse acknowledges the status report
message ReportStatusResponse {
  bool acknowledged = 1;
}

// DeregisterRequest is sent to remove a device
message DeregisterRequest {
  string device_id = 1;
  string reason = 2;
}

// DeregisterResponse confirms deregistration
message DeregisterResponse {
  bool success = 1;
  string message = 2;
}

// DeviceConfig contains device configuration
message DeviceConfig {
  int32 heartbeat_interval_seconds = 1;
  int32 metrics_interval_seconds = 2;
  int32 log_level = 3;
  bool auto_update_enabled = 4;
  map<string, string> settings = 5;
}

// DeviceCommand represents a command to execute
message DeviceCommand {
  string id = 1;
  string type = 2;  // reboot, update, collect_logs, etc.
  map<string, string> parameters = 3;
  google.protobuf.Timestamp expires_at = 4;
}