// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file fleetd/v1/artifact.proto (package fleetd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  CancelDeploymentRequest,
  CancelDeploymentResponse,
  CreateApplicationRequest,
  CreateApplicationResponse,
  CreateDeploymentRequest,
  CreateDeploymentResponse,
  DeleteApplicationRequest,
  DeleteApplicationResponse,
  DeleteArtifactRequest,
  DeleteArtifactResponse,
  GetApplicationRequest,
  GetApplicationResponse,
  GetArtifactRequest,
  GetArtifactResponse,
  GetDeploymentMetricsRequest,
  GetDeploymentMetricsResponse,
  GetDeploymentRequest,
  GetDeploymentResponse,
  GetDownloadURLRequest,
  GetDownloadURLResponse,
  ListApplicationsRequest,
  ListApplicationsResponse,
  ListArtifactsRequest,
  ListArtifactsResponse,
  ListDeploymentsRequest,
  ListDeploymentsResponse,
  UploadArtifactRequest,
  UploadArtifactResponse,
} from './artifact_pb.js'
import { MethodKind } from '@bufbuild/protobuf'

/**
 * ArtifactService manages software artifacts for deployment
 *
 * @generated from service fleetd.v1.ArtifactService
 */
export const ArtifactService = {
  typeName: 'fleetd.v1.ArtifactService',
  methods: {
    /**
     * Upload a new artifact version
     *
     * @generated from rpc fleetd.v1.ArtifactService.UploadArtifact
     */
    uploadArtifact: {
      name: 'UploadArtifact',
      I: UploadArtifactRequest,
      O: UploadArtifactResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Get artifact metadata
     *
     * @generated from rpc fleetd.v1.ArtifactService.GetArtifact
     */
    getArtifact: {
      name: 'GetArtifact',
      I: GetArtifactRequest,
      O: GetArtifactResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List artifact versions
     *
     * @generated from rpc fleetd.v1.ArtifactService.ListArtifacts
     */
    listArtifacts: {
      name: 'ListArtifacts',
      I: ListArtifactsRequest,
      O: ListArtifactsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an artifact version
     *
     * @generated from rpc fleetd.v1.ArtifactService.DeleteArtifact
     */
    deleteArtifact: {
      name: 'DeleteArtifact',
      I: DeleteArtifactRequest,
      O: DeleteArtifactResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Generate signed download URL for device
     *
     * @generated from rpc fleetd.v1.ArtifactService.GetDownloadURL
     */
    getDownloadURL: {
      name: 'GetDownloadURL',
      I: GetDownloadURLRequest,
      O: GetDownloadURLResponse,
      kind: MethodKind.Unary,
    },
  },
} as const

/**
 * ApplicationService manages application definitions
 *
 * @generated from service fleetd.v1.ApplicationService
 */
export const ApplicationService = {
  typeName: 'fleetd.v1.ApplicationService',
  methods: {
    /**
     * Create or update application definition
     *
     * @generated from rpc fleetd.v1.ApplicationService.CreateApplication
     */
    createApplication: {
      name: 'CreateApplication',
      I: CreateApplicationRequest,
      O: CreateApplicationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get application details
     *
     * @generated from rpc fleetd.v1.ApplicationService.GetApplication
     */
    getApplication: {
      name: 'GetApplication',
      I: GetApplicationRequest,
      O: GetApplicationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List applications
     *
     * @generated from rpc fleetd.v1.ApplicationService.ListApplications
     */
    listApplications: {
      name: 'ListApplications',
      I: ListApplicationsRequest,
      O: ListApplicationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete application
     *
     * @generated from rpc fleetd.v1.ApplicationService.DeleteApplication
     */
    deleteApplication: {
      name: 'DeleteApplication',
      I: DeleteApplicationRequest,
      O: DeleteApplicationResponse,
      kind: MethodKind.Unary,
    },
  },
} as const

/**
 * DeploymentService manages software deployments to devices
 *
 * @generated from service fleetd.v1.DeploymentService
 */
export const DeploymentService = {
  typeName: 'fleetd.v1.DeploymentService',
  methods: {
    /**
     * Create a new deployment
     *
     * @generated from rpc fleetd.v1.DeploymentService.CreateDeployment
     */
    createDeployment: {
      name: 'CreateDeployment',
      I: CreateDeploymentRequest,
      O: CreateDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get deployment status
     *
     * @generated from rpc fleetd.v1.DeploymentService.GetDeployment
     */
    getDeployment: {
      name: 'GetDeployment',
      I: GetDeploymentRequest,
      O: GetDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List deployments
     *
     * @generated from rpc fleetd.v1.DeploymentService.ListDeployments
     */
    listDeployments: {
      name: 'ListDeployments',
      I: ListDeploymentsRequest,
      O: ListDeploymentsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Cancel or rollback deployment
     *
     * @generated from rpc fleetd.v1.DeploymentService.CancelDeployment
     */
    cancelDeployment: {
      name: 'CancelDeployment',
      I: CancelDeploymentRequest,
      O: CancelDeploymentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get deployment metrics
     *
     * @generated from rpc fleetd.v1.DeploymentService.GetDeploymentMetrics
     */
    getDeploymentMetrics: {
      name: 'GetDeploymentMetrics',
      I: GetDeploymentMetricsRequest,
      O: GetDeploymentMetricsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const
