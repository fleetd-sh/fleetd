// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file fleetd/v1/cluster.proto (package fleetd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import {
  ApplyWorkloadRequest,
  ApplyWorkloadResponse,
  CreateClusterRequest,
  CreateClusterResponse,
  GetClusterRequest,
  GetClusterResponse,
  GetNodeStatusRequest,
  GetNodeStatusResponse,
  JoinClusterRequest,
  JoinClusterResponse,
  ListClustersRequest,
  ListClustersResponse,
  RemoveNodeRequest,
  RemoveNodeResponse,
} from "./cluster_pb.js";

/**
 * ClusterService manages k3s clusters on linux-based devices
 *
 * @generated from service fleetd.v1.ClusterService
 */
export const ClusterService = {
  typeName: "fleetd.v1.ClusterService",
  methods: {
    /**
     * Create a new k3s cluster
     *
     * @generated from rpc fleetd.v1.ClusterService.CreateCluster
     */
    createCluster: {
      name: "CreateCluster",
      I: CreateClusterRequest,
      O: CreateClusterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Join a device to an existing cluster
     *
     * @generated from rpc fleetd.v1.ClusterService.JoinCluster
     */
    joinCluster: {
      name: "JoinCluster",
      I: JoinClusterRequest,
      O: JoinClusterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get cluster information
     *
     * @generated from rpc fleetd.v1.ClusterService.GetCluster
     */
    getCluster: {
      name: "GetCluster",
      I: GetClusterRequest,
      O: GetClusterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List all clusters
     *
     * @generated from rpc fleetd.v1.ClusterService.ListClusters
     */
    listClusters: {
      name: "ListClusters",
      I: ListClustersRequest,
      O: ListClustersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Apply a workload to a cluster
     *
     * @generated from rpc fleetd.v1.ClusterService.ApplyWorkload
     */
    applyWorkload: {
      name: "ApplyWorkload",
      I: ApplyWorkloadRequest,
      O: ApplyWorkloadResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get cluster node status
     *
     * @generated from rpc fleetd.v1.ClusterService.GetNodeStatus
     */
    getNodeStatus: {
      name: "GetNodeStatus",
      I: GetNodeStatusRequest,
      O: GetNodeStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Remove a node from cluster
     *
     * @generated from rpc fleetd.v1.ClusterService.RemoveNode
     */
    removeNode: {
      name: "RemoveNode",
      I: RemoveNodeRequest,
      O: RemoveNodeResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
