// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file public/v1/organization.proto (package public.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  CreateTeamRequest,
  CreateTeamResponse,
  DeleteTeamRequest,
  GetBillingInfoResponse,
  GetOrganizationRequest,
  GetOrganizationResponse,
  GetUsageRequest,
  GetUsageResponse,
  InviteMemberRequest,
  InviteMemberResponse,
  ListMembersRequest,
  ListMembersResponse,
  ListTeamsRequest,
  ListTeamsResponse,
  RemoveMemberRequest,
  UpdateMemberRoleRequest,
  UpdateMemberRoleResponse,
  UpdateOrganizationRequest,
  UpdateOrganizationResponse,
  UpdateTeamRequest,
  UpdateTeamResponse,
} from './organization_pb.js'
import { Empty, MethodKind } from '@bufbuild/protobuf'

/**
 * OrganizationService manages organizations and teams
 * Essential for multi-tenancy in cloud offering
 *
 * @generated from service public.v1.OrganizationService
 */
export const OrganizationService = {
  typeName: 'public.v1.OrganizationService',
  methods: {
    /**
     * Organization management
     *
     * @generated from rpc public.v1.OrganizationService.GetOrganization
     */
    getOrganization: {
      name: 'GetOrganization',
      I: GetOrganizationRequest,
      O: GetOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.UpdateOrganization
     */
    updateOrganization: {
      name: 'UpdateOrganization',
      I: UpdateOrganizationRequest,
      O: UpdateOrganizationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Team management
     *
     * @generated from rpc public.v1.OrganizationService.ListTeams
     */
    listTeams: {
      name: 'ListTeams',
      I: ListTeamsRequest,
      O: ListTeamsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.CreateTeam
     */
    createTeam: {
      name: 'CreateTeam',
      I: CreateTeamRequest,
      O: CreateTeamResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.UpdateTeam
     */
    updateTeam: {
      name: 'UpdateTeam',
      I: UpdateTeamRequest,
      O: UpdateTeamResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.DeleteTeam
     */
    deleteTeam: {
      name: 'DeleteTeam',
      I: DeleteTeamRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Member management
     *
     * @generated from rpc public.v1.OrganizationService.ListMembers
     */
    listMembers: {
      name: 'ListMembers',
      I: ListMembersRequest,
      O: ListMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.InviteMember
     */
    inviteMember: {
      name: 'InviteMember',
      I: InviteMemberRequest,
      O: InviteMemberResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.UpdateMemberRole
     */
    updateMemberRole: {
      name: 'UpdateMemberRole',
      I: UpdateMemberRoleRequest,
      O: UpdateMemberRoleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.RemoveMember
     */
    removeMember: {
      name: 'RemoveMember',
      I: RemoveMemberRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Billing (cloud offering)
     *
     * @generated from rpc public.v1.OrganizationService.GetBillingInfo
     */
    getBillingInfo: {
      name: 'GetBillingInfo',
      I: Empty,
      O: GetBillingInfoResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc public.v1.OrganizationService.GetUsage
     */
    getUsage: {
      name: 'GetUsage',
      I: GetUsageRequest,
      O: GetUsageResponse,
      kind: MethodKind.Unary,
    },
  },
} as const
