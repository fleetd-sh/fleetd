version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: fleetd-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fleetd}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-fleetd}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fleetd}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - fleetd-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Valkey for caching and pub/sub
  valkey:
    image: valkey/valkey:7-alpine
    container_name: fleetd-valkey
    restart: unless-stopped
    command: valkey-server --requirepass ${VALKEY_PASSWORD}
    volumes:
      - valkey_data:/data
    ports:
      - "${VALKEY_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "valkey-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - fleetd-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Platform API Service
  platform-api:
    image: ${DOCKER_REGISTRY:-ghcr.io}/fleetd-sh/platform-api:${VERSION:-latest}
    container_name: fleetd-platform-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: "postgres://${POSTGRES_USER:-fleetd}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fleetd}?sslmode=require"

      # Valkey Configuration
      VALKEY_URL: "redis://default:${VALKEY_PASSWORD}@valkey:6379/0"

      # Server Configuration
      SERVER_PORT: ${PLATFORM_API_PORT:-8080}
      SERVER_HOST: 0.0.0.0

      # TLS Configuration
      TLS_MODE: ${TLS_MODE:-auto}
      TLS_CERT_PATH: /certs/tls.crt
      TLS_KEY_PATH: /certs/tls.key
      TLS_AUTO_DOMAIN: ${TLS_DOMAIN}
      TLS_AUTO_EMAIL: ${TLS_EMAIL}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}

      # Service Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      TRACING_ENABLED: ${TRACING_ENABLED:-false}

      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}

      # Rate Limiting
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_RPS: ${RATE_LIMIT_RPS:-100}
    volumes:
      - ./certs:/certs:ro
      - ./config:/config:ro
    ports:
      - "${PLATFORM_API_PORT:-8080}:${PLATFORM_API_PORT:-8080}"
    networks:
      - fleetd-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${PLATFORM_API_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Device API Service
  device-api:
    image: ${DOCKER_REGISTRY:-ghcr.io}/fleetd-sh/device-api:${VERSION:-latest}
    container_name: fleetd-device-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
      platform-api:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: "postgres://${POSTGRES_USER:-fleetd}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-fleetd}?sslmode=require"

      # Valkey Configuration
      VALKEY_URL: "redis://default:${VALKEY_PASSWORD}@valkey:6379/0"

      # Server Configuration
      SERVER_PORT: ${DEVICE_API_PORT:-8081}
      SERVER_HOST: 0.0.0.0

      # mTLS Configuration for Device Authentication
      MTLS_ENABLED: ${MTLS_ENABLED:-true}
      MTLS_CA_PATH: /certs/ca.crt
      MTLS_CERT_PATH: /certs/device-api.crt
      MTLS_KEY_PATH: /certs/device-api.key

      # Platform API Connection
      PLATFORM_API_URL: http://platform-api:${PLATFORM_API_PORT:-8080}

      # Service Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      METRICS_ENABLED: ${METRICS_ENABLED:-true}

      # Device Configuration
      MAX_DEVICES_PER_FLEET: ${MAX_DEVICES_PER_FLEET:-10000}
      DEVICE_HEARTBEAT_INTERVAL: ${DEVICE_HEARTBEAT_INTERVAL:-60s}
      DEVICE_TIMEOUT: ${DEVICE_TIMEOUT:-5m}
    volumes:
      - ./certs:/certs:ro
      - ./artifacts:/artifacts
    ports:
      - "${DEVICE_API_PORT:-8081}:${DEVICE_API_PORT:-8081}"
    networks:
      - fleetd-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${DEVICE_API_PORT:-8081}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Web Studio UI (Optional)
  studio:
    image: ${DOCKER_REGISTRY:-ghcr.io}/fleetd-sh/studio:${VERSION:-latest}
    container_name: fleetd-studio
    restart: unless-stopped
    depends_on:
      platform-api:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL:-https://api.fleet.yourdomain.com}
      NEXT_PUBLIC_DEVICE_API_URL: ${PUBLIC_DEVICE_API_URL:-https://devices.fleet.yourdomain.com}
    ports:
      - "${STUDIO_PORT:-3000}:3000"
    networks:
      - fleetd-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - studio

  # Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: fleetd-nginx
    restart: unless-stopped
    depends_on:
      - platform-api
      - device-api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - fleetd-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - proxy

  # Prometheus Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fleetd-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - fleetd-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fleetd-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - fleetd-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

networks:
  fleetd-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  valkey_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local