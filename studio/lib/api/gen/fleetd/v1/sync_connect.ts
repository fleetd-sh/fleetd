// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,keep_empty_files=false"
// @generated from file fleetd/v1/sync.proto (package fleetd.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetSyncConfigRequest, GetSyncConfigResponse, SyncCommand, SyncData, SyncLogsRequest, SyncLogsResponse, SyncMetricsRequest, SyncMetricsResponse } from "./sync_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * SyncService handles data synchronization between devices and server
 *
 * @generated from service fleetd.v1.SyncService
 */
export const SyncService = {
  typeName: "fleetd.v1.SyncService",
  methods: {
    /**
     * SyncMetrics uploads metrics from device to server
     *
     * @generated from rpc fleetd.v1.SyncService.SyncMetrics
     */
    syncMetrics: {
      name: "SyncMetrics",
      I: SyncMetricsRequest,
      O: SyncMetricsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SyncLogs uploads logs from device to server
     *
     * @generated from rpc fleetd.v1.SyncService.SyncLogs
     */
    syncLogs: {
      name: "SyncLogs",
      I: SyncLogsRequest,
      O: SyncLogsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSyncConfig gets updated sync configuration for device
     *
     * @generated from rpc fleetd.v1.SyncService.GetSyncConfig
     */
    getSyncConfig: {
      name: "GetSyncConfig",
      I: GetSyncConfigRequest,
      O: GetSyncConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StreamSync establishes bidirectional sync stream
     *
     * @generated from rpc fleetd.v1.SyncService.StreamSync
     */
    streamSync: {
      name: "StreamSync",
      I: SyncData,
      O: SyncCommand,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

