name: Deploy to Fleet

on:
  push:
    branches: [main]
    paths:
      - 'cmd/agent/**'
      - 'internal/agent/**'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'binary'
        type: choice
        options:
          - binary
          - script
          - container
          - config
      target_environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      target_selector:
        description: 'Target selector (device IDs, group IDs, or "all")'
        required: false
        default: 'staging-group'
      strategy:
        description: 'Deployment strategy'
        required: false
        default: 'canary'
        type: choice
        options:
          - immediate
          - rolling
          - canary
          - blue-green

env:
  REGISTRY: ghcr.io

jobs:
  # Example 1: Binary deployment
  deploy-binary:
    if: github.event_name == 'push' || inputs.deployment_type == 'binary'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary
        run: |
          VERSION="${GITHUB_SHA::7}"
          go build -o fleetd-agent \
            -ldflags "-X main.Version=$VERSION -X main.Commit=$GITHUB_SHA" \
            ./cmd/agent

      - name: Calculate checksum
        id: checksum
        run: |
          SHA256=$(sha256sum fleetd-agent | awk '{print $1}')
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

      - name: Upload artifact to GitHub Release
        uses: actions/upload-artifact@v4
        with:
          name: fleetd-agent-${{ github.sha }}
          path: fleetd-agent

      # In production, you'd upload to S3/GCS/CDN
      # For demo, using GitHub artifacts URL
      - name: Deploy binary to fleet
        uses: ./  # Use the local action.yml
        with:
          api_url: ${{ secrets.FLEETD_API_URL }}
          api_key: ${{ secrets.FLEETD_API_KEY }}
          name: "Agent Update ${{ github.sha }}"
          description: "Automated deployment of fleetd agent from commit ${{ github.sha }}"
          type: binary
          artifact_url: "https://github.com/${{ github.repository }}/releases/download/latest/fleetd-agent"
          version: ${{ github.sha }}
          checksum: ${{ steps.checksum.outputs.sha256 }}
          target_groups: ${{ inputs.target_selector || 'staging-group' }}
          strategy: ${{ inputs.strategy || 'canary' }}
          environment: ${{ inputs.target_environment || 'staging' }}
          canary_size: 2
          batch_size: 10
          pause_seconds: 120
          auto_rollback: true
          failure_threshold: 0.1
          webhook_urls: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Example 2: Script deployment
  deploy-script:
    if: inputs.deployment_type == 'script'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy maintenance script
        uses: ./
        with:
          api_url: ${{ secrets.FLEETD_API_URL }}
          api_key: ${{ secrets.FLEETD_API_KEY }}
          name: "Maintenance Script"
          description: "Deploy system maintenance script"
          type: script
          script_content: |
            #!/bin/bash
            set -e

            echo "Running maintenance tasks..."

            # Update system packages
            apt-get update

            # Clean up old logs
            find /var/log -type f -name "*.log" -mtime +30 -delete

            # Report disk usage
            df -h

            # Restart monitoring agent
            systemctl restart fleetd-agent

            echo "Maintenance completed successfully"
          interpreter: /bin/bash
          target_labels: |
            {
              "match_labels": {
                "maintenance": "enabled",
                "environment": "${{ inputs.target_environment }}"
              }
            }
          strategy: rolling
          batch_size: 5
          pause_seconds: 60

  # Example 3: Container deployment
  deploy-container:
    if: inputs.deployment_type == 'container'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/agent:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/agent:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy container to fleet
        uses: ./
        with:
          api_url: ${{ secrets.FLEETD_API_URL }}
          api_key: ${{ secrets.FLEETD_API_KEY }}
          name: "Container Update"
          description: "Deploy updated agent container"
          type: container
          container_image: "${{ env.REGISTRY }}/${{ github.repository }}/agent:${{ github.sha }}"
          container_name: fleetd-agent
          target_filters: |
            [
              {
                "type": "FILTER_TYPE_CAPABILITY",
                "operator": "=",
                "values": ["docker"]
              },
              {
                "type": "FILTER_TYPE_OS",
                "operator": "in",
                "values": ["linux", "darwin"]
              }
            ]
          strategy: blue-green
          health_check_enabled: true
          health_check_timeout: 120
          auto_rollback: true

  # Example 4: Configuration deployment
  deploy-config:
    if: inputs.deployment_type == 'config'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy configuration update
        uses: ./
        with:
          api_url: ${{ secrets.FLEETD_API_URL }}
          api_key: ${{ secrets.FLEETD_API_KEY }}
          name: "Configuration Update"
          description: "Update agent configuration"
          type: config
          artifact_path: config/agent.yaml
          target_query: "SELECT id FROM devices WHERE last_seen > NOW() - INTERVAL '1 hour'"
          strategy: immediate
          health_check_enabled: false

  # Rollback job - triggered on failure
  rollback:
    if: failure()
    needs: [deploy-binary, deploy-container]
    runs-on: ubuntu-latest

    steps:
      - name: Get last successful deployment
        id: last_deployment
        run: |
          # Query API for last successful deployment
          LAST_ID=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.FLEETD_API_KEY }}" \
            "${{ secrets.FLEETD_API_URL }}/api/v1/deployments?state=COMPLETED&limit=1" \
            | jq -r '.deployments[0].id')
          echo "last_deployment_id=$LAST_ID" >> $GITHUB_OUTPUT

      - name: Trigger rollback
        if: steps.last_deployment.outputs.last_deployment_id != ''
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.FLEETD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "target_deployment_id": "${{ steps.last_deployment.outputs.last_deployment_id }}",
              "reason": "Automatic rollback due to deployment failure",
              "force": true
            }' \
            "${{ secrets.FLEETD_API_URL }}/api/v1/deployments/${{ github.sha }}/rollback"

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Deployment failed and was rolled back",
              attachments: [{
                color: 'danger',
                fields: [
                  { title: 'Repository', value: '${{ github.repository }}', short: true },
                  { title: 'Commit', value: '${{ github.sha }}', short: true },
                  { title: 'Environment', value: '${{ inputs.target_environment }}', short: true },
                  { title: 'Triggered by', value: '${{ github.actor }}', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Monitoring job - runs after deployment
  monitor:
    if: success()
    needs: [deploy-binary, deploy-container]
    runs-on: ubuntu-latest

    steps:
      - name: Monitor deployment health
        run: |
          echo "Monitoring deployment health for 5 minutes..."

          for i in {1..30}; do
            # Query metrics API
            METRICS=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.FLEETD_API_KEY }}" \
              "${{ secrets.FLEETD_API_URL }}/api/v1/telemetry?deployment_id=${{ github.sha }}")

            ERROR_RATE=$(echo "$METRICS" | jq -r '.error_rate')

            if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
              echo "High error rate detected: $ERROR_RATE"
              exit 1
            fi

            echo "Health check $i/30: Error rate = $ERROR_RATE"
            sleep 10
          done

      - name: Create deployment report
        if: always()
        run: |
          # Generate deployment report
          cat > deployment-report.md <<EOF
          # Deployment Report

          **Deployment ID:** ${{ github.sha }}
          **Date:** $(date)
          **Environment:** ${{ inputs.target_environment }}
          **Strategy:** ${{ inputs.strategy }}

          ## Metrics
          - Devices targeted: TBD
          - Devices succeeded: TBD
          - Devices failed: TBD
          - Average deployment time: TBD

          ## Health Status
          - Error rate: Normal
          - Rollback triggered: No

          EOF

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.sha }}
          path: deployment-report.md