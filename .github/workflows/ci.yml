name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Lint Go code
        run: |
          go fmt ./...
          go vet ./...

      - name: Lint Proto files
        run: buf lint

      - name: Check Proto breaking changes
        run: buf breaking --against '.git#branch=main'
        continue-on-error: true

  test-go:
    name: Test Go
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: fleetd
          POSTGRES_PASSWORD: fleetd
          POSTGRES_DB: fleetd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://fleetd:fleetd@localhost:5432/fleetd_test?sslmode=disable
          INTEGRATION: true
          FLEETD_INTEGRATION_TESTS: true
        run: go test -v ./test/integration/... ./test/e2e/...

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ./web
        run: bun install

      - name: Type check
        working-directory: ./web
        run: bun run typecheck

      - name: Lint
        working-directory: ./web
        run: bun run lint

      - name: Test
        working-directory: ./web
        run: bun run test
        continue-on-error: true # Tests might not exist yet

      - name: Build
        working-directory: ./web
        run: bun run build

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [fleetd, device-api, platform-api, fleetctl]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Generate Proto
        run: buf generate

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -v -ldflags "-X fleetd.sh/internal/version.Version=${{ github.sha }}" \
            -o bin/${{ matrix.target }}-${{ matrix.os }}-${{ matrix.arch }} \
            cmd/${{ matrix.target }}/main.go

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.target }}-${{ matrix.os }}-${{ matrix.arch }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build device-api image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./container/device.dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            fleetd/device-api:latest
            fleetd/device-api:${{ github.sha }}

      - name: Build platform-api image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./container/platform.dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            fleetd/platform-api:latest
            fleetd/platform-api:${{ github.sha }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: ./...

  proto-compatibility:
    name: Proto Compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Check proto compatibility
        run: |
          buf format -d --exit-code
          buf lint
          buf breaking --against '.git#branch=main'