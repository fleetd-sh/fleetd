name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Generate Proto
        run: buf generate

      - name: Setup Cosign
        uses: sigstore/cosign-installer@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}

      - name: Sign container images
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/device-api:latest
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/platform-api:latest
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/fleetd:latest
        continue-on-error: true

  publish-docker-compose:
    name: Publish Docker Compose Files
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Create release archive
        run: |
          mkdir -p fleetd-docker-${{ github.ref_name }}
          cp -r docker/* fleetd-docker-${{ github.ref_name }}/
          tar czf fleetd-docker-${{ github.ref_name }}.tar.gz fleetd-docker-${{ github.ref_name }}

      - name: Upload to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: fleetd-docker-${{ github.ref_name }}.tar.gz
          asset_name: fleetd-docker-${{ github.ref_name }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Update Homebrew tap
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: fleetctl
          formula-path: Formula/fleetctl.rb
          homebrew-tap: fleetd-sh/homebrew-fleetd
          base-branch: main
          download-url: https://github.com/fleetd-sh/fleetd/releases/download/${{ github.ref_name }}/fleetctl_${{ github.ref_name }}_darwin_amd64.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by release workflow
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
        continue-on-error: true

  create-packages:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - format: deb
            arch: amd64
          - format: deb
            arch: arm64
          - format: rpm
            arch: x86_64
          - format: rpm
            arch: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Download release assets
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: ${{ github.ref_name }}
          file: fleetctl_.*_linux_.*
          regex: true

      - name: Create package
        uses: jiro4989/build-deb-action@v3
        if: matrix.format == 'deb'
        with:
          package: fleetctl
          package_root: .
          maintainer: Fleetd Maintainers
          version: ${{ github.ref_name }}
          arch: ${{ matrix.arch }}
          desc: "Fleet management CLI tool"

      - name: Create RPM package
        if: matrix.format == 'rpm'
        run: |
          # RPM creation would go here
          echo "RPM package creation not implemented yet"
        continue-on-error: true

      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: packages-${{ matrix.format }}-${{ matrix.arch }}
          path: |
            *.deb
            *.rpm

  announce:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [release, publish-docker-compose, update-homebrew]
    steps:
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "New Fleetd Release: ${{ github.ref_name }}"
          description: |
            A new version of Fleetd has been released!

            **Version**: ${{ github.ref_name }}
            **Release Notes**: https://github.com/fleetd-sh/fleetd/releases/tag/${{ github.ref_name }}

            **Installation**:
            ```bash
            # Homebrew
            brew install fleetd-sh/fleetd/fleetctl

            # Docker
            docker pull ghcr.io/fleetd-sh/fleetd:${{ github.ref_name }}

            # Binary
            curl -L https://github.com/fleetd-sh/fleetd/releases/download/${{ github.ref_name }}/fleetctl_linux_amd64 -o fleetctl
            ```
          color: 0x00ff00
        continue-on-error: true