// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/artifact.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtifactServiceName is the fully-qualified name of the ArtifactService service.
	ArtifactServiceName = "fleetd.v1.ArtifactService"
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "fleetd.v1.ApplicationService"
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "fleetd.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtifactServiceUploadArtifactProcedure is the fully-qualified name of the ArtifactService's
	// UploadArtifact RPC.
	ArtifactServiceUploadArtifactProcedure = "/fleetd.v1.ArtifactService/UploadArtifact"
	// ArtifactServiceGetArtifactProcedure is the fully-qualified name of the ArtifactService's
	// GetArtifact RPC.
	ArtifactServiceGetArtifactProcedure = "/fleetd.v1.ArtifactService/GetArtifact"
	// ArtifactServiceListArtifactsProcedure is the fully-qualified name of the ArtifactService's
	// ListArtifacts RPC.
	ArtifactServiceListArtifactsProcedure = "/fleetd.v1.ArtifactService/ListArtifacts"
	// ArtifactServiceDeleteArtifactProcedure is the fully-qualified name of the ArtifactService's
	// DeleteArtifact RPC.
	ArtifactServiceDeleteArtifactProcedure = "/fleetd.v1.ArtifactService/DeleteArtifact"
	// ArtifactServiceGetDownloadURLProcedure is the fully-qualified name of the ArtifactService's
	// GetDownloadURL RPC.
	ArtifactServiceGetDownloadURLProcedure = "/fleetd.v1.ArtifactService/GetDownloadURL"
	// ApplicationServiceCreateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's CreateApplication RPC.
	ApplicationServiceCreateApplicationProcedure = "/fleetd.v1.ApplicationService/CreateApplication"
	// ApplicationServiceGetApplicationProcedure is the fully-qualified name of the ApplicationService's
	// GetApplication RPC.
	ApplicationServiceGetApplicationProcedure = "/fleetd.v1.ApplicationService/GetApplication"
	// ApplicationServiceListApplicationsProcedure is the fully-qualified name of the
	// ApplicationService's ListApplications RPC.
	ApplicationServiceListApplicationsProcedure = "/fleetd.v1.ApplicationService/ListApplications"
	// ApplicationServiceDeleteApplicationProcedure is the fully-qualified name of the
	// ApplicationService's DeleteApplication RPC.
	ApplicationServiceDeleteApplicationProcedure = "/fleetd.v1.ApplicationService/DeleteApplication"
	// DeploymentServiceCreateDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CreateDeployment RPC.
	DeploymentServiceCreateDeploymentProcedure = "/fleetd.v1.DeploymentService/CreateDeployment"
	// DeploymentServiceGetDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// GetDeployment RPC.
	DeploymentServiceGetDeploymentProcedure = "/fleetd.v1.DeploymentService/GetDeployment"
	// DeploymentServiceListDeploymentsProcedure is the fully-qualified name of the DeploymentService's
	// ListDeployments RPC.
	DeploymentServiceListDeploymentsProcedure = "/fleetd.v1.DeploymentService/ListDeployments"
	// DeploymentServiceCancelDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// CancelDeployment RPC.
	DeploymentServiceCancelDeploymentProcedure = "/fleetd.v1.DeploymentService/CancelDeployment"
	// DeploymentServiceGetDeploymentMetricsProcedure is the fully-qualified name of the
	// DeploymentService's GetDeploymentMetrics RPC.
	DeploymentServiceGetDeploymentMetricsProcedure = "/fleetd.v1.DeploymentService/GetDeploymentMetrics"
)

// ArtifactServiceClient is a client for the fleetd.v1.ArtifactService service.
type ArtifactServiceClient interface {
	// Upload a new artifact version
	UploadArtifact(context.Context) *connect.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
	// Get artifact metadata
	GetArtifact(context.Context, *connect.Request[v1.GetArtifactRequest]) (*connect.Response[v1.GetArtifactResponse], error)
	// List artifact versions
	ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error)
	// Delete an artifact version
	DeleteArtifact(context.Context, *connect.Request[v1.DeleteArtifactRequest]) (*connect.Response[v1.DeleteArtifactResponse], error)
	// Generate signed download URL for device
	GetDownloadURL(context.Context, *connect.Request[v1.GetDownloadURLRequest]) (*connect.Response[v1.GetDownloadURLResponse], error)
}

// NewArtifactServiceClient constructs a client for the fleetd.v1.ArtifactService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtifactServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtifactServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	artifactServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("ArtifactService").Methods()
	return &artifactServiceClient{
		uploadArtifact: connect.NewClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse](
			httpClient,
			baseURL+ArtifactServiceUploadArtifactProcedure,
			connect.WithSchema(artifactServiceMethods.ByName("UploadArtifact")),
			connect.WithClientOptions(opts...),
		),
		getArtifact: connect.NewClient[v1.GetArtifactRequest, v1.GetArtifactResponse](
			httpClient,
			baseURL+ArtifactServiceGetArtifactProcedure,
			connect.WithSchema(artifactServiceMethods.ByName("GetArtifact")),
			connect.WithClientOptions(opts...),
		),
		listArtifacts: connect.NewClient[v1.ListArtifactsRequest, v1.ListArtifactsResponse](
			httpClient,
			baseURL+ArtifactServiceListArtifactsProcedure,
			connect.WithSchema(artifactServiceMethods.ByName("ListArtifacts")),
			connect.WithClientOptions(opts...),
		),
		deleteArtifact: connect.NewClient[v1.DeleteArtifactRequest, v1.DeleteArtifactResponse](
			httpClient,
			baseURL+ArtifactServiceDeleteArtifactProcedure,
			connect.WithSchema(artifactServiceMethods.ByName("DeleteArtifact")),
			connect.WithClientOptions(opts...),
		),
		getDownloadURL: connect.NewClient[v1.GetDownloadURLRequest, v1.GetDownloadURLResponse](
			httpClient,
			baseURL+ArtifactServiceGetDownloadURLProcedure,
			connect.WithSchema(artifactServiceMethods.ByName("GetDownloadURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// artifactServiceClient implements ArtifactServiceClient.
type artifactServiceClient struct {
	uploadArtifact *connect.Client[v1.UploadArtifactRequest, v1.UploadArtifactResponse]
	getArtifact    *connect.Client[v1.GetArtifactRequest, v1.GetArtifactResponse]
	listArtifacts  *connect.Client[v1.ListArtifactsRequest, v1.ListArtifactsResponse]
	deleteArtifact *connect.Client[v1.DeleteArtifactRequest, v1.DeleteArtifactResponse]
	getDownloadURL *connect.Client[v1.GetDownloadURLRequest, v1.GetDownloadURLResponse]
}

// UploadArtifact calls fleetd.v1.ArtifactService.UploadArtifact.
func (c *artifactServiceClient) UploadArtifact(ctx context.Context) *connect.ClientStreamForClient[v1.UploadArtifactRequest, v1.UploadArtifactResponse] {
	return c.uploadArtifact.CallClientStream(ctx)
}

// GetArtifact calls fleetd.v1.ArtifactService.GetArtifact.
func (c *artifactServiceClient) GetArtifact(ctx context.Context, req *connect.Request[v1.GetArtifactRequest]) (*connect.Response[v1.GetArtifactResponse], error) {
	return c.getArtifact.CallUnary(ctx, req)
}

// ListArtifacts calls fleetd.v1.ArtifactService.ListArtifacts.
func (c *artifactServiceClient) ListArtifacts(ctx context.Context, req *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error) {
	return c.listArtifacts.CallUnary(ctx, req)
}

// DeleteArtifact calls fleetd.v1.ArtifactService.DeleteArtifact.
func (c *artifactServiceClient) DeleteArtifact(ctx context.Context, req *connect.Request[v1.DeleteArtifactRequest]) (*connect.Response[v1.DeleteArtifactResponse], error) {
	return c.deleteArtifact.CallUnary(ctx, req)
}

// GetDownloadURL calls fleetd.v1.ArtifactService.GetDownloadURL.
func (c *artifactServiceClient) GetDownloadURL(ctx context.Context, req *connect.Request[v1.GetDownloadURLRequest]) (*connect.Response[v1.GetDownloadURLResponse], error) {
	return c.getDownloadURL.CallUnary(ctx, req)
}

// ArtifactServiceHandler is an implementation of the fleetd.v1.ArtifactService service.
type ArtifactServiceHandler interface {
	// Upload a new artifact version
	UploadArtifact(context.Context, *connect.ClientStream[v1.UploadArtifactRequest]) (*connect.Response[v1.UploadArtifactResponse], error)
	// Get artifact metadata
	GetArtifact(context.Context, *connect.Request[v1.GetArtifactRequest]) (*connect.Response[v1.GetArtifactResponse], error)
	// List artifact versions
	ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error)
	// Delete an artifact version
	DeleteArtifact(context.Context, *connect.Request[v1.DeleteArtifactRequest]) (*connect.Response[v1.DeleteArtifactResponse], error)
	// Generate signed download URL for device
	GetDownloadURL(context.Context, *connect.Request[v1.GetDownloadURLRequest]) (*connect.Response[v1.GetDownloadURLResponse], error)
}

// NewArtifactServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtifactServiceHandler(svc ArtifactServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artifactServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("ArtifactService").Methods()
	artifactServiceUploadArtifactHandler := connect.NewClientStreamHandler(
		ArtifactServiceUploadArtifactProcedure,
		svc.UploadArtifact,
		connect.WithSchema(artifactServiceMethods.ByName("UploadArtifact")),
		connect.WithHandlerOptions(opts...),
	)
	artifactServiceGetArtifactHandler := connect.NewUnaryHandler(
		ArtifactServiceGetArtifactProcedure,
		svc.GetArtifact,
		connect.WithSchema(artifactServiceMethods.ByName("GetArtifact")),
		connect.WithHandlerOptions(opts...),
	)
	artifactServiceListArtifactsHandler := connect.NewUnaryHandler(
		ArtifactServiceListArtifactsProcedure,
		svc.ListArtifacts,
		connect.WithSchema(artifactServiceMethods.ByName("ListArtifacts")),
		connect.WithHandlerOptions(opts...),
	)
	artifactServiceDeleteArtifactHandler := connect.NewUnaryHandler(
		ArtifactServiceDeleteArtifactProcedure,
		svc.DeleteArtifact,
		connect.WithSchema(artifactServiceMethods.ByName("DeleteArtifact")),
		connect.WithHandlerOptions(opts...),
	)
	artifactServiceGetDownloadURLHandler := connect.NewUnaryHandler(
		ArtifactServiceGetDownloadURLProcedure,
		svc.GetDownloadURL,
		connect.WithSchema(artifactServiceMethods.ByName("GetDownloadURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.ArtifactService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtifactServiceUploadArtifactProcedure:
			artifactServiceUploadArtifactHandler.ServeHTTP(w, r)
		case ArtifactServiceGetArtifactProcedure:
			artifactServiceGetArtifactHandler.ServeHTTP(w, r)
		case ArtifactServiceListArtifactsProcedure:
			artifactServiceListArtifactsHandler.ServeHTTP(w, r)
		case ArtifactServiceDeleteArtifactProcedure:
			artifactServiceDeleteArtifactHandler.ServeHTTP(w, r)
		case ArtifactServiceGetDownloadURLProcedure:
			artifactServiceGetDownloadURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtifactServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtifactServiceHandler struct{}

func (UnimplementedArtifactServiceHandler) UploadArtifact(context.Context, *connect.ClientStream[v1.UploadArtifactRequest]) (*connect.Response[v1.UploadArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ArtifactService.UploadArtifact is not implemented"))
}

func (UnimplementedArtifactServiceHandler) GetArtifact(context.Context, *connect.Request[v1.GetArtifactRequest]) (*connect.Response[v1.GetArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ArtifactService.GetArtifact is not implemented"))
}

func (UnimplementedArtifactServiceHandler) ListArtifacts(context.Context, *connect.Request[v1.ListArtifactsRequest]) (*connect.Response[v1.ListArtifactsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ArtifactService.ListArtifacts is not implemented"))
}

func (UnimplementedArtifactServiceHandler) DeleteArtifact(context.Context, *connect.Request[v1.DeleteArtifactRequest]) (*connect.Response[v1.DeleteArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ArtifactService.DeleteArtifact is not implemented"))
}

func (UnimplementedArtifactServiceHandler) GetDownloadURL(context.Context, *connect.Request[v1.GetDownloadURLRequest]) (*connect.Response[v1.GetDownloadURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ArtifactService.GetDownloadURL is not implemented"))
}

// ApplicationServiceClient is a client for the fleetd.v1.ApplicationService service.
type ApplicationServiceClient interface {
	// Create or update application definition
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	// Get application details
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	// List applications
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	// Delete application
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
}

// NewApplicationServiceClient constructs a client for the fleetd.v1.ApplicationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	applicationServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("ApplicationService").Methods()
	return &applicationServiceClient{
		createApplication: connect.NewClient[v1.CreateApplicationRequest, v1.CreateApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceCreateApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("CreateApplication")),
			connect.WithClientOptions(opts...),
		),
		getApplication: connect.NewClient[v1.GetApplicationRequest, v1.GetApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceGetApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetApplication")),
			connect.WithClientOptions(opts...),
		),
		listApplications: connect.NewClient[v1.ListApplicationsRequest, v1.ListApplicationsResponse](
			httpClient,
			baseURL+ApplicationServiceListApplicationsProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListApplications")),
			connect.WithClientOptions(opts...),
		),
		deleteApplication: connect.NewClient[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse](
			httpClient,
			baseURL+ApplicationServiceDeleteApplicationProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("DeleteApplication")),
			connect.WithClientOptions(opts...),
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	createApplication *connect.Client[v1.CreateApplicationRequest, v1.CreateApplicationResponse]
	getApplication    *connect.Client[v1.GetApplicationRequest, v1.GetApplicationResponse]
	listApplications  *connect.Client[v1.ListApplicationsRequest, v1.ListApplicationsResponse]
	deleteApplication *connect.Client[v1.DeleteApplicationRequest, v1.DeleteApplicationResponse]
}

// CreateApplication calls fleetd.v1.ApplicationService.CreateApplication.
func (c *applicationServiceClient) CreateApplication(ctx context.Context, req *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls fleetd.v1.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// ListApplications calls fleetd.v1.ApplicationService.ListApplications.
func (c *applicationServiceClient) ListApplications(ctx context.Context, req *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return c.listApplications.CallUnary(ctx, req)
}

// DeleteApplication calls fleetd.v1.ApplicationService.DeleteApplication.
func (c *applicationServiceClient) DeleteApplication(ctx context.Context, req *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the fleetd.v1.ApplicationService service.
type ApplicationServiceHandler interface {
	// Create or update application definition
	CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error)
	// Get application details
	GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error)
	// List applications
	ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error)
	// Delete application
	DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	applicationServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("ApplicationService").Methods()
	applicationServiceCreateApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceCreateApplicationProcedure,
		svc.CreateApplication,
		connect.WithSchema(applicationServiceMethods.ByName("CreateApplication")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceGetApplicationProcedure,
		svc.GetApplication,
		connect.WithSchema(applicationServiceMethods.ByName("GetApplication")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListApplicationsHandler := connect.NewUnaryHandler(
		ApplicationServiceListApplicationsProcedure,
		svc.ListApplications,
		connect.WithSchema(applicationServiceMethods.ByName("ListApplications")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDeleteApplicationHandler := connect.NewUnaryHandler(
		ApplicationServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		connect.WithSchema(applicationServiceMethods.ByName("DeleteApplication")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.ApplicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationServiceCreateApplicationProcedure:
			applicationServiceCreateApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceGetApplicationProcedure:
			applicationServiceGetApplicationHandler.ServeHTTP(w, r)
		case ApplicationServiceListApplicationsProcedure:
			applicationServiceListApplicationsHandler.ServeHTTP(w, r)
		case ApplicationServiceDeleteApplicationProcedure:
			applicationServiceDeleteApplicationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) CreateApplication(context.Context, *connect.Request[v1.CreateApplicationRequest]) (*connect.Response[v1.CreateApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ApplicationService.CreateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *connect.Request[v1.GetApplicationRequest]) (*connect.Response[v1.GetApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListApplications(context.Context, *connect.Request[v1.ListApplicationsRequest]) (*connect.Response[v1.ListApplicationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ApplicationService.ListApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplication(context.Context, *connect.Request[v1.DeleteApplicationRequest]) (*connect.Response[v1.DeleteApplicationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ApplicationService.DeleteApplication is not implemented"))
}

// DeploymentServiceClient is a client for the fleetd.v1.DeploymentService service.
type DeploymentServiceClient interface {
	// Create a new deployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get deployment status
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// List deployments
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	// Cancel or rollback deployment
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	// Get deployment metrics
	GetDeploymentMetrics(context.Context, *connect.Request[v1.GetDeploymentMetricsRequest]) (*connect.Response[v1.GetDeploymentMetricsResponse], error)
}

// NewDeploymentServiceClient constructs a client for the fleetd.v1.DeploymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deploymentServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("DeploymentService").Methods()
	return &deploymentServiceClient{
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCreateDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
			connect.WithClientOptions(opts...),
		),
		listDeployments: connect.NewClient[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentsProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("ListDeployments")),
			connect.WithClientOptions(opts...),
		),
		cancelDeployment: connect.NewClient[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceCancelDeploymentProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("CancelDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentMetrics: connect.NewClient[v1.GetDeploymentMetricsRequest, v1.GetDeploymentMetricsResponse](
			httpClient,
			baseURL+DeploymentServiceGetDeploymentMetricsProcedure,
			connect.WithSchema(deploymentServiceMethods.ByName("GetDeploymentMetrics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	createDeployment     *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment        *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	listDeployments      *connect.Client[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse]
	cancelDeployment     *connect.Client[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse]
	getDeploymentMetrics *connect.Client[v1.GetDeploymentMetricsRequest, v1.GetDeploymentMetricsResponse]
}

// CreateDeployment calls fleetd.v1.DeploymentService.CreateDeployment.
func (c *deploymentServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls fleetd.v1.DeploymentService.GetDeployment.
func (c *deploymentServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// ListDeployments calls fleetd.v1.DeploymentService.ListDeployments.
func (c *deploymentServiceClient) ListDeployments(ctx context.Context, req *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return c.listDeployments.CallUnary(ctx, req)
}

// CancelDeployment calls fleetd.v1.DeploymentService.CancelDeployment.
func (c *deploymentServiceClient) CancelDeployment(ctx context.Context, req *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return c.cancelDeployment.CallUnary(ctx, req)
}

// GetDeploymentMetrics calls fleetd.v1.DeploymentService.GetDeploymentMetrics.
func (c *deploymentServiceClient) GetDeploymentMetrics(ctx context.Context, req *connect.Request[v1.GetDeploymentMetricsRequest]) (*connect.Response[v1.GetDeploymentMetricsResponse], error) {
	return c.getDeploymentMetrics.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the fleetd.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	// Create a new deployment
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	// Get deployment status
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	// List deployments
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	// Cancel or rollback deployment
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	// Get deployment metrics
	GetDeploymentMetrics(context.Context, *connect.Request[v1.GetDeploymentMetricsRequest]) (*connect.Response[v1.GetDeploymentMetricsResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceMethods := v1.File_fleetd_v1_artifact_proto.Services().ByName("DeploymentService").Methods()
	deploymentServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("CreateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("GetDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceListDeploymentsHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentsProcedure,
		svc.ListDeployments,
		connect.WithSchema(deploymentServiceMethods.ByName("ListDeployments")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceCancelDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceCancelDeploymentProcedure,
		svc.CancelDeployment,
		connect.WithSchema(deploymentServiceMethods.ByName("CancelDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceGetDeploymentMetricsHandler := connect.NewUnaryHandler(
		DeploymentServiceGetDeploymentMetricsProcedure,
		svc.GetDeploymentMetrics,
		connect.WithSchema(deploymentServiceMethods.ByName("GetDeploymentMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceCreateDeploymentProcedure:
			deploymentServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentProcedure:
			deploymentServiceGetDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceListDeploymentsProcedure:
			deploymentServiceListDeploymentsHandler.ServeHTTP(w, r)
		case DeploymentServiceCancelDeploymentProcedure:
			deploymentServiceCancelDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceGetDeploymentMetricsProcedure:
			deploymentServiceGetDeploymentMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeploymentService.CreateDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeploymentService.GetDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeploymentService.ListDeployments is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeploymentService.CancelDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) GetDeploymentMetrics(context.Context, *connect.Request[v1.GetDeploymentMetricsRequest]) (*connect.Response[v1.GetDeploymentMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeploymentService.GetDeploymentMetrics is not implemented"))
}
