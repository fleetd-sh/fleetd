// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/update.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateServiceName is the fully-qualified name of the UpdateService service.
	UpdateServiceName = "fleetd.v1.UpdateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdateServiceCreateUpdateCampaignProcedure is the fully-qualified name of the UpdateService's
	// CreateUpdateCampaign RPC.
	UpdateServiceCreateUpdateCampaignProcedure = "/fleetd.v1.UpdateService/CreateUpdateCampaign"
	// UpdateServiceGetUpdateCampaignProcedure is the fully-qualified name of the UpdateService's
	// GetUpdateCampaign RPC.
	UpdateServiceGetUpdateCampaignProcedure = "/fleetd.v1.UpdateService/GetUpdateCampaign"
	// UpdateServiceListUpdateCampaignsProcedure is the fully-qualified name of the UpdateService's
	// ListUpdateCampaigns RPC.
	UpdateServiceListUpdateCampaignsProcedure = "/fleetd.v1.UpdateService/ListUpdateCampaigns"
	// UpdateServiceGetDeviceUpdateStatusProcedure is the fully-qualified name of the UpdateService's
	// GetDeviceUpdateStatus RPC.
	UpdateServiceGetDeviceUpdateStatusProcedure = "/fleetd.v1.UpdateService/GetDeviceUpdateStatus"
	// UpdateServiceReportUpdateStatusProcedure is the fully-qualified name of the UpdateService's
	// ReportUpdateStatus RPC.
	UpdateServiceReportUpdateStatusProcedure = "/fleetd.v1.UpdateService/ReportUpdateStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	updateServiceServiceDescriptor                     = v1.File_fleetd_v1_update_proto.Services().ByName("UpdateService")
	updateServiceCreateUpdateCampaignMethodDescriptor  = updateServiceServiceDescriptor.Methods().ByName("CreateUpdateCampaign")
	updateServiceGetUpdateCampaignMethodDescriptor     = updateServiceServiceDescriptor.Methods().ByName("GetUpdateCampaign")
	updateServiceListUpdateCampaignsMethodDescriptor   = updateServiceServiceDescriptor.Methods().ByName("ListUpdateCampaigns")
	updateServiceGetDeviceUpdateStatusMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("GetDeviceUpdateStatus")
	updateServiceReportUpdateStatusMethodDescriptor    = updateServiceServiceDescriptor.Methods().ByName("ReportUpdateStatus")
)

// UpdateServiceClient is a client for the fleetd.v1.UpdateService service.
type UpdateServiceClient interface {
	// Create a new update campaign
	CreateUpdateCampaign(context.Context, *connect.Request[v1.CreateUpdateCampaignRequest]) (*connect.Response[v1.CreateUpdateCampaignResponse], error)
	// Get update campaign status
	GetUpdateCampaign(context.Context, *connect.Request[v1.GetUpdateCampaignRequest]) (*connect.Response[v1.GetUpdateCampaignResponse], error)
	// List update campaigns
	ListUpdateCampaigns(context.Context, *connect.Request[v1.ListUpdateCampaignsRequest]) (*connect.Response[v1.ListUpdateCampaignsResponse], error)
	// Get device update status
	GetDeviceUpdateStatus(context.Context, *connect.Request[v1.GetDeviceUpdateStatusRequest]) (*connect.Response[v1.GetDeviceUpdateStatusResponse], error)
	// Report update status from device
	ReportUpdateStatus(context.Context, *connect.Request[v1.ReportUpdateStatusRequest]) (*connect.Response[v1.ReportUpdateStatusResponse], error)
}

// NewUpdateServiceClient constructs a client for the fleetd.v1.UpdateService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &updateServiceClient{
		createUpdateCampaign: connect.NewClient[v1.CreateUpdateCampaignRequest, v1.CreateUpdateCampaignResponse](
			httpClient,
			baseURL+UpdateServiceCreateUpdateCampaignProcedure,
			connect.WithSchema(updateServiceCreateUpdateCampaignMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUpdateCampaign: connect.NewClient[v1.GetUpdateCampaignRequest, v1.GetUpdateCampaignResponse](
			httpClient,
			baseURL+UpdateServiceGetUpdateCampaignProcedure,
			connect.WithSchema(updateServiceGetUpdateCampaignMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUpdateCampaigns: connect.NewClient[v1.ListUpdateCampaignsRequest, v1.ListUpdateCampaignsResponse](
			httpClient,
			baseURL+UpdateServiceListUpdateCampaignsProcedure,
			connect.WithSchema(updateServiceListUpdateCampaignsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeviceUpdateStatus: connect.NewClient[v1.GetDeviceUpdateStatusRequest, v1.GetDeviceUpdateStatusResponse](
			httpClient,
			baseURL+UpdateServiceGetDeviceUpdateStatusProcedure,
			connect.WithSchema(updateServiceGetDeviceUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportUpdateStatus: connect.NewClient[v1.ReportUpdateStatusRequest, v1.ReportUpdateStatusResponse](
			httpClient,
			baseURL+UpdateServiceReportUpdateStatusProcedure,
			connect.WithSchema(updateServiceReportUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateServiceClient implements UpdateServiceClient.
type updateServiceClient struct {
	createUpdateCampaign  *connect.Client[v1.CreateUpdateCampaignRequest, v1.CreateUpdateCampaignResponse]
	getUpdateCampaign     *connect.Client[v1.GetUpdateCampaignRequest, v1.GetUpdateCampaignResponse]
	listUpdateCampaigns   *connect.Client[v1.ListUpdateCampaignsRequest, v1.ListUpdateCampaignsResponse]
	getDeviceUpdateStatus *connect.Client[v1.GetDeviceUpdateStatusRequest, v1.GetDeviceUpdateStatusResponse]
	reportUpdateStatus    *connect.Client[v1.ReportUpdateStatusRequest, v1.ReportUpdateStatusResponse]
}

// CreateUpdateCampaign calls fleetd.v1.UpdateService.CreateUpdateCampaign.
func (c *updateServiceClient) CreateUpdateCampaign(ctx context.Context, req *connect.Request[v1.CreateUpdateCampaignRequest]) (*connect.Response[v1.CreateUpdateCampaignResponse], error) {
	return c.createUpdateCampaign.CallUnary(ctx, req)
}

// GetUpdateCampaign calls fleetd.v1.UpdateService.GetUpdateCampaign.
func (c *updateServiceClient) GetUpdateCampaign(ctx context.Context, req *connect.Request[v1.GetUpdateCampaignRequest]) (*connect.Response[v1.GetUpdateCampaignResponse], error) {
	return c.getUpdateCampaign.CallUnary(ctx, req)
}

// ListUpdateCampaigns calls fleetd.v1.UpdateService.ListUpdateCampaigns.
func (c *updateServiceClient) ListUpdateCampaigns(ctx context.Context, req *connect.Request[v1.ListUpdateCampaignsRequest]) (*connect.Response[v1.ListUpdateCampaignsResponse], error) {
	return c.listUpdateCampaigns.CallUnary(ctx, req)
}

// GetDeviceUpdateStatus calls fleetd.v1.UpdateService.GetDeviceUpdateStatus.
func (c *updateServiceClient) GetDeviceUpdateStatus(ctx context.Context, req *connect.Request[v1.GetDeviceUpdateStatusRequest]) (*connect.Response[v1.GetDeviceUpdateStatusResponse], error) {
	return c.getDeviceUpdateStatus.CallUnary(ctx, req)
}

// ReportUpdateStatus calls fleetd.v1.UpdateService.ReportUpdateStatus.
func (c *updateServiceClient) ReportUpdateStatus(ctx context.Context, req *connect.Request[v1.ReportUpdateStatusRequest]) (*connect.Response[v1.ReportUpdateStatusResponse], error) {
	return c.reportUpdateStatus.CallUnary(ctx, req)
}

// UpdateServiceHandler is an implementation of the fleetd.v1.UpdateService service.
type UpdateServiceHandler interface {
	// Create a new update campaign
	CreateUpdateCampaign(context.Context, *connect.Request[v1.CreateUpdateCampaignRequest]) (*connect.Response[v1.CreateUpdateCampaignResponse], error)
	// Get update campaign status
	GetUpdateCampaign(context.Context, *connect.Request[v1.GetUpdateCampaignRequest]) (*connect.Response[v1.GetUpdateCampaignResponse], error)
	// List update campaigns
	ListUpdateCampaigns(context.Context, *connect.Request[v1.ListUpdateCampaignsRequest]) (*connect.Response[v1.ListUpdateCampaignsResponse], error)
	// Get device update status
	GetDeviceUpdateStatus(context.Context, *connect.Request[v1.GetDeviceUpdateStatusRequest]) (*connect.Response[v1.GetDeviceUpdateStatusResponse], error)
	// Report update status from device
	ReportUpdateStatus(context.Context, *connect.Request[v1.ReportUpdateStatusRequest]) (*connect.Response[v1.ReportUpdateStatusResponse], error)
}

// NewUpdateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateServiceHandler(svc UpdateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateServiceCreateUpdateCampaignHandler := connect.NewUnaryHandler(
		UpdateServiceCreateUpdateCampaignProcedure,
		svc.CreateUpdateCampaign,
		connect.WithSchema(updateServiceCreateUpdateCampaignMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceGetUpdateCampaignHandler := connect.NewUnaryHandler(
		UpdateServiceGetUpdateCampaignProcedure,
		svc.GetUpdateCampaign,
		connect.WithSchema(updateServiceGetUpdateCampaignMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceListUpdateCampaignsHandler := connect.NewUnaryHandler(
		UpdateServiceListUpdateCampaignsProcedure,
		svc.ListUpdateCampaigns,
		connect.WithSchema(updateServiceListUpdateCampaignsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceGetDeviceUpdateStatusHandler := connect.NewUnaryHandler(
		UpdateServiceGetDeviceUpdateStatusProcedure,
		svc.GetDeviceUpdateStatus,
		connect.WithSchema(updateServiceGetDeviceUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceReportUpdateStatusHandler := connect.NewUnaryHandler(
		UpdateServiceReportUpdateStatusProcedure,
		svc.ReportUpdateStatus,
		connect.WithSchema(updateServiceReportUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.UpdateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateServiceCreateUpdateCampaignProcedure:
			updateServiceCreateUpdateCampaignHandler.ServeHTTP(w, r)
		case UpdateServiceGetUpdateCampaignProcedure:
			updateServiceGetUpdateCampaignHandler.ServeHTTP(w, r)
		case UpdateServiceListUpdateCampaignsProcedure:
			updateServiceListUpdateCampaignsHandler.ServeHTTP(w, r)
		case UpdateServiceGetDeviceUpdateStatusProcedure:
			updateServiceGetDeviceUpdateStatusHandler.ServeHTTP(w, r)
		case UpdateServiceReportUpdateStatusProcedure:
			updateServiceReportUpdateStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateServiceHandler struct{}

func (UnimplementedUpdateServiceHandler) CreateUpdateCampaign(context.Context, *connect.Request[v1.CreateUpdateCampaignRequest]) (*connect.Response[v1.CreateUpdateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.UpdateService.CreateUpdateCampaign is not implemented"))
}

func (UnimplementedUpdateServiceHandler) GetUpdateCampaign(context.Context, *connect.Request[v1.GetUpdateCampaignRequest]) (*connect.Response[v1.GetUpdateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.UpdateService.GetUpdateCampaign is not implemented"))
}

func (UnimplementedUpdateServiceHandler) ListUpdateCampaigns(context.Context, *connect.Request[v1.ListUpdateCampaignsRequest]) (*connect.Response[v1.ListUpdateCampaignsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.UpdateService.ListUpdateCampaigns is not implemented"))
}

func (UnimplementedUpdateServiceHandler) GetDeviceUpdateStatus(context.Context, *connect.Request[v1.GetDeviceUpdateStatusRequest]) (*connect.Response[v1.GetDeviceUpdateStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.UpdateService.GetDeviceUpdateStatus is not implemented"))
}

func (UnimplementedUpdateServiceHandler) ReportUpdateStatus(context.Context, *connect.Request[v1.ReportUpdateStatusRequest]) (*connect.Response[v1.ReportUpdateStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.UpdateService.ReportUpdateStatus is not implemented"))
}
