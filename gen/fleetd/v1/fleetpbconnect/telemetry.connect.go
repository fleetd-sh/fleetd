// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/telemetry.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TelemetryServiceName is the fully-qualified name of the TelemetryService service.
	TelemetryServiceName = "fleetd.v1.TelemetryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TelemetryServiceGetTelemetryProcedure is the fully-qualified name of the TelemetryService's
	// GetTelemetry RPC.
	TelemetryServiceGetTelemetryProcedure = "/fleetd.v1.TelemetryService/GetTelemetry"
	// TelemetryServiceGetMetricsProcedure is the fully-qualified name of the TelemetryService's
	// GetMetrics RPC.
	TelemetryServiceGetMetricsProcedure = "/fleetd.v1.TelemetryService/GetMetrics"
	// TelemetryServiceStreamTelemetryProcedure is the fully-qualified name of the TelemetryService's
	// StreamTelemetry RPC.
	TelemetryServiceStreamTelemetryProcedure = "/fleetd.v1.TelemetryService/StreamTelemetry"
	// TelemetryServiceGetLogsProcedure is the fully-qualified name of the TelemetryService's GetLogs
	// RPC.
	TelemetryServiceGetLogsProcedure = "/fleetd.v1.TelemetryService/GetLogs"
	// TelemetryServiceStreamLogsProcedure is the fully-qualified name of the TelemetryService's
	// StreamLogs RPC.
	TelemetryServiceStreamLogsProcedure = "/fleetd.v1.TelemetryService/StreamLogs"
	// TelemetryServiceConfigureAlertProcedure is the fully-qualified name of the TelemetryService's
	// ConfigureAlert RPC.
	TelemetryServiceConfigureAlertProcedure = "/fleetd.v1.TelemetryService/ConfigureAlert"
	// TelemetryServiceListAlertsProcedure is the fully-qualified name of the TelemetryService's
	// ListAlerts RPC.
	TelemetryServiceListAlertsProcedure = "/fleetd.v1.TelemetryService/ListAlerts"
	// TelemetryServiceDeleteAlertProcedure is the fully-qualified name of the TelemetryService's
	// DeleteAlert RPC.
	TelemetryServiceDeleteAlertProcedure = "/fleetd.v1.TelemetryService/DeleteAlert"
)

// TelemetryServiceClient is a client for the fleetd.v1.TelemetryService service.
type TelemetryServiceClient interface {
	// Get telemetry data for devices
	GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error)
	// Get aggregated metrics
	GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error)
	// Stream real-time telemetry data
	StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest]) (*connect.ServerStreamForClient[v1.StreamTelemetryResponse], error)
	// Get system logs
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error)
	// Stream real-time logs
	StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest]) (*connect.ServerStreamForClient[v1.StreamLogsResponse], error)
	// Configure alerts
	ConfigureAlert(context.Context, *connect.Request[v1.ConfigureAlertRequest]) (*connect.Response[v1.ConfigureAlertResponse], error)
	// List configured alerts
	ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error)
	// Delete an alert
	DeleteAlert(context.Context, *connect.Request[v1.DeleteAlertRequest]) (*connect.Response[v1.DeleteAlertResponse], error)
}

// NewTelemetryServiceClient constructs a client for the fleetd.v1.TelemetryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTelemetryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TelemetryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	telemetryServiceMethods := v1.File_fleetd_v1_telemetry_proto.Services().ByName("TelemetryService").Methods()
	return &telemetryServiceClient{
		getTelemetry: connect.NewClient[v1.GetTelemetryRequest, v1.GetTelemetryResponse](
			httpClient,
			baseURL+TelemetryServiceGetTelemetryProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("GetTelemetry")),
			connect.WithClientOptions(opts...),
		),
		getMetrics: connect.NewClient[v1.GetMetricsRequest, v1.GetMetricsResponse](
			httpClient,
			baseURL+TelemetryServiceGetMetricsProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("GetMetrics")),
			connect.WithClientOptions(opts...),
		),
		streamTelemetry: connect.NewClient[v1.StreamTelemetryRequest, v1.StreamTelemetryResponse](
			httpClient,
			baseURL+TelemetryServiceStreamTelemetryProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("StreamTelemetry")),
			connect.WithClientOptions(opts...),
		),
		getLogs: connect.NewClient[v1.GetLogsRequest, v1.GetLogsResponse](
			httpClient,
			baseURL+TelemetryServiceGetLogsProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("GetLogs")),
			connect.WithClientOptions(opts...),
		),
		streamLogs: connect.NewClient[v1.StreamLogsRequest, v1.StreamLogsResponse](
			httpClient,
			baseURL+TelemetryServiceStreamLogsProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("StreamLogs")),
			connect.WithClientOptions(opts...),
		),
		configureAlert: connect.NewClient[v1.ConfigureAlertRequest, v1.ConfigureAlertResponse](
			httpClient,
			baseURL+TelemetryServiceConfigureAlertProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("ConfigureAlert")),
			connect.WithClientOptions(opts...),
		),
		listAlerts: connect.NewClient[v1.ListAlertsRequest, v1.ListAlertsResponse](
			httpClient,
			baseURL+TelemetryServiceListAlertsProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("ListAlerts")),
			connect.WithClientOptions(opts...),
		),
		deleteAlert: connect.NewClient[v1.DeleteAlertRequest, v1.DeleteAlertResponse](
			httpClient,
			baseURL+TelemetryServiceDeleteAlertProcedure,
			connect.WithSchema(telemetryServiceMethods.ByName("DeleteAlert")),
			connect.WithClientOptions(opts...),
		),
	}
}

// telemetryServiceClient implements TelemetryServiceClient.
type telemetryServiceClient struct {
	getTelemetry    *connect.Client[v1.GetTelemetryRequest, v1.GetTelemetryResponse]
	getMetrics      *connect.Client[v1.GetMetricsRequest, v1.GetMetricsResponse]
	streamTelemetry *connect.Client[v1.StreamTelemetryRequest, v1.StreamTelemetryResponse]
	getLogs         *connect.Client[v1.GetLogsRequest, v1.GetLogsResponse]
	streamLogs      *connect.Client[v1.StreamLogsRequest, v1.StreamLogsResponse]
	configureAlert  *connect.Client[v1.ConfigureAlertRequest, v1.ConfigureAlertResponse]
	listAlerts      *connect.Client[v1.ListAlertsRequest, v1.ListAlertsResponse]
	deleteAlert     *connect.Client[v1.DeleteAlertRequest, v1.DeleteAlertResponse]
}

// GetTelemetry calls fleetd.v1.TelemetryService.GetTelemetry.
func (c *telemetryServiceClient) GetTelemetry(ctx context.Context, req *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error) {
	return c.getTelemetry.CallUnary(ctx, req)
}

// GetMetrics calls fleetd.v1.TelemetryService.GetMetrics.
func (c *telemetryServiceClient) GetMetrics(ctx context.Context, req *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error) {
	return c.getMetrics.CallUnary(ctx, req)
}

// StreamTelemetry calls fleetd.v1.TelemetryService.StreamTelemetry.
func (c *telemetryServiceClient) StreamTelemetry(ctx context.Context, req *connect.Request[v1.StreamTelemetryRequest]) (*connect.ServerStreamForClient[v1.StreamTelemetryResponse], error) {
	return c.streamTelemetry.CallServerStream(ctx, req)
}

// GetLogs calls fleetd.v1.TelemetryService.GetLogs.
func (c *telemetryServiceClient) GetLogs(ctx context.Context, req *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error) {
	return c.getLogs.CallUnary(ctx, req)
}

// StreamLogs calls fleetd.v1.TelemetryService.StreamLogs.
func (c *telemetryServiceClient) StreamLogs(ctx context.Context, req *connect.Request[v1.StreamLogsRequest]) (*connect.ServerStreamForClient[v1.StreamLogsResponse], error) {
	return c.streamLogs.CallServerStream(ctx, req)
}

// ConfigureAlert calls fleetd.v1.TelemetryService.ConfigureAlert.
func (c *telemetryServiceClient) ConfigureAlert(ctx context.Context, req *connect.Request[v1.ConfigureAlertRequest]) (*connect.Response[v1.ConfigureAlertResponse], error) {
	return c.configureAlert.CallUnary(ctx, req)
}

// ListAlerts calls fleetd.v1.TelemetryService.ListAlerts.
func (c *telemetryServiceClient) ListAlerts(ctx context.Context, req *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error) {
	return c.listAlerts.CallUnary(ctx, req)
}

// DeleteAlert calls fleetd.v1.TelemetryService.DeleteAlert.
func (c *telemetryServiceClient) DeleteAlert(ctx context.Context, req *connect.Request[v1.DeleteAlertRequest]) (*connect.Response[v1.DeleteAlertResponse], error) {
	return c.deleteAlert.CallUnary(ctx, req)
}

// TelemetryServiceHandler is an implementation of the fleetd.v1.TelemetryService service.
type TelemetryServiceHandler interface {
	// Get telemetry data for devices
	GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error)
	// Get aggregated metrics
	GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error)
	// Stream real-time telemetry data
	StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest], *connect.ServerStream[v1.StreamTelemetryResponse]) error
	// Get system logs
	GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error)
	// Stream real-time logs
	StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest], *connect.ServerStream[v1.StreamLogsResponse]) error
	// Configure alerts
	ConfigureAlert(context.Context, *connect.Request[v1.ConfigureAlertRequest]) (*connect.Response[v1.ConfigureAlertResponse], error)
	// List configured alerts
	ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error)
	// Delete an alert
	DeleteAlert(context.Context, *connect.Request[v1.DeleteAlertRequest]) (*connect.Response[v1.DeleteAlertResponse], error)
}

// NewTelemetryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTelemetryServiceHandler(svc TelemetryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	telemetryServiceMethods := v1.File_fleetd_v1_telemetry_proto.Services().ByName("TelemetryService").Methods()
	telemetryServiceGetTelemetryHandler := connect.NewUnaryHandler(
		TelemetryServiceGetTelemetryProcedure,
		svc.GetTelemetry,
		connect.WithSchema(telemetryServiceMethods.ByName("GetTelemetry")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceGetMetricsHandler := connect.NewUnaryHandler(
		TelemetryServiceGetMetricsProcedure,
		svc.GetMetrics,
		connect.WithSchema(telemetryServiceMethods.ByName("GetMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceStreamTelemetryHandler := connect.NewServerStreamHandler(
		TelemetryServiceStreamTelemetryProcedure,
		svc.StreamTelemetry,
		connect.WithSchema(telemetryServiceMethods.ByName("StreamTelemetry")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceGetLogsHandler := connect.NewUnaryHandler(
		TelemetryServiceGetLogsProcedure,
		svc.GetLogs,
		connect.WithSchema(telemetryServiceMethods.ByName("GetLogs")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceStreamLogsHandler := connect.NewServerStreamHandler(
		TelemetryServiceStreamLogsProcedure,
		svc.StreamLogs,
		connect.WithSchema(telemetryServiceMethods.ByName("StreamLogs")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceConfigureAlertHandler := connect.NewUnaryHandler(
		TelemetryServiceConfigureAlertProcedure,
		svc.ConfigureAlert,
		connect.WithSchema(telemetryServiceMethods.ByName("ConfigureAlert")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceListAlertsHandler := connect.NewUnaryHandler(
		TelemetryServiceListAlertsProcedure,
		svc.ListAlerts,
		connect.WithSchema(telemetryServiceMethods.ByName("ListAlerts")),
		connect.WithHandlerOptions(opts...),
	)
	telemetryServiceDeleteAlertHandler := connect.NewUnaryHandler(
		TelemetryServiceDeleteAlertProcedure,
		svc.DeleteAlert,
		connect.WithSchema(telemetryServiceMethods.ByName("DeleteAlert")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.TelemetryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TelemetryServiceGetTelemetryProcedure:
			telemetryServiceGetTelemetryHandler.ServeHTTP(w, r)
		case TelemetryServiceGetMetricsProcedure:
			telemetryServiceGetMetricsHandler.ServeHTTP(w, r)
		case TelemetryServiceStreamTelemetryProcedure:
			telemetryServiceStreamTelemetryHandler.ServeHTTP(w, r)
		case TelemetryServiceGetLogsProcedure:
			telemetryServiceGetLogsHandler.ServeHTTP(w, r)
		case TelemetryServiceStreamLogsProcedure:
			telemetryServiceStreamLogsHandler.ServeHTTP(w, r)
		case TelemetryServiceConfigureAlertProcedure:
			telemetryServiceConfigureAlertHandler.ServeHTTP(w, r)
		case TelemetryServiceListAlertsProcedure:
			telemetryServiceListAlertsHandler.ServeHTTP(w, r)
		case TelemetryServiceDeleteAlertProcedure:
			telemetryServiceDeleteAlertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTelemetryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTelemetryServiceHandler struct{}

func (UnimplementedTelemetryServiceHandler) GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.GetTelemetry is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) GetMetrics(context.Context, *connect.Request[v1.GetMetricsRequest]) (*connect.Response[v1.GetMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.GetMetrics is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest], *connect.ServerStream[v1.StreamTelemetryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.StreamTelemetry is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) GetLogs(context.Context, *connect.Request[v1.GetLogsRequest]) (*connect.Response[v1.GetLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.GetLogs is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) StreamLogs(context.Context, *connect.Request[v1.StreamLogsRequest], *connect.ServerStream[v1.StreamLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.StreamLogs is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) ConfigureAlert(context.Context, *connect.Request[v1.ConfigureAlertRequest]) (*connect.Response[v1.ConfigureAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.ConfigureAlert is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) ListAlerts(context.Context, *connect.Request[v1.ListAlertsRequest]) (*connect.Response[v1.ListAlertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.ListAlerts is not implemented"))
}

func (UnimplementedTelemetryServiceHandler) DeleteAlert(context.Context, *connect.Request[v1.DeleteAlertRequest]) (*connect.Response[v1.DeleteAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.TelemetryService.DeleteAlert is not implemented"))
}
