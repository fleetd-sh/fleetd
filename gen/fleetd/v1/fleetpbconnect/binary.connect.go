// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/binary.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BinaryServiceName is the fully-qualified name of the BinaryService service.
	BinaryServiceName = "fleetd.v1.BinaryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BinaryServiceUploadBinaryProcedure is the fully-qualified name of the BinaryService's
	// UploadBinary RPC.
	BinaryServiceUploadBinaryProcedure = "/fleetd.v1.BinaryService/UploadBinary"
	// BinaryServiceGetBinaryProcedure is the fully-qualified name of the BinaryService's GetBinary RPC.
	BinaryServiceGetBinaryProcedure = "/fleetd.v1.BinaryService/GetBinary"
	// BinaryServiceDownloadBinaryProcedure is the fully-qualified name of the BinaryService's
	// DownloadBinary RPC.
	BinaryServiceDownloadBinaryProcedure = "/fleetd.v1.BinaryService/DownloadBinary"
	// BinaryServiceListBinariesProcedure is the fully-qualified name of the BinaryService's
	// ListBinaries RPC.
	BinaryServiceListBinariesProcedure = "/fleetd.v1.BinaryService/ListBinaries"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	binaryServiceServiceDescriptor              = v1.File_fleetd_v1_binary_proto.Services().ByName("BinaryService")
	binaryServiceUploadBinaryMethodDescriptor   = binaryServiceServiceDescriptor.Methods().ByName("UploadBinary")
	binaryServiceGetBinaryMethodDescriptor      = binaryServiceServiceDescriptor.Methods().ByName("GetBinary")
	binaryServiceDownloadBinaryMethodDescriptor = binaryServiceServiceDescriptor.Methods().ByName("DownloadBinary")
	binaryServiceListBinariesMethodDescriptor   = binaryServiceServiceDescriptor.Methods().ByName("ListBinaries")
)

// BinaryServiceClient is a client for the fleetd.v1.BinaryService service.
type BinaryServiceClient interface {
	// Upload a new binary to the fleet
	UploadBinary(context.Context) *connect.ClientStreamForClient[v1.UploadBinaryRequest, v1.UploadBinaryResponse]
	// Get information about a binary
	GetBinary(context.Context, *connect.Request[v1.GetBinaryRequest]) (*connect.Response[v1.GetBinaryResponse], error)
	// Download a binary
	DownloadBinary(context.Context, *connect.Request[v1.DownloadBinaryRequest]) (*connect.ServerStreamForClient[v1.DownloadBinaryResponse], error)
	// List available binaries
	ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error)
}

// NewBinaryServiceClient constructs a client for the fleetd.v1.BinaryService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBinaryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BinaryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &binaryServiceClient{
		uploadBinary: connect.NewClient[v1.UploadBinaryRequest, v1.UploadBinaryResponse](
			httpClient,
			baseURL+BinaryServiceUploadBinaryProcedure,
			connect.WithSchema(binaryServiceUploadBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBinary: connect.NewClient[v1.GetBinaryRequest, v1.GetBinaryResponse](
			httpClient,
			baseURL+BinaryServiceGetBinaryProcedure,
			connect.WithSchema(binaryServiceGetBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		downloadBinary: connect.NewClient[v1.DownloadBinaryRequest, v1.DownloadBinaryResponse](
			httpClient,
			baseURL+BinaryServiceDownloadBinaryProcedure,
			connect.WithSchema(binaryServiceDownloadBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBinaries: connect.NewClient[v1.ListBinariesRequest, v1.ListBinariesResponse](
			httpClient,
			baseURL+BinaryServiceListBinariesProcedure,
			connect.WithSchema(binaryServiceListBinariesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// binaryServiceClient implements BinaryServiceClient.
type binaryServiceClient struct {
	uploadBinary   *connect.Client[v1.UploadBinaryRequest, v1.UploadBinaryResponse]
	getBinary      *connect.Client[v1.GetBinaryRequest, v1.GetBinaryResponse]
	downloadBinary *connect.Client[v1.DownloadBinaryRequest, v1.DownloadBinaryResponse]
	listBinaries   *connect.Client[v1.ListBinariesRequest, v1.ListBinariesResponse]
}

// UploadBinary calls fleetd.v1.BinaryService.UploadBinary.
func (c *binaryServiceClient) UploadBinary(ctx context.Context) *connect.ClientStreamForClient[v1.UploadBinaryRequest, v1.UploadBinaryResponse] {
	return c.uploadBinary.CallClientStream(ctx)
}

// GetBinary calls fleetd.v1.BinaryService.GetBinary.
func (c *binaryServiceClient) GetBinary(ctx context.Context, req *connect.Request[v1.GetBinaryRequest]) (*connect.Response[v1.GetBinaryResponse], error) {
	return c.getBinary.CallUnary(ctx, req)
}

// DownloadBinary calls fleetd.v1.BinaryService.DownloadBinary.
func (c *binaryServiceClient) DownloadBinary(ctx context.Context, req *connect.Request[v1.DownloadBinaryRequest]) (*connect.ServerStreamForClient[v1.DownloadBinaryResponse], error) {
	return c.downloadBinary.CallServerStream(ctx, req)
}

// ListBinaries calls fleetd.v1.BinaryService.ListBinaries.
func (c *binaryServiceClient) ListBinaries(ctx context.Context, req *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error) {
	return c.listBinaries.CallUnary(ctx, req)
}

// BinaryServiceHandler is an implementation of the fleetd.v1.BinaryService service.
type BinaryServiceHandler interface {
	// Upload a new binary to the fleet
	UploadBinary(context.Context, *connect.ClientStream[v1.UploadBinaryRequest]) (*connect.Response[v1.UploadBinaryResponse], error)
	// Get information about a binary
	GetBinary(context.Context, *connect.Request[v1.GetBinaryRequest]) (*connect.Response[v1.GetBinaryResponse], error)
	// Download a binary
	DownloadBinary(context.Context, *connect.Request[v1.DownloadBinaryRequest], *connect.ServerStream[v1.DownloadBinaryResponse]) error
	// List available binaries
	ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error)
}

// NewBinaryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBinaryServiceHandler(svc BinaryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	binaryServiceUploadBinaryHandler := connect.NewClientStreamHandler(
		BinaryServiceUploadBinaryProcedure,
		svc.UploadBinary,
		connect.WithSchema(binaryServiceUploadBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	binaryServiceGetBinaryHandler := connect.NewUnaryHandler(
		BinaryServiceGetBinaryProcedure,
		svc.GetBinary,
		connect.WithSchema(binaryServiceGetBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	binaryServiceDownloadBinaryHandler := connect.NewServerStreamHandler(
		BinaryServiceDownloadBinaryProcedure,
		svc.DownloadBinary,
		connect.WithSchema(binaryServiceDownloadBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	binaryServiceListBinariesHandler := connect.NewUnaryHandler(
		BinaryServiceListBinariesProcedure,
		svc.ListBinaries,
		connect.WithSchema(binaryServiceListBinariesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.BinaryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BinaryServiceUploadBinaryProcedure:
			binaryServiceUploadBinaryHandler.ServeHTTP(w, r)
		case BinaryServiceGetBinaryProcedure:
			binaryServiceGetBinaryHandler.ServeHTTP(w, r)
		case BinaryServiceDownloadBinaryProcedure:
			binaryServiceDownloadBinaryHandler.ServeHTTP(w, r)
		case BinaryServiceListBinariesProcedure:
			binaryServiceListBinariesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBinaryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBinaryServiceHandler struct{}

func (UnimplementedBinaryServiceHandler) UploadBinary(context.Context, *connect.ClientStream[v1.UploadBinaryRequest]) (*connect.Response[v1.UploadBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.BinaryService.UploadBinary is not implemented"))
}

func (UnimplementedBinaryServiceHandler) GetBinary(context.Context, *connect.Request[v1.GetBinaryRequest]) (*connect.Response[v1.GetBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.BinaryService.GetBinary is not implemented"))
}

func (UnimplementedBinaryServiceHandler) DownloadBinary(context.Context, *connect.Request[v1.DownloadBinaryRequest], *connect.ServerStream[v1.DownloadBinaryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.BinaryService.DownloadBinary is not implemented"))
}

func (UnimplementedBinaryServiceHandler) ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.BinaryService.ListBinaries is not implemented"))
}
