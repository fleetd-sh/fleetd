// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/settings.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SettingsServiceName is the fully-qualified name of the SettingsService service.
	SettingsServiceName = "fleetd.v1.SettingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SettingsServiceGetOrganizationSettingsProcedure is the fully-qualified name of the
	// SettingsService's GetOrganizationSettings RPC.
	SettingsServiceGetOrganizationSettingsProcedure = "/fleetd.v1.SettingsService/GetOrganizationSettings"
	// SettingsServiceUpdateOrganizationSettingsProcedure is the fully-qualified name of the
	// SettingsService's UpdateOrganizationSettings RPC.
	SettingsServiceUpdateOrganizationSettingsProcedure = "/fleetd.v1.SettingsService/UpdateOrganizationSettings"
	// SettingsServiceGetSecuritySettingsProcedure is the fully-qualified name of the SettingsService's
	// GetSecuritySettings RPC.
	SettingsServiceGetSecuritySettingsProcedure = "/fleetd.v1.SettingsService/GetSecuritySettings"
	// SettingsServiceUpdateSecuritySettingsProcedure is the fully-qualified name of the
	// SettingsService's UpdateSecuritySettings RPC.
	SettingsServiceUpdateSecuritySettingsProcedure = "/fleetd.v1.SettingsService/UpdateSecuritySettings"
	// SettingsServiceGetNotificationSettingsProcedure is the fully-qualified name of the
	// SettingsService's GetNotificationSettings RPC.
	SettingsServiceGetNotificationSettingsProcedure = "/fleetd.v1.SettingsService/GetNotificationSettings"
	// SettingsServiceUpdateNotificationSettingsProcedure is the fully-qualified name of the
	// SettingsService's UpdateNotificationSettings RPC.
	SettingsServiceUpdateNotificationSettingsProcedure = "/fleetd.v1.SettingsService/UpdateNotificationSettings"
	// SettingsServiceGetAPISettingsProcedure is the fully-qualified name of the SettingsService's
	// GetAPISettings RPC.
	SettingsServiceGetAPISettingsProcedure = "/fleetd.v1.SettingsService/GetAPISettings"
	// SettingsServiceUpdateAPISettingsProcedure is the fully-qualified name of the SettingsService's
	// UpdateAPISettings RPC.
	SettingsServiceUpdateAPISettingsProcedure = "/fleetd.v1.SettingsService/UpdateAPISettings"
	// SettingsServiceRegenerateAPIKeyProcedure is the fully-qualified name of the SettingsService's
	// RegenerateAPIKey RPC.
	SettingsServiceRegenerateAPIKeyProcedure = "/fleetd.v1.SettingsService/RegenerateAPIKey"
	// SettingsServiceGetAdvancedSettingsProcedure is the fully-qualified name of the SettingsService's
	// GetAdvancedSettings RPC.
	SettingsServiceGetAdvancedSettingsProcedure = "/fleetd.v1.SettingsService/GetAdvancedSettings"
	// SettingsServiceUpdateAdvancedSettingsProcedure is the fully-qualified name of the
	// SettingsService's UpdateAdvancedSettings RPC.
	SettingsServiceUpdateAdvancedSettingsProcedure = "/fleetd.v1.SettingsService/UpdateAdvancedSettings"
	// SettingsServiceExportDataProcedure is the fully-qualified name of the SettingsService's
	// ExportData RPC.
	SettingsServiceExportDataProcedure = "/fleetd.v1.SettingsService/ExportData"
	// SettingsServiceDeleteAllDataProcedure is the fully-qualified name of the SettingsService's
	// DeleteAllData RPC.
	SettingsServiceDeleteAllDataProcedure = "/fleetd.v1.SettingsService/DeleteAllData"
)

// SettingsServiceClient is a client for the fleetd.v1.SettingsService service.
type SettingsServiceClient interface {
	// Get organization settings
	GetOrganizationSettings(context.Context, *connect.Request[v1.GetOrganizationSettingsRequest]) (*connect.Response[v1.GetOrganizationSettingsResponse], error)
	// Update organization settings
	UpdateOrganizationSettings(context.Context, *connect.Request[v1.UpdateOrganizationSettingsRequest]) (*connect.Response[v1.UpdateOrganizationSettingsResponse], error)
	// Get security settings
	GetSecuritySettings(context.Context, *connect.Request[v1.GetSecuritySettingsRequest]) (*connect.Response[v1.GetSecuritySettingsResponse], error)
	// Update security settings
	UpdateSecuritySettings(context.Context, *connect.Request[v1.UpdateSecuritySettingsRequest]) (*connect.Response[v1.UpdateSecuritySettingsResponse], error)
	// Get notification settings
	GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error)
	// Update notification settings
	UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error)
	// Get API settings
	GetAPISettings(context.Context, *connect.Request[v1.GetAPISettingsRequest]) (*connect.Response[v1.GetAPISettingsResponse], error)
	// Update API settings
	UpdateAPISettings(context.Context, *connect.Request[v1.UpdateAPISettingsRequest]) (*connect.Response[v1.UpdateAPISettingsResponse], error)
	// Regenerate API key
	RegenerateAPIKey(context.Context, *connect.Request[v1.RegenerateAPIKeyRequest]) (*connect.Response[v1.RegenerateAPIKeyResponse], error)
	// Get advanced settings
	GetAdvancedSettings(context.Context, *connect.Request[v1.GetAdvancedSettingsRequest]) (*connect.Response[v1.GetAdvancedSettingsResponse], error)
	// Update advanced settings
	UpdateAdvancedSettings(context.Context, *connect.Request[v1.UpdateAdvancedSettingsRequest]) (*connect.Response[v1.UpdateAdvancedSettingsResponse], error)
	// Export all data
	ExportData(context.Context, *connect.Request[v1.ExportDataRequest]) (*connect.Response[v1.ExportDataResponse], error)
	// Delete all data (danger zone)
	DeleteAllData(context.Context, *connect.Request[v1.DeleteAllDataRequest]) (*connect.Response[v1.DeleteAllDataResponse], error)
}

// NewSettingsServiceClient constructs a client for the fleetd.v1.SettingsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SettingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	settingsServiceMethods := v1.File_fleetd_v1_settings_proto.Services().ByName("SettingsService").Methods()
	return &settingsServiceClient{
		getOrganizationSettings: connect.NewClient[v1.GetOrganizationSettingsRequest, v1.GetOrganizationSettingsResponse](
			httpClient,
			baseURL+SettingsServiceGetOrganizationSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetOrganizationSettings")),
			connect.WithClientOptions(opts...),
		),
		updateOrganizationSettings: connect.NewClient[v1.UpdateOrganizationSettingsRequest, v1.UpdateOrganizationSettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateOrganizationSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateOrganizationSettings")),
			connect.WithClientOptions(opts...),
		),
		getSecuritySettings: connect.NewClient[v1.GetSecuritySettingsRequest, v1.GetSecuritySettingsResponse](
			httpClient,
			baseURL+SettingsServiceGetSecuritySettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetSecuritySettings")),
			connect.WithClientOptions(opts...),
		),
		updateSecuritySettings: connect.NewClient[v1.UpdateSecuritySettingsRequest, v1.UpdateSecuritySettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateSecuritySettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateSecuritySettings")),
			connect.WithClientOptions(opts...),
		),
		getNotificationSettings: connect.NewClient[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse](
			httpClient,
			baseURL+SettingsServiceGetNotificationSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetNotificationSettings")),
			connect.WithClientOptions(opts...),
		),
		updateNotificationSettings: connect.NewClient[v1.UpdateNotificationSettingsRequest, v1.UpdateNotificationSettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateNotificationSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateNotificationSettings")),
			connect.WithClientOptions(opts...),
		),
		getAPISettings: connect.NewClient[v1.GetAPISettingsRequest, v1.GetAPISettingsResponse](
			httpClient,
			baseURL+SettingsServiceGetAPISettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetAPISettings")),
			connect.WithClientOptions(opts...),
		),
		updateAPISettings: connect.NewClient[v1.UpdateAPISettingsRequest, v1.UpdateAPISettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateAPISettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateAPISettings")),
			connect.WithClientOptions(opts...),
		),
		regenerateAPIKey: connect.NewClient[v1.RegenerateAPIKeyRequest, v1.RegenerateAPIKeyResponse](
			httpClient,
			baseURL+SettingsServiceRegenerateAPIKeyProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("RegenerateAPIKey")),
			connect.WithClientOptions(opts...),
		),
		getAdvancedSettings: connect.NewClient[v1.GetAdvancedSettingsRequest, v1.GetAdvancedSettingsResponse](
			httpClient,
			baseURL+SettingsServiceGetAdvancedSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("GetAdvancedSettings")),
			connect.WithClientOptions(opts...),
		),
		updateAdvancedSettings: connect.NewClient[v1.UpdateAdvancedSettingsRequest, v1.UpdateAdvancedSettingsResponse](
			httpClient,
			baseURL+SettingsServiceUpdateAdvancedSettingsProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("UpdateAdvancedSettings")),
			connect.WithClientOptions(opts...),
		),
		exportData: connect.NewClient[v1.ExportDataRequest, v1.ExportDataResponse](
			httpClient,
			baseURL+SettingsServiceExportDataProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("ExportData")),
			connect.WithClientOptions(opts...),
		),
		deleteAllData: connect.NewClient[v1.DeleteAllDataRequest, v1.DeleteAllDataResponse](
			httpClient,
			baseURL+SettingsServiceDeleteAllDataProcedure,
			connect.WithSchema(settingsServiceMethods.ByName("DeleteAllData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// settingsServiceClient implements SettingsServiceClient.
type settingsServiceClient struct {
	getOrganizationSettings    *connect.Client[v1.GetOrganizationSettingsRequest, v1.GetOrganizationSettingsResponse]
	updateOrganizationSettings *connect.Client[v1.UpdateOrganizationSettingsRequest, v1.UpdateOrganizationSettingsResponse]
	getSecuritySettings        *connect.Client[v1.GetSecuritySettingsRequest, v1.GetSecuritySettingsResponse]
	updateSecuritySettings     *connect.Client[v1.UpdateSecuritySettingsRequest, v1.UpdateSecuritySettingsResponse]
	getNotificationSettings    *connect.Client[v1.GetNotificationSettingsRequest, v1.GetNotificationSettingsResponse]
	updateNotificationSettings *connect.Client[v1.UpdateNotificationSettingsRequest, v1.UpdateNotificationSettingsResponse]
	getAPISettings             *connect.Client[v1.GetAPISettingsRequest, v1.GetAPISettingsResponse]
	updateAPISettings          *connect.Client[v1.UpdateAPISettingsRequest, v1.UpdateAPISettingsResponse]
	regenerateAPIKey           *connect.Client[v1.RegenerateAPIKeyRequest, v1.RegenerateAPIKeyResponse]
	getAdvancedSettings        *connect.Client[v1.GetAdvancedSettingsRequest, v1.GetAdvancedSettingsResponse]
	updateAdvancedSettings     *connect.Client[v1.UpdateAdvancedSettingsRequest, v1.UpdateAdvancedSettingsResponse]
	exportData                 *connect.Client[v1.ExportDataRequest, v1.ExportDataResponse]
	deleteAllData              *connect.Client[v1.DeleteAllDataRequest, v1.DeleteAllDataResponse]
}

// GetOrganizationSettings calls fleetd.v1.SettingsService.GetOrganizationSettings.
func (c *settingsServiceClient) GetOrganizationSettings(ctx context.Context, req *connect.Request[v1.GetOrganizationSettingsRequest]) (*connect.Response[v1.GetOrganizationSettingsResponse], error) {
	return c.getOrganizationSettings.CallUnary(ctx, req)
}

// UpdateOrganizationSettings calls fleetd.v1.SettingsService.UpdateOrganizationSettings.
func (c *settingsServiceClient) UpdateOrganizationSettings(ctx context.Context, req *connect.Request[v1.UpdateOrganizationSettingsRequest]) (*connect.Response[v1.UpdateOrganizationSettingsResponse], error) {
	return c.updateOrganizationSettings.CallUnary(ctx, req)
}

// GetSecuritySettings calls fleetd.v1.SettingsService.GetSecuritySettings.
func (c *settingsServiceClient) GetSecuritySettings(ctx context.Context, req *connect.Request[v1.GetSecuritySettingsRequest]) (*connect.Response[v1.GetSecuritySettingsResponse], error) {
	return c.getSecuritySettings.CallUnary(ctx, req)
}

// UpdateSecuritySettings calls fleetd.v1.SettingsService.UpdateSecuritySettings.
func (c *settingsServiceClient) UpdateSecuritySettings(ctx context.Context, req *connect.Request[v1.UpdateSecuritySettingsRequest]) (*connect.Response[v1.UpdateSecuritySettingsResponse], error) {
	return c.updateSecuritySettings.CallUnary(ctx, req)
}

// GetNotificationSettings calls fleetd.v1.SettingsService.GetNotificationSettings.
func (c *settingsServiceClient) GetNotificationSettings(ctx context.Context, req *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error) {
	return c.getNotificationSettings.CallUnary(ctx, req)
}

// UpdateNotificationSettings calls fleetd.v1.SettingsService.UpdateNotificationSettings.
func (c *settingsServiceClient) UpdateNotificationSettings(ctx context.Context, req *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error) {
	return c.updateNotificationSettings.CallUnary(ctx, req)
}

// GetAPISettings calls fleetd.v1.SettingsService.GetAPISettings.
func (c *settingsServiceClient) GetAPISettings(ctx context.Context, req *connect.Request[v1.GetAPISettingsRequest]) (*connect.Response[v1.GetAPISettingsResponse], error) {
	return c.getAPISettings.CallUnary(ctx, req)
}

// UpdateAPISettings calls fleetd.v1.SettingsService.UpdateAPISettings.
func (c *settingsServiceClient) UpdateAPISettings(ctx context.Context, req *connect.Request[v1.UpdateAPISettingsRequest]) (*connect.Response[v1.UpdateAPISettingsResponse], error) {
	return c.updateAPISettings.CallUnary(ctx, req)
}

// RegenerateAPIKey calls fleetd.v1.SettingsService.RegenerateAPIKey.
func (c *settingsServiceClient) RegenerateAPIKey(ctx context.Context, req *connect.Request[v1.RegenerateAPIKeyRequest]) (*connect.Response[v1.RegenerateAPIKeyResponse], error) {
	return c.regenerateAPIKey.CallUnary(ctx, req)
}

// GetAdvancedSettings calls fleetd.v1.SettingsService.GetAdvancedSettings.
func (c *settingsServiceClient) GetAdvancedSettings(ctx context.Context, req *connect.Request[v1.GetAdvancedSettingsRequest]) (*connect.Response[v1.GetAdvancedSettingsResponse], error) {
	return c.getAdvancedSettings.CallUnary(ctx, req)
}

// UpdateAdvancedSettings calls fleetd.v1.SettingsService.UpdateAdvancedSettings.
func (c *settingsServiceClient) UpdateAdvancedSettings(ctx context.Context, req *connect.Request[v1.UpdateAdvancedSettingsRequest]) (*connect.Response[v1.UpdateAdvancedSettingsResponse], error) {
	return c.updateAdvancedSettings.CallUnary(ctx, req)
}

// ExportData calls fleetd.v1.SettingsService.ExportData.
func (c *settingsServiceClient) ExportData(ctx context.Context, req *connect.Request[v1.ExportDataRequest]) (*connect.Response[v1.ExportDataResponse], error) {
	return c.exportData.CallUnary(ctx, req)
}

// DeleteAllData calls fleetd.v1.SettingsService.DeleteAllData.
func (c *settingsServiceClient) DeleteAllData(ctx context.Context, req *connect.Request[v1.DeleteAllDataRequest]) (*connect.Response[v1.DeleteAllDataResponse], error) {
	return c.deleteAllData.CallUnary(ctx, req)
}

// SettingsServiceHandler is an implementation of the fleetd.v1.SettingsService service.
type SettingsServiceHandler interface {
	// Get organization settings
	GetOrganizationSettings(context.Context, *connect.Request[v1.GetOrganizationSettingsRequest]) (*connect.Response[v1.GetOrganizationSettingsResponse], error)
	// Update organization settings
	UpdateOrganizationSettings(context.Context, *connect.Request[v1.UpdateOrganizationSettingsRequest]) (*connect.Response[v1.UpdateOrganizationSettingsResponse], error)
	// Get security settings
	GetSecuritySettings(context.Context, *connect.Request[v1.GetSecuritySettingsRequest]) (*connect.Response[v1.GetSecuritySettingsResponse], error)
	// Update security settings
	UpdateSecuritySettings(context.Context, *connect.Request[v1.UpdateSecuritySettingsRequest]) (*connect.Response[v1.UpdateSecuritySettingsResponse], error)
	// Get notification settings
	GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error)
	// Update notification settings
	UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error)
	// Get API settings
	GetAPISettings(context.Context, *connect.Request[v1.GetAPISettingsRequest]) (*connect.Response[v1.GetAPISettingsResponse], error)
	// Update API settings
	UpdateAPISettings(context.Context, *connect.Request[v1.UpdateAPISettingsRequest]) (*connect.Response[v1.UpdateAPISettingsResponse], error)
	// Regenerate API key
	RegenerateAPIKey(context.Context, *connect.Request[v1.RegenerateAPIKeyRequest]) (*connect.Response[v1.RegenerateAPIKeyResponse], error)
	// Get advanced settings
	GetAdvancedSettings(context.Context, *connect.Request[v1.GetAdvancedSettingsRequest]) (*connect.Response[v1.GetAdvancedSettingsResponse], error)
	// Update advanced settings
	UpdateAdvancedSettings(context.Context, *connect.Request[v1.UpdateAdvancedSettingsRequest]) (*connect.Response[v1.UpdateAdvancedSettingsResponse], error)
	// Export all data
	ExportData(context.Context, *connect.Request[v1.ExportDataRequest]) (*connect.Response[v1.ExportDataResponse], error)
	// Delete all data (danger zone)
	DeleteAllData(context.Context, *connect.Request[v1.DeleteAllDataRequest]) (*connect.Response[v1.DeleteAllDataResponse], error)
}

// NewSettingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingsServiceHandler(svc SettingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	settingsServiceMethods := v1.File_fleetd_v1_settings_proto.Services().ByName("SettingsService").Methods()
	settingsServiceGetOrganizationSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceGetOrganizationSettingsProcedure,
		svc.GetOrganizationSettings,
		connect.WithSchema(settingsServiceMethods.ByName("GetOrganizationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateOrganizationSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateOrganizationSettingsProcedure,
		svc.UpdateOrganizationSettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateOrganizationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceGetSecuritySettingsHandler := connect.NewUnaryHandler(
		SettingsServiceGetSecuritySettingsProcedure,
		svc.GetSecuritySettings,
		connect.WithSchema(settingsServiceMethods.ByName("GetSecuritySettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateSecuritySettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateSecuritySettingsProcedure,
		svc.UpdateSecuritySettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateSecuritySettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceGetNotificationSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceGetNotificationSettingsProcedure,
		svc.GetNotificationSettings,
		connect.WithSchema(settingsServiceMethods.ByName("GetNotificationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateNotificationSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateNotificationSettingsProcedure,
		svc.UpdateNotificationSettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateNotificationSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceGetAPISettingsHandler := connect.NewUnaryHandler(
		SettingsServiceGetAPISettingsProcedure,
		svc.GetAPISettings,
		connect.WithSchema(settingsServiceMethods.ByName("GetAPISettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateAPISettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateAPISettingsProcedure,
		svc.UpdateAPISettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateAPISettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceRegenerateAPIKeyHandler := connect.NewUnaryHandler(
		SettingsServiceRegenerateAPIKeyProcedure,
		svc.RegenerateAPIKey,
		connect.WithSchema(settingsServiceMethods.ByName("RegenerateAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceGetAdvancedSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceGetAdvancedSettingsProcedure,
		svc.GetAdvancedSettings,
		connect.WithSchema(settingsServiceMethods.ByName("GetAdvancedSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceUpdateAdvancedSettingsHandler := connect.NewUnaryHandler(
		SettingsServiceUpdateAdvancedSettingsProcedure,
		svc.UpdateAdvancedSettings,
		connect.WithSchema(settingsServiceMethods.ByName("UpdateAdvancedSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceExportDataHandler := connect.NewUnaryHandler(
		SettingsServiceExportDataProcedure,
		svc.ExportData,
		connect.WithSchema(settingsServiceMethods.ByName("ExportData")),
		connect.WithHandlerOptions(opts...),
	)
	settingsServiceDeleteAllDataHandler := connect.NewUnaryHandler(
		SettingsServiceDeleteAllDataProcedure,
		svc.DeleteAllData,
		connect.WithSchema(settingsServiceMethods.ByName("DeleteAllData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.SettingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingsServiceGetOrganizationSettingsProcedure:
			settingsServiceGetOrganizationSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateOrganizationSettingsProcedure:
			settingsServiceUpdateOrganizationSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceGetSecuritySettingsProcedure:
			settingsServiceGetSecuritySettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateSecuritySettingsProcedure:
			settingsServiceUpdateSecuritySettingsHandler.ServeHTTP(w, r)
		case SettingsServiceGetNotificationSettingsProcedure:
			settingsServiceGetNotificationSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateNotificationSettingsProcedure:
			settingsServiceUpdateNotificationSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceGetAPISettingsProcedure:
			settingsServiceGetAPISettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateAPISettingsProcedure:
			settingsServiceUpdateAPISettingsHandler.ServeHTTP(w, r)
		case SettingsServiceRegenerateAPIKeyProcedure:
			settingsServiceRegenerateAPIKeyHandler.ServeHTTP(w, r)
		case SettingsServiceGetAdvancedSettingsProcedure:
			settingsServiceGetAdvancedSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceUpdateAdvancedSettingsProcedure:
			settingsServiceUpdateAdvancedSettingsHandler.ServeHTTP(w, r)
		case SettingsServiceExportDataProcedure:
			settingsServiceExportDataHandler.ServeHTTP(w, r)
		case SettingsServiceDeleteAllDataProcedure:
			settingsServiceDeleteAllDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingsServiceHandler struct{}

func (UnimplementedSettingsServiceHandler) GetOrganizationSettings(context.Context, *connect.Request[v1.GetOrganizationSettingsRequest]) (*connect.Response[v1.GetOrganizationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.GetOrganizationSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateOrganizationSettings(context.Context, *connect.Request[v1.UpdateOrganizationSettingsRequest]) (*connect.Response[v1.UpdateOrganizationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.UpdateOrganizationSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) GetSecuritySettings(context.Context, *connect.Request[v1.GetSecuritySettingsRequest]) (*connect.Response[v1.GetSecuritySettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.GetSecuritySettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateSecuritySettings(context.Context, *connect.Request[v1.UpdateSecuritySettingsRequest]) (*connect.Response[v1.UpdateSecuritySettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.UpdateSecuritySettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) GetNotificationSettings(context.Context, *connect.Request[v1.GetNotificationSettingsRequest]) (*connect.Response[v1.GetNotificationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.GetNotificationSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateNotificationSettings(context.Context, *connect.Request[v1.UpdateNotificationSettingsRequest]) (*connect.Response[v1.UpdateNotificationSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.UpdateNotificationSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) GetAPISettings(context.Context, *connect.Request[v1.GetAPISettingsRequest]) (*connect.Response[v1.GetAPISettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.GetAPISettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateAPISettings(context.Context, *connect.Request[v1.UpdateAPISettingsRequest]) (*connect.Response[v1.UpdateAPISettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.UpdateAPISettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) RegenerateAPIKey(context.Context, *connect.Request[v1.RegenerateAPIKeyRequest]) (*connect.Response[v1.RegenerateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.RegenerateAPIKey is not implemented"))
}

func (UnimplementedSettingsServiceHandler) GetAdvancedSettings(context.Context, *connect.Request[v1.GetAdvancedSettingsRequest]) (*connect.Response[v1.GetAdvancedSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.GetAdvancedSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) UpdateAdvancedSettings(context.Context, *connect.Request[v1.UpdateAdvancedSettingsRequest]) (*connect.Response[v1.UpdateAdvancedSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.UpdateAdvancedSettings is not implemented"))
}

func (UnimplementedSettingsServiceHandler) ExportData(context.Context, *connect.Request[v1.ExportDataRequest]) (*connect.Response[v1.ExportDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.ExportData is not implemented"))
}

func (UnimplementedSettingsServiceHandler) DeleteAllData(context.Context, *connect.Request[v1.DeleteAllDataRequest]) (*connect.Response[v1.DeleteAllDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SettingsService.DeleteAllData is not implemented"))
}
