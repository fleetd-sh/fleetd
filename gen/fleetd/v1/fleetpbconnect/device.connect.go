// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/device.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "fleetd.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceRegisterProcedure is the fully-qualified name of the DeviceService's Register RPC.
	DeviceServiceRegisterProcedure = "/fleetd.v1.DeviceService/Register"
	// DeviceServiceHeartbeatProcedure is the fully-qualified name of the DeviceService's Heartbeat RPC.
	DeviceServiceHeartbeatProcedure = "/fleetd.v1.DeviceService/Heartbeat"
	// DeviceServiceReportStatusProcedure is the fully-qualified name of the DeviceService's
	// ReportStatus RPC.
	DeviceServiceReportStatusProcedure = "/fleetd.v1.DeviceService/ReportStatus"
	// DeviceServiceGetDeviceProcedure is the fully-qualified name of the DeviceService's GetDevice RPC.
	DeviceServiceGetDeviceProcedure = "/fleetd.v1.DeviceService/GetDevice"
	// DeviceServiceListDevicesProcedure is the fully-qualified name of the DeviceService's ListDevices
	// RPC.
	DeviceServiceListDevicesProcedure = "/fleetd.v1.DeviceService/ListDevices"
	// DeviceServiceDeleteDeviceProcedure is the fully-qualified name of the DeviceService's
	// DeleteDevice RPC.
	DeviceServiceDeleteDeviceProcedure = "/fleetd.v1.DeviceService/DeleteDevice"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deviceServiceServiceDescriptor            = v1.File_fleetd_v1_device_proto.Services().ByName("DeviceService")
	deviceServiceRegisterMethodDescriptor     = deviceServiceServiceDescriptor.Methods().ByName("Register")
	deviceServiceHeartbeatMethodDescriptor    = deviceServiceServiceDescriptor.Methods().ByName("Heartbeat")
	deviceServiceReportStatusMethodDescriptor = deviceServiceServiceDescriptor.Methods().ByName("ReportStatus")
	deviceServiceGetDeviceMethodDescriptor    = deviceServiceServiceDescriptor.Methods().ByName("GetDevice")
	deviceServiceListDevicesMethodDescriptor  = deviceServiceServiceDescriptor.Methods().ByName("ListDevices")
	deviceServiceDeleteDeviceMethodDescriptor = deviceServiceServiceDescriptor.Methods().ByName("DeleteDevice")
)

// DeviceServiceClient is a client for the fleetd.v1.DeviceService service.
type DeviceServiceClient interface {
	// Register a new device with the fleet
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Send periodic heartbeat and receive pending actions
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// Update device status and metrics
	ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error)
	// Get a device by ID
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// List devices
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// Delete a device
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
}

// NewDeviceServiceClient constructs a client for the fleetd.v1.DeviceService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deviceServiceClient{
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+DeviceServiceRegisterProcedure,
			connect.WithSchema(deviceServiceRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+DeviceServiceHeartbeatProcedure,
			connect.WithSchema(deviceServiceHeartbeatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reportStatus: connect.NewClient[v1.ReportStatusRequest, v1.ReportStatusResponse](
			httpClient,
			baseURL+DeviceServiceReportStatusProcedure,
			connect.WithSchema(deviceServiceReportStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[v1.GetDeviceRequest, v1.GetDeviceResponse](
			httpClient,
			baseURL+DeviceServiceGetDeviceProcedure,
			connect.WithSchema(deviceServiceGetDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+DeviceServiceListDevicesProcedure,
			connect.WithSchema(deviceServiceListDevicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse](
			httpClient,
			baseURL+DeviceServiceDeleteDeviceProcedure,
			connect.WithSchema(deviceServiceDeleteDeviceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	register     *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
	heartbeat    *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	reportStatus *connect.Client[v1.ReportStatusRequest, v1.ReportStatusResponse]
	getDevice    *connect.Client[v1.GetDeviceRequest, v1.GetDeviceResponse]
	listDevices  *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	deleteDevice *connect.Client[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse]
}

// Register calls fleetd.v1.DeviceService.Register.
func (c *deviceServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Heartbeat calls fleetd.v1.DeviceService.Heartbeat.
func (c *deviceServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// ReportStatus calls fleetd.v1.DeviceService.ReportStatus.
func (c *deviceServiceClient) ReportStatus(ctx context.Context, req *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error) {
	return c.reportStatus.CallUnary(ctx, req)
}

// GetDevice calls fleetd.v1.DeviceService.GetDevice.
func (c *deviceServiceClient) GetDevice(ctx context.Context, req *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// ListDevices calls fleetd.v1.DeviceService.ListDevices.
func (c *deviceServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// DeleteDevice calls fleetd.v1.DeviceService.DeleteDevice.
func (c *deviceServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// DeviceServiceHandler is an implementation of the fleetd.v1.DeviceService service.
type DeviceServiceHandler interface {
	// Register a new device with the fleet
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
	// Send periodic heartbeat and receive pending actions
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// Update device status and metrics
	ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error)
	// Get a device by ID
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	// List devices
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	// Delete a device
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceRegisterHandler := connect.NewUnaryHandler(
		DeviceServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(deviceServiceRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceHeartbeatHandler := connect.NewUnaryHandler(
		DeviceServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(deviceServiceHeartbeatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceReportStatusHandler := connect.NewUnaryHandler(
		DeviceServiceReportStatusProcedure,
		svc.ReportStatus,
		connect.WithSchema(deviceServiceReportStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceGetDeviceHandler := connect.NewUnaryHandler(
		DeviceServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(deviceServiceGetDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceListDevicesHandler := connect.NewUnaryHandler(
		DeviceServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(deviceServiceListDevicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		DeviceServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(deviceServiceDeleteDeviceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceRegisterProcedure:
			deviceServiceRegisterHandler.ServeHTTP(w, r)
		case DeviceServiceHeartbeatProcedure:
			deviceServiceHeartbeatHandler.ServeHTTP(w, r)
		case DeviceServiceReportStatusProcedure:
			deviceServiceReportStatusHandler.ServeHTTP(w, r)
		case DeviceServiceGetDeviceProcedure:
			deviceServiceGetDeviceHandler.ServeHTTP(w, r)
		case DeviceServiceListDevicesProcedure:
			deviceServiceListDevicesHandler.ServeHTTP(w, r)
		case DeviceServiceDeleteDeviceProcedure:
			deviceServiceDeleteDeviceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.Register is not implemented"))
}

func (UnimplementedDeviceServiceHandler) Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.Heartbeat is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ReportStatus(context.Context, *connect.Request[v1.ReportStatusRequest]) (*connect.Response[v1.ReportStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.ReportStatus is not implemented"))
}

func (UnimplementedDeviceServiceHandler) GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.GetDevice is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.ListDevices is not implemented"))
}

func (UnimplementedDeviceServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.DeviceService.DeleteDevice is not implemented"))
}
