// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/fleet.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FleetServiceName is the fully-qualified name of the FleetService service.
	FleetServiceName = "fleetd.v1.FleetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FleetServiceListFleetsProcedure is the fully-qualified name of the FleetService's ListFleets RPC.
	FleetServiceListFleetsProcedure = "/fleetd.v1.FleetService/ListFleets"
	// FleetServiceGetFleetProcedure is the fully-qualified name of the FleetService's GetFleet RPC.
	FleetServiceGetFleetProcedure = "/fleetd.v1.FleetService/GetFleet"
	// FleetServiceCreateFleetProcedure is the fully-qualified name of the FleetService's CreateFleet
	// RPC.
	FleetServiceCreateFleetProcedure = "/fleetd.v1.FleetService/CreateFleet"
	// FleetServiceUpdateFleetProcedure is the fully-qualified name of the FleetService's UpdateFleet
	// RPC.
	FleetServiceUpdateFleetProcedure = "/fleetd.v1.FleetService/UpdateFleet"
	// FleetServiceDeleteFleetProcedure is the fully-qualified name of the FleetService's DeleteFleet
	// RPC.
	FleetServiceDeleteFleetProcedure = "/fleetd.v1.FleetService/DeleteFleet"
	// FleetServiceGetDeviceLogsProcedure is the fully-qualified name of the FleetService's
	// GetDeviceLogs RPC.
	FleetServiceGetDeviceLogsProcedure = "/fleetd.v1.FleetService/GetDeviceLogs"
)

// FleetServiceClient is a client for the fleetd.v1.FleetService service.
type FleetServiceClient interface {
	// List all fleets
	ListFleets(context.Context, *connect.Request[v1.ListFleetsRequest]) (*connect.Response[v1.ListFleetsResponse], error)
	// Get a specific fleet
	GetFleet(context.Context, *connect.Request[v1.GetFleetRequest]) (*connect.Response[v1.GetFleetResponse], error)
	// Create a new fleet
	CreateFleet(context.Context, *connect.Request[v1.CreateFleetRequest]) (*connect.Response[v1.CreateFleetResponse], error)
	// Update a fleet
	UpdateFleet(context.Context, *connect.Request[v1.UpdateFleetRequest]) (*connect.Response[v1.UpdateFleetResponse], error)
	// Delete a fleet
	DeleteFleet(context.Context, *connect.Request[v1.DeleteFleetRequest]) (*connect.Response[v1.DeleteFleetResponse], error)
	// Get logs for a specific device in the fleet
	GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error)
}

// NewFleetServiceClient constructs a client for the fleetd.v1.FleetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFleetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FleetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fleetServiceMethods := v1.File_fleetd_v1_fleet_proto.Services().ByName("FleetService").Methods()
	return &fleetServiceClient{
		listFleets: connect.NewClient[v1.ListFleetsRequest, v1.ListFleetsResponse](
			httpClient,
			baseURL+FleetServiceListFleetsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("ListFleets")),
			connect.WithClientOptions(opts...),
		),
		getFleet: connect.NewClient[v1.GetFleetRequest, v1.GetFleetResponse](
			httpClient,
			baseURL+FleetServiceGetFleetProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetFleet")),
			connect.WithClientOptions(opts...),
		),
		createFleet: connect.NewClient[v1.CreateFleetRequest, v1.CreateFleetResponse](
			httpClient,
			baseURL+FleetServiceCreateFleetProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("CreateFleet")),
			connect.WithClientOptions(opts...),
		),
		updateFleet: connect.NewClient[v1.UpdateFleetRequest, v1.UpdateFleetResponse](
			httpClient,
			baseURL+FleetServiceUpdateFleetProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("UpdateFleet")),
			connect.WithClientOptions(opts...),
		),
		deleteFleet: connect.NewClient[v1.DeleteFleetRequest, v1.DeleteFleetResponse](
			httpClient,
			baseURL+FleetServiceDeleteFleetProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("DeleteFleet")),
			connect.WithClientOptions(opts...),
		),
		getDeviceLogs: connect.NewClient[v1.GetDeviceLogsRequest, v1.GetDeviceLogsResponse](
			httpClient,
			baseURL+FleetServiceGetDeviceLogsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetDeviceLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fleetServiceClient implements FleetServiceClient.
type fleetServiceClient struct {
	listFleets    *connect.Client[v1.ListFleetsRequest, v1.ListFleetsResponse]
	getFleet      *connect.Client[v1.GetFleetRequest, v1.GetFleetResponse]
	createFleet   *connect.Client[v1.CreateFleetRequest, v1.CreateFleetResponse]
	updateFleet   *connect.Client[v1.UpdateFleetRequest, v1.UpdateFleetResponse]
	deleteFleet   *connect.Client[v1.DeleteFleetRequest, v1.DeleteFleetResponse]
	getDeviceLogs *connect.Client[v1.GetDeviceLogsRequest, v1.GetDeviceLogsResponse]
}

// ListFleets calls fleetd.v1.FleetService.ListFleets.
func (c *fleetServiceClient) ListFleets(ctx context.Context, req *connect.Request[v1.ListFleetsRequest]) (*connect.Response[v1.ListFleetsResponse], error) {
	return c.listFleets.CallUnary(ctx, req)
}

// GetFleet calls fleetd.v1.FleetService.GetFleet.
func (c *fleetServiceClient) GetFleet(ctx context.Context, req *connect.Request[v1.GetFleetRequest]) (*connect.Response[v1.GetFleetResponse], error) {
	return c.getFleet.CallUnary(ctx, req)
}

// CreateFleet calls fleetd.v1.FleetService.CreateFleet.
func (c *fleetServiceClient) CreateFleet(ctx context.Context, req *connect.Request[v1.CreateFleetRequest]) (*connect.Response[v1.CreateFleetResponse], error) {
	return c.createFleet.CallUnary(ctx, req)
}

// UpdateFleet calls fleetd.v1.FleetService.UpdateFleet.
func (c *fleetServiceClient) UpdateFleet(ctx context.Context, req *connect.Request[v1.UpdateFleetRequest]) (*connect.Response[v1.UpdateFleetResponse], error) {
	return c.updateFleet.CallUnary(ctx, req)
}

// DeleteFleet calls fleetd.v1.FleetService.DeleteFleet.
func (c *fleetServiceClient) DeleteFleet(ctx context.Context, req *connect.Request[v1.DeleteFleetRequest]) (*connect.Response[v1.DeleteFleetResponse], error) {
	return c.deleteFleet.CallUnary(ctx, req)
}

// GetDeviceLogs calls fleetd.v1.FleetService.GetDeviceLogs.
func (c *fleetServiceClient) GetDeviceLogs(ctx context.Context, req *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error) {
	return c.getDeviceLogs.CallUnary(ctx, req)
}

// FleetServiceHandler is an implementation of the fleetd.v1.FleetService service.
type FleetServiceHandler interface {
	// List all fleets
	ListFleets(context.Context, *connect.Request[v1.ListFleetsRequest]) (*connect.Response[v1.ListFleetsResponse], error)
	// Get a specific fleet
	GetFleet(context.Context, *connect.Request[v1.GetFleetRequest]) (*connect.Response[v1.GetFleetResponse], error)
	// Create a new fleet
	CreateFleet(context.Context, *connect.Request[v1.CreateFleetRequest]) (*connect.Response[v1.CreateFleetResponse], error)
	// Update a fleet
	UpdateFleet(context.Context, *connect.Request[v1.UpdateFleetRequest]) (*connect.Response[v1.UpdateFleetResponse], error)
	// Delete a fleet
	DeleteFleet(context.Context, *connect.Request[v1.DeleteFleetRequest]) (*connect.Response[v1.DeleteFleetResponse], error)
	// Get logs for a specific device in the fleet
	GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error)
}

// NewFleetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFleetServiceHandler(svc FleetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fleetServiceMethods := v1.File_fleetd_v1_fleet_proto.Services().ByName("FleetService").Methods()
	fleetServiceListFleetsHandler := connect.NewUnaryHandler(
		FleetServiceListFleetsProcedure,
		svc.ListFleets,
		connect.WithSchema(fleetServiceMethods.ByName("ListFleets")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetFleetHandler := connect.NewUnaryHandler(
		FleetServiceGetFleetProcedure,
		svc.GetFleet,
		connect.WithSchema(fleetServiceMethods.ByName("GetFleet")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceCreateFleetHandler := connect.NewUnaryHandler(
		FleetServiceCreateFleetProcedure,
		svc.CreateFleet,
		connect.WithSchema(fleetServiceMethods.ByName("CreateFleet")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceUpdateFleetHandler := connect.NewUnaryHandler(
		FleetServiceUpdateFleetProcedure,
		svc.UpdateFleet,
		connect.WithSchema(fleetServiceMethods.ByName("UpdateFleet")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceDeleteFleetHandler := connect.NewUnaryHandler(
		FleetServiceDeleteFleetProcedure,
		svc.DeleteFleet,
		connect.WithSchema(fleetServiceMethods.ByName("DeleteFleet")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeviceLogsHandler := connect.NewUnaryHandler(
		FleetServiceGetDeviceLogsProcedure,
		svc.GetDeviceLogs,
		connect.WithSchema(fleetServiceMethods.ByName("GetDeviceLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.FleetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FleetServiceListFleetsProcedure:
			fleetServiceListFleetsHandler.ServeHTTP(w, r)
		case FleetServiceGetFleetProcedure:
			fleetServiceGetFleetHandler.ServeHTTP(w, r)
		case FleetServiceCreateFleetProcedure:
			fleetServiceCreateFleetHandler.ServeHTTP(w, r)
		case FleetServiceUpdateFleetProcedure:
			fleetServiceUpdateFleetHandler.ServeHTTP(w, r)
		case FleetServiceDeleteFleetProcedure:
			fleetServiceDeleteFleetHandler.ServeHTTP(w, r)
		case FleetServiceGetDeviceLogsProcedure:
			fleetServiceGetDeviceLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFleetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFleetServiceHandler struct{}

func (UnimplementedFleetServiceHandler) ListFleets(context.Context, *connect.Request[v1.ListFleetsRequest]) (*connect.Response[v1.ListFleetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.ListFleets is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetFleet(context.Context, *connect.Request[v1.GetFleetRequest]) (*connect.Response[v1.GetFleetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.GetFleet is not implemented"))
}

func (UnimplementedFleetServiceHandler) CreateFleet(context.Context, *connect.Request[v1.CreateFleetRequest]) (*connect.Response[v1.CreateFleetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.CreateFleet is not implemented"))
}

func (UnimplementedFleetServiceHandler) UpdateFleet(context.Context, *connect.Request[v1.UpdateFleetRequest]) (*connect.Response[v1.UpdateFleetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.UpdateFleet is not implemented"))
}

func (UnimplementedFleetServiceHandler) DeleteFleet(context.Context, *connect.Request[v1.DeleteFleetRequest]) (*connect.Response[v1.DeleteFleetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.DeleteFleet is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDeviceLogs(context.Context, *connect.Request[v1.GetDeviceLogsRequest]) (*connect.Response[v1.GetDeviceLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.FleetService.GetDeviceLogs is not implemented"))
}
