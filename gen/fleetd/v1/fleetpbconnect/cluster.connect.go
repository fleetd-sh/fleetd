// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/cluster.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "fleetd.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceCreateClusterProcedure is the fully-qualified name of the ClusterService's
	// CreateCluster RPC.
	ClusterServiceCreateClusterProcedure = "/fleetd.v1.ClusterService/CreateCluster"
	// ClusterServiceJoinClusterProcedure is the fully-qualified name of the ClusterService's
	// JoinCluster RPC.
	ClusterServiceJoinClusterProcedure = "/fleetd.v1.ClusterService/JoinCluster"
	// ClusterServiceGetClusterProcedure is the fully-qualified name of the ClusterService's GetCluster
	// RPC.
	ClusterServiceGetClusterProcedure = "/fleetd.v1.ClusterService/GetCluster"
	// ClusterServiceListClustersProcedure is the fully-qualified name of the ClusterService's
	// ListClusters RPC.
	ClusterServiceListClustersProcedure = "/fleetd.v1.ClusterService/ListClusters"
	// ClusterServiceApplyWorkloadProcedure is the fully-qualified name of the ClusterService's
	// ApplyWorkload RPC.
	ClusterServiceApplyWorkloadProcedure = "/fleetd.v1.ClusterService/ApplyWorkload"
	// ClusterServiceGetNodeStatusProcedure is the fully-qualified name of the ClusterService's
	// GetNodeStatus RPC.
	ClusterServiceGetNodeStatusProcedure = "/fleetd.v1.ClusterService/GetNodeStatus"
	// ClusterServiceRemoveNodeProcedure is the fully-qualified name of the ClusterService's RemoveNode
	// RPC.
	ClusterServiceRemoveNodeProcedure = "/fleetd.v1.ClusterService/RemoveNode"
)

// ClusterServiceClient is a client for the fleetd.v1.ClusterService service.
type ClusterServiceClient interface {
	// Create a new k3s cluster
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// Join a device to an existing cluster
	JoinCluster(context.Context, *connect.Request[v1.JoinClusterRequest]) (*connect.Response[v1.JoinClusterResponse], error)
	// Get cluster information
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// List all clusters
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Apply a workload to a cluster
	ApplyWorkload(context.Context, *connect.Request[v1.ApplyWorkloadRequest]) (*connect.Response[v1.ApplyWorkloadResponse], error)
	// Get cluster node status
	GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error)
	// Remove a node from cluster
	RemoveNode(context.Context, *connect.Request[v1.RemoveNodeRequest]) (*connect.Response[v1.RemoveNodeResponse], error)
}

// NewClusterServiceClient constructs a client for the fleetd.v1.ClusterService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := v1.File_fleetd_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.CreateClusterResponse](
			httpClient,
			baseURL+ClusterServiceCreateClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		joinCluster: connect.NewClient[v1.JoinClusterRequest, v1.JoinClusterResponse](
			httpClient,
			baseURL+ClusterServiceJoinClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("JoinCluster")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+ClusterServiceGetClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+ClusterServiceListClustersProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		applyWorkload: connect.NewClient[v1.ApplyWorkloadRequest, v1.ApplyWorkloadResponse](
			httpClient,
			baseURL+ClusterServiceApplyWorkloadProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ApplyWorkload")),
			connect.WithClientOptions(opts...),
		),
		getNodeStatus: connect.NewClient[v1.GetNodeStatusRequest, v1.GetNodeStatusResponse](
			httpClient,
			baseURL+ClusterServiceGetNodeStatusProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetNodeStatus")),
			connect.WithClientOptions(opts...),
		),
		removeNode: connect.NewClient[v1.RemoveNodeRequest, v1.RemoveNodeResponse](
			httpClient,
			baseURL+ClusterServiceRemoveNodeProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("RemoveNode")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	createCluster *connect.Client[v1.CreateClusterRequest, v1.CreateClusterResponse]
	joinCluster   *connect.Client[v1.JoinClusterRequest, v1.JoinClusterResponse]
	getCluster    *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	listClusters  *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	applyWorkload *connect.Client[v1.ApplyWorkloadRequest, v1.ApplyWorkloadResponse]
	getNodeStatus *connect.Client[v1.GetNodeStatusRequest, v1.GetNodeStatusResponse]
	removeNode    *connect.Client[v1.RemoveNodeRequest, v1.RemoveNodeResponse]
}

// CreateCluster calls fleetd.v1.ClusterService.CreateCluster.
func (c *clusterServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// JoinCluster calls fleetd.v1.ClusterService.JoinCluster.
func (c *clusterServiceClient) JoinCluster(ctx context.Context, req *connect.Request[v1.JoinClusterRequest]) (*connect.Response[v1.JoinClusterResponse], error) {
	return c.joinCluster.CallUnary(ctx, req)
}

// GetCluster calls fleetd.v1.ClusterService.GetCluster.
func (c *clusterServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// ListClusters calls fleetd.v1.ClusterService.ListClusters.
func (c *clusterServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// ApplyWorkload calls fleetd.v1.ClusterService.ApplyWorkload.
func (c *clusterServiceClient) ApplyWorkload(ctx context.Context, req *connect.Request[v1.ApplyWorkloadRequest]) (*connect.Response[v1.ApplyWorkloadResponse], error) {
	return c.applyWorkload.CallUnary(ctx, req)
}

// GetNodeStatus calls fleetd.v1.ClusterService.GetNodeStatus.
func (c *clusterServiceClient) GetNodeStatus(ctx context.Context, req *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error) {
	return c.getNodeStatus.CallUnary(ctx, req)
}

// RemoveNode calls fleetd.v1.ClusterService.RemoveNode.
func (c *clusterServiceClient) RemoveNode(ctx context.Context, req *connect.Request[v1.RemoveNodeRequest]) (*connect.Response[v1.RemoveNodeResponse], error) {
	return c.removeNode.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the fleetd.v1.ClusterService service.
type ClusterServiceHandler interface {
	// Create a new k3s cluster
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	// Join a device to an existing cluster
	JoinCluster(context.Context, *connect.Request[v1.JoinClusterRequest]) (*connect.Response[v1.JoinClusterResponse], error)
	// Get cluster information
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	// List all clusters
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	// Apply a workload to a cluster
	ApplyWorkload(context.Context, *connect.Request[v1.ApplyWorkloadRequest]) (*connect.Response[v1.ApplyWorkloadResponse], error)
	// Get cluster node status
	GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error)
	// Remove a node from cluster
	RemoveNode(context.Context, *connect.Request[v1.RemoveNodeRequest]) (*connect.Response[v1.RemoveNodeResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := v1.File_fleetd_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	clusterServiceCreateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceJoinClusterHandler := connect.NewUnaryHandler(
		ClusterServiceJoinClusterProcedure,
		svc.JoinCluster,
		connect.WithSchema(clusterServiceMethods.ByName("JoinCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceListClustersHandler := connect.NewUnaryHandler(
		ClusterServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceApplyWorkloadHandler := connect.NewUnaryHandler(
		ClusterServiceApplyWorkloadProcedure,
		svc.ApplyWorkload,
		connect.WithSchema(clusterServiceMethods.ByName("ApplyWorkload")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetNodeStatusHandler := connect.NewUnaryHandler(
		ClusterServiceGetNodeStatusProcedure,
		svc.GetNodeStatus,
		connect.WithSchema(clusterServiceMethods.ByName("GetNodeStatus")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceRemoveNodeHandler := connect.NewUnaryHandler(
		ClusterServiceRemoveNodeProcedure,
		svc.RemoveNode,
		connect.WithSchema(clusterServiceMethods.ByName("RemoveNode")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceCreateClusterProcedure:
			clusterServiceCreateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceJoinClusterProcedure:
			clusterServiceJoinClusterHandler.ServeHTTP(w, r)
		case ClusterServiceGetClusterProcedure:
			clusterServiceGetClusterHandler.ServeHTTP(w, r)
		case ClusterServiceListClustersProcedure:
			clusterServiceListClustersHandler.ServeHTTP(w, r)
		case ClusterServiceApplyWorkloadProcedure:
			clusterServiceApplyWorkloadHandler.ServeHTTP(w, r)
		case ClusterServiceGetNodeStatusProcedure:
			clusterServiceGetNodeStatusHandler.ServeHTTP(w, r)
		case ClusterServiceRemoveNodeProcedure:
			clusterServiceRemoveNodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.CreateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) JoinCluster(context.Context, *connect.Request[v1.JoinClusterRequest]) (*connect.Response[v1.JoinClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.JoinCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.GetCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.ListClusters is not implemented"))
}

func (UnimplementedClusterServiceHandler) ApplyWorkload(context.Context, *connect.Request[v1.ApplyWorkloadRequest]) (*connect.Response[v1.ApplyWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.ApplyWorkload is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetNodeStatus(context.Context, *connect.Request[v1.GetNodeStatusRequest]) (*connect.Response[v1.GetNodeStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.GetNodeStatus is not implemented"))
}

func (UnimplementedClusterServiceHandler) RemoveNode(context.Context, *connect.Request[v1.RemoveNodeRequest]) (*connect.Response[v1.RemoveNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.ClusterService.RemoveNode is not implemented"))
}
