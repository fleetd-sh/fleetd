// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fleetd/v1/sync.proto

package fleetpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/fleetd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "fleetd.v1.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceSyncMetricsProcedure is the fully-qualified name of the SyncService's SyncMetrics RPC.
	SyncServiceSyncMetricsProcedure = "/fleetd.v1.SyncService/SyncMetrics"
	// SyncServiceSyncLogsProcedure is the fully-qualified name of the SyncService's SyncLogs RPC.
	SyncServiceSyncLogsProcedure = "/fleetd.v1.SyncService/SyncLogs"
	// SyncServiceGetSyncConfigProcedure is the fully-qualified name of the SyncService's GetSyncConfig
	// RPC.
	SyncServiceGetSyncConfigProcedure = "/fleetd.v1.SyncService/GetSyncConfig"
	// SyncServiceStreamSyncProcedure is the fully-qualified name of the SyncService's StreamSync RPC.
	SyncServiceStreamSyncProcedure = "/fleetd.v1.SyncService/StreamSync"
)

// SyncServiceClient is a client for the fleetd.v1.SyncService service.
type SyncServiceClient interface {
	// SyncMetrics uploads metrics from device to server
	SyncMetrics(context.Context, *connect.Request[v1.SyncMetricsRequest]) (*connect.Response[v1.SyncMetricsResponse], error)
	// SyncLogs uploads logs from device to server
	SyncLogs(context.Context, *connect.Request[v1.SyncLogsRequest]) (*connect.Response[v1.SyncLogsResponse], error)
	// GetSyncConfig gets updated sync configuration for device
	GetSyncConfig(context.Context, *connect.Request[v1.GetSyncConfigRequest]) (*connect.Response[v1.GetSyncConfigResponse], error)
	// StreamSync establishes bidirectional sync stream
	StreamSync(context.Context) *connect.BidiStreamForClient[v1.StreamSyncRequest, v1.StreamSyncResponse]
}

// NewSyncServiceClient constructs a client for the fleetd.v1.SyncService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	syncServiceMethods := v1.File_fleetd_v1_sync_proto.Services().ByName("SyncService").Methods()
	return &syncServiceClient{
		syncMetrics: connect.NewClient[v1.SyncMetricsRequest, v1.SyncMetricsResponse](
			httpClient,
			baseURL+SyncServiceSyncMetricsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("SyncMetrics")),
			connect.WithClientOptions(opts...),
		),
		syncLogs: connect.NewClient[v1.SyncLogsRequest, v1.SyncLogsResponse](
			httpClient,
			baseURL+SyncServiceSyncLogsProcedure,
			connect.WithSchema(syncServiceMethods.ByName("SyncLogs")),
			connect.WithClientOptions(opts...),
		),
		getSyncConfig: connect.NewClient[v1.GetSyncConfigRequest, v1.GetSyncConfigResponse](
			httpClient,
			baseURL+SyncServiceGetSyncConfigProcedure,
			connect.WithSchema(syncServiceMethods.ByName("GetSyncConfig")),
			connect.WithClientOptions(opts...),
		),
		streamSync: connect.NewClient[v1.StreamSyncRequest, v1.StreamSyncResponse](
			httpClient,
			baseURL+SyncServiceStreamSyncProcedure,
			connect.WithSchema(syncServiceMethods.ByName("StreamSync")),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	syncMetrics   *connect.Client[v1.SyncMetricsRequest, v1.SyncMetricsResponse]
	syncLogs      *connect.Client[v1.SyncLogsRequest, v1.SyncLogsResponse]
	getSyncConfig *connect.Client[v1.GetSyncConfigRequest, v1.GetSyncConfigResponse]
	streamSync    *connect.Client[v1.StreamSyncRequest, v1.StreamSyncResponse]
}

// SyncMetrics calls fleetd.v1.SyncService.SyncMetrics.
func (c *syncServiceClient) SyncMetrics(ctx context.Context, req *connect.Request[v1.SyncMetricsRequest]) (*connect.Response[v1.SyncMetricsResponse], error) {
	return c.syncMetrics.CallUnary(ctx, req)
}

// SyncLogs calls fleetd.v1.SyncService.SyncLogs.
func (c *syncServiceClient) SyncLogs(ctx context.Context, req *connect.Request[v1.SyncLogsRequest]) (*connect.Response[v1.SyncLogsResponse], error) {
	return c.syncLogs.CallUnary(ctx, req)
}

// GetSyncConfig calls fleetd.v1.SyncService.GetSyncConfig.
func (c *syncServiceClient) GetSyncConfig(ctx context.Context, req *connect.Request[v1.GetSyncConfigRequest]) (*connect.Response[v1.GetSyncConfigResponse], error) {
	return c.getSyncConfig.CallUnary(ctx, req)
}

// StreamSync calls fleetd.v1.SyncService.StreamSync.
func (c *syncServiceClient) StreamSync(ctx context.Context) *connect.BidiStreamForClient[v1.StreamSyncRequest, v1.StreamSyncResponse] {
	return c.streamSync.CallBidiStream(ctx)
}

// SyncServiceHandler is an implementation of the fleetd.v1.SyncService service.
type SyncServiceHandler interface {
	// SyncMetrics uploads metrics from device to server
	SyncMetrics(context.Context, *connect.Request[v1.SyncMetricsRequest]) (*connect.Response[v1.SyncMetricsResponse], error)
	// SyncLogs uploads logs from device to server
	SyncLogs(context.Context, *connect.Request[v1.SyncLogsRequest]) (*connect.Response[v1.SyncLogsResponse], error)
	// GetSyncConfig gets updated sync configuration for device
	GetSyncConfig(context.Context, *connect.Request[v1.GetSyncConfigRequest]) (*connect.Response[v1.GetSyncConfigResponse], error)
	// StreamSync establishes bidirectional sync stream
	StreamSync(context.Context, *connect.BidiStream[v1.StreamSyncRequest, v1.StreamSyncResponse]) error
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceMethods := v1.File_fleetd_v1_sync_proto.Services().ByName("SyncService").Methods()
	syncServiceSyncMetricsHandler := connect.NewUnaryHandler(
		SyncServiceSyncMetricsProcedure,
		svc.SyncMetrics,
		connect.WithSchema(syncServiceMethods.ByName("SyncMetrics")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceSyncLogsHandler := connect.NewUnaryHandler(
		SyncServiceSyncLogsProcedure,
		svc.SyncLogs,
		connect.WithSchema(syncServiceMethods.ByName("SyncLogs")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetSyncConfigHandler := connect.NewUnaryHandler(
		SyncServiceGetSyncConfigProcedure,
		svc.GetSyncConfig,
		connect.WithSchema(syncServiceMethods.ByName("GetSyncConfig")),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceStreamSyncHandler := connect.NewBidiStreamHandler(
		SyncServiceStreamSyncProcedure,
		svc.StreamSync,
		connect.WithSchema(syncServiceMethods.ByName("StreamSync")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fleetd.v1.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceSyncMetricsProcedure:
			syncServiceSyncMetricsHandler.ServeHTTP(w, r)
		case SyncServiceSyncLogsProcedure:
			syncServiceSyncLogsHandler.ServeHTTP(w, r)
		case SyncServiceGetSyncConfigProcedure:
			syncServiceGetSyncConfigHandler.ServeHTTP(w, r)
		case SyncServiceStreamSyncProcedure:
			syncServiceStreamSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) SyncMetrics(context.Context, *connect.Request[v1.SyncMetricsRequest]) (*connect.Response[v1.SyncMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SyncService.SyncMetrics is not implemented"))
}

func (UnimplementedSyncServiceHandler) SyncLogs(context.Context, *connect.Request[v1.SyncLogsRequest]) (*connect.Response[v1.SyncLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SyncService.SyncLogs is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetSyncConfig(context.Context, *connect.Request[v1.GetSyncConfigRequest]) (*connect.Response[v1.GetSyncConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SyncService.GetSyncConfig is not implemented"))
}

func (UnimplementedSyncServiceHandler) StreamSync(context.Context, *connect.BidiStream[v1.StreamSyncRequest, v1.StreamSyncResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("fleetd.v1.SyncService.StreamSync is not implemented"))
}
