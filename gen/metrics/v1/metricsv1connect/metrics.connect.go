// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metrics/v1/metrics.proto

package metricsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/metrics/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetricsServiceName is the fully-qualified name of the MetricsService service.
	MetricsServiceName = "metrics.v1.MetricsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetricsServiceSendMetricsProcedure is the fully-qualified name of the MetricsService's
	// SendMetrics RPC.
	MetricsServiceSendMetricsProcedure = "/metrics.v1.MetricsService/SendMetrics"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	metricsServiceServiceDescriptor           = v1.File_metrics_v1_metrics_proto.Services().ByName("MetricsService")
	metricsServiceSendMetricsMethodDescriptor = metricsServiceServiceDescriptor.Methods().ByName("SendMetrics")
)

// MetricsServiceClient is a client for the metrics.v1.MetricsService service.
type MetricsServiceClient interface {
	SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error)
}

// NewMetricsServiceClient constructs a client for the metrics.v1.MetricsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetricsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metricsServiceClient{
		sendMetrics: connect.NewClient[v1.SendMetricsRequest, v1.SendMetricsResponse](
			httpClient,
			baseURL+MetricsServiceSendMetricsProcedure,
			connect.WithSchema(metricsServiceSendMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// metricsServiceClient implements MetricsServiceClient.
type metricsServiceClient struct {
	sendMetrics *connect.Client[v1.SendMetricsRequest, v1.SendMetricsResponse]
}

// SendMetrics calls metrics.v1.MetricsService.SendMetrics.
func (c *metricsServiceClient) SendMetrics(ctx context.Context, req *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error) {
	return c.sendMetrics.CallUnary(ctx, req)
}

// MetricsServiceHandler is an implementation of the metrics.v1.MetricsService service.
type MetricsServiceHandler interface {
	SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error)
}

// NewMetricsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsServiceHandler(svc MetricsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metricsServiceSendMetricsHandler := connect.NewUnaryHandler(
		MetricsServiceSendMetricsProcedure,
		svc.SendMetrics,
		connect.WithSchema(metricsServiceSendMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metrics.v1.MetricsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetricsServiceSendMetricsProcedure:
			metricsServiceSendMetricsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetricsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsServiceHandler struct{}

func (UnimplementedMetricsServiceHandler) SendMetrics(context.Context, *connect.Request[v1.SendMetricsRequest]) (*connect.Response[v1.SendMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metrics.v1.MetricsService.SendMetrics is not implemented"))
}
