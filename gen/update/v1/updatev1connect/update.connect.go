// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: update/v1/update.proto

package updatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/update/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateServiceName is the fully-qualified name of the UpdateService service.
	UpdateServiceName = "update.v1.UpdateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdateServiceCreateUpdatePackageProcedure is the fully-qualified name of the UpdateService's
	// CreateUpdatePackage RPC.
	UpdateServiceCreateUpdatePackageProcedure = "/update.v1.UpdateService/CreateUpdatePackage"
	// UpdateServiceGetAvailableUpdatesProcedure is the fully-qualified name of the UpdateService's
	// GetAvailableUpdates RPC.
	UpdateServiceGetAvailableUpdatesProcedure = "/update.v1.UpdateService/GetAvailableUpdates"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	updateServiceServiceDescriptor                   = v1.File_update_v1_update_proto.Services().ByName("UpdateService")
	updateServiceCreateUpdatePackageMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("CreateUpdatePackage")
	updateServiceGetAvailableUpdatesMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("GetAvailableUpdates")
)

// UpdateServiceClient is a client for the update.v1.UpdateService service.
type UpdateServiceClient interface {
	CreateUpdatePackage(context.Context, *connect.Request[v1.CreateUpdatePackageRequest]) (*connect.Response[v1.CreateUpdatePackageResponse], error)
	GetAvailableUpdates(context.Context, *connect.Request[v1.GetAvailableUpdatesRequest]) (*connect.Response[v1.GetAvailableUpdatesResponse], error)
}

// NewUpdateServiceClient constructs a client for the update.v1.UpdateService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &updateServiceClient{
		createUpdatePackage: connect.NewClient[v1.CreateUpdatePackageRequest, v1.CreateUpdatePackageResponse](
			httpClient,
			baseURL+UpdateServiceCreateUpdatePackageProcedure,
			connect.WithSchema(updateServiceCreateUpdatePackageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAvailableUpdates: connect.NewClient[v1.GetAvailableUpdatesRequest, v1.GetAvailableUpdatesResponse](
			httpClient,
			baseURL+UpdateServiceGetAvailableUpdatesProcedure,
			connect.WithSchema(updateServiceGetAvailableUpdatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateServiceClient implements UpdateServiceClient.
type updateServiceClient struct {
	createUpdatePackage *connect.Client[v1.CreateUpdatePackageRequest, v1.CreateUpdatePackageResponse]
	getAvailableUpdates *connect.Client[v1.GetAvailableUpdatesRequest, v1.GetAvailableUpdatesResponse]
}

// CreateUpdatePackage calls update.v1.UpdateService.CreateUpdatePackage.
func (c *updateServiceClient) CreateUpdatePackage(ctx context.Context, req *connect.Request[v1.CreateUpdatePackageRequest]) (*connect.Response[v1.CreateUpdatePackageResponse], error) {
	return c.createUpdatePackage.CallUnary(ctx, req)
}

// GetAvailableUpdates calls update.v1.UpdateService.GetAvailableUpdates.
func (c *updateServiceClient) GetAvailableUpdates(ctx context.Context, req *connect.Request[v1.GetAvailableUpdatesRequest]) (*connect.Response[v1.GetAvailableUpdatesResponse], error) {
	return c.getAvailableUpdates.CallUnary(ctx, req)
}

// UpdateServiceHandler is an implementation of the update.v1.UpdateService service.
type UpdateServiceHandler interface {
	CreateUpdatePackage(context.Context, *connect.Request[v1.CreateUpdatePackageRequest]) (*connect.Response[v1.CreateUpdatePackageResponse], error)
	GetAvailableUpdates(context.Context, *connect.Request[v1.GetAvailableUpdatesRequest]) (*connect.Response[v1.GetAvailableUpdatesResponse], error)
}

// NewUpdateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateServiceHandler(svc UpdateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateServiceCreateUpdatePackageHandler := connect.NewUnaryHandler(
		UpdateServiceCreateUpdatePackageProcedure,
		svc.CreateUpdatePackage,
		connect.WithSchema(updateServiceCreateUpdatePackageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	updateServiceGetAvailableUpdatesHandler := connect.NewUnaryHandler(
		UpdateServiceGetAvailableUpdatesProcedure,
		svc.GetAvailableUpdates,
		connect.WithSchema(updateServiceGetAvailableUpdatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/update.v1.UpdateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateServiceCreateUpdatePackageProcedure:
			updateServiceCreateUpdatePackageHandler.ServeHTTP(w, r)
		case UpdateServiceGetAvailableUpdatesProcedure:
			updateServiceGetAvailableUpdatesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateServiceHandler struct{}

func (UnimplementedUpdateServiceHandler) CreateUpdatePackage(context.Context, *connect.Request[v1.CreateUpdatePackageRequest]) (*connect.Response[v1.CreateUpdatePackageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("update.v1.UpdateService.CreateUpdatePackage is not implemented"))
}

func (UnimplementedUpdateServiceHandler) GetAvailableUpdates(context.Context, *connect.Request[v1.GetAvailableUpdatesRequest]) (*connect.Response[v1.GetAvailableUpdatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("update.v1.UpdateService.GetAvailableUpdates is not implemented"))
}
