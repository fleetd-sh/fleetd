// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/agent.proto

package agentpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonServiceName is the fully-qualified name of the DaemonService service.
	DaemonServiceName = "agent.v1.DaemonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonServiceDeployBinaryProcedure is the fully-qualified name of the DaemonService's
	// DeployBinary RPC.
	DaemonServiceDeployBinaryProcedure = "/agent.v1.DaemonService/DeployBinary"
	// DaemonServiceStartBinaryProcedure is the fully-qualified name of the DaemonService's StartBinary
	// RPC.
	DaemonServiceStartBinaryProcedure = "/agent.v1.DaemonService/StartBinary"
	// DaemonServiceStopBinaryProcedure is the fully-qualified name of the DaemonService's StopBinary
	// RPC.
	DaemonServiceStopBinaryProcedure = "/agent.v1.DaemonService/StopBinary"
	// DaemonServiceListBinariesProcedure is the fully-qualified name of the DaemonService's
	// ListBinaries RPC.
	DaemonServiceListBinariesProcedure = "/agent.v1.DaemonService/ListBinaries"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	daemonServiceServiceDescriptor            = v1.File_agent_v1_agent_proto.Services().ByName("DaemonService")
	daemonServiceDeployBinaryMethodDescriptor = daemonServiceServiceDescriptor.Methods().ByName("DeployBinary")
	daemonServiceStartBinaryMethodDescriptor  = daemonServiceServiceDescriptor.Methods().ByName("StartBinary")
	daemonServiceStopBinaryMethodDescriptor   = daemonServiceServiceDescriptor.Methods().ByName("StopBinary")
	daemonServiceListBinariesMethodDescriptor = daemonServiceServiceDescriptor.Methods().ByName("ListBinaries")
)

// DaemonServiceClient is a client for the agent.v1.DaemonService service.
type DaemonServiceClient interface {
	// Binary management
	DeployBinary(context.Context, *connect.Request[v1.DeployBinaryRequest]) (*connect.Response[v1.DeployBinaryResponse], error)
	StartBinary(context.Context, *connect.Request[v1.StartBinaryRequest]) (*connect.Response[v1.StartBinaryResponse], error)
	StopBinary(context.Context, *connect.Request[v1.StopBinaryRequest]) (*connect.Response[v1.StopBinaryResponse], error)
	ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error)
}

// NewDaemonServiceClient constructs a client for the agent.v1.DaemonService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &daemonServiceClient{
		deployBinary: connect.NewClient[v1.DeployBinaryRequest, v1.DeployBinaryResponse](
			httpClient,
			baseURL+DaemonServiceDeployBinaryProcedure,
			connect.WithSchema(daemonServiceDeployBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startBinary: connect.NewClient[v1.StartBinaryRequest, v1.StartBinaryResponse](
			httpClient,
			baseURL+DaemonServiceStartBinaryProcedure,
			connect.WithSchema(daemonServiceStartBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopBinary: connect.NewClient[v1.StopBinaryRequest, v1.StopBinaryResponse](
			httpClient,
			baseURL+DaemonServiceStopBinaryProcedure,
			connect.WithSchema(daemonServiceStopBinaryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBinaries: connect.NewClient[v1.ListBinariesRequest, v1.ListBinariesResponse](
			httpClient,
			baseURL+DaemonServiceListBinariesProcedure,
			connect.WithSchema(daemonServiceListBinariesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonServiceClient implements DaemonServiceClient.
type daemonServiceClient struct {
	deployBinary *connect.Client[v1.DeployBinaryRequest, v1.DeployBinaryResponse]
	startBinary  *connect.Client[v1.StartBinaryRequest, v1.StartBinaryResponse]
	stopBinary   *connect.Client[v1.StopBinaryRequest, v1.StopBinaryResponse]
	listBinaries *connect.Client[v1.ListBinariesRequest, v1.ListBinariesResponse]
}

// DeployBinary calls agent.v1.DaemonService.DeployBinary.
func (c *daemonServiceClient) DeployBinary(ctx context.Context, req *connect.Request[v1.DeployBinaryRequest]) (*connect.Response[v1.DeployBinaryResponse], error) {
	return c.deployBinary.CallUnary(ctx, req)
}

// StartBinary calls agent.v1.DaemonService.StartBinary.
func (c *daemonServiceClient) StartBinary(ctx context.Context, req *connect.Request[v1.StartBinaryRequest]) (*connect.Response[v1.StartBinaryResponse], error) {
	return c.startBinary.CallUnary(ctx, req)
}

// StopBinary calls agent.v1.DaemonService.StopBinary.
func (c *daemonServiceClient) StopBinary(ctx context.Context, req *connect.Request[v1.StopBinaryRequest]) (*connect.Response[v1.StopBinaryResponse], error) {
	return c.stopBinary.CallUnary(ctx, req)
}

// ListBinaries calls agent.v1.DaemonService.ListBinaries.
func (c *daemonServiceClient) ListBinaries(ctx context.Context, req *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error) {
	return c.listBinaries.CallUnary(ctx, req)
}

// DaemonServiceHandler is an implementation of the agent.v1.DaemonService service.
type DaemonServiceHandler interface {
	// Binary management
	DeployBinary(context.Context, *connect.Request[v1.DeployBinaryRequest]) (*connect.Response[v1.DeployBinaryResponse], error)
	StartBinary(context.Context, *connect.Request[v1.StartBinaryRequest]) (*connect.Response[v1.StartBinaryResponse], error)
	StopBinary(context.Context, *connect.Request[v1.StopBinaryRequest]) (*connect.Response[v1.StopBinaryResponse], error)
	ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error)
}

// NewDaemonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonServiceHandler(svc DaemonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonServiceDeployBinaryHandler := connect.NewUnaryHandler(
		DaemonServiceDeployBinaryProcedure,
		svc.DeployBinary,
		connect.WithSchema(daemonServiceDeployBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceStartBinaryHandler := connect.NewUnaryHandler(
		DaemonServiceStartBinaryProcedure,
		svc.StartBinary,
		connect.WithSchema(daemonServiceStartBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceStopBinaryHandler := connect.NewUnaryHandler(
		DaemonServiceStopBinaryProcedure,
		svc.StopBinary,
		connect.WithSchema(daemonServiceStopBinaryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceListBinariesHandler := connect.NewUnaryHandler(
		DaemonServiceListBinariesProcedure,
		svc.ListBinaries,
		connect.WithSchema(daemonServiceListBinariesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.DaemonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonServiceDeployBinaryProcedure:
			daemonServiceDeployBinaryHandler.ServeHTTP(w, r)
		case DaemonServiceStartBinaryProcedure:
			daemonServiceStartBinaryHandler.ServeHTTP(w, r)
		case DaemonServiceStopBinaryProcedure:
			daemonServiceStopBinaryHandler.ServeHTTP(w, r)
		case DaemonServiceListBinariesProcedure:
			daemonServiceListBinariesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonServiceHandler struct{}

func (UnimplementedDaemonServiceHandler) DeployBinary(context.Context, *connect.Request[v1.DeployBinaryRequest]) (*connect.Response[v1.DeployBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.DaemonService.DeployBinary is not implemented"))
}

func (UnimplementedDaemonServiceHandler) StartBinary(context.Context, *connect.Request[v1.StartBinaryRequest]) (*connect.Response[v1.StartBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.DaemonService.StartBinary is not implemented"))
}

func (UnimplementedDaemonServiceHandler) StopBinary(context.Context, *connect.Request[v1.StopBinaryRequest]) (*connect.Response[v1.StopBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.DaemonService.StopBinary is not implemented"))
}

func (UnimplementedDaemonServiceHandler) ListBinaries(context.Context, *connect.Request[v1.ListBinariesRequest]) (*connect.Response[v1.ListBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.DaemonService.ListBinaries is not implemented"))
}
