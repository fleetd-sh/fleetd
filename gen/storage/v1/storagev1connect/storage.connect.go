// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: storage/v1/storage.proto

package storagev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/storage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StorageServiceName is the fully-qualified name of the StorageService service.
	StorageServiceName = "storage.v1.StorageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StorageServicePutObjectProcedure is the fully-qualified name of the StorageService's PutObject
	// RPC.
	StorageServicePutObjectProcedure = "/storage.v1.StorageService/PutObject"
	// StorageServiceGetObjectProcedure is the fully-qualified name of the StorageService's GetObject
	// RPC.
	StorageServiceGetObjectProcedure = "/storage.v1.StorageService/GetObject"
	// StorageServiceListObjectsProcedure is the fully-qualified name of the StorageService's
	// ListObjects RPC.
	StorageServiceListObjectsProcedure = "/storage.v1.StorageService/ListObjects"
	// StorageServiceDeleteObjectProcedure is the fully-qualified name of the StorageService's
	// DeleteObject RPC.
	StorageServiceDeleteObjectProcedure = "/storage.v1.StorageService/DeleteObject"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	storageServiceServiceDescriptor            = v1.File_storage_v1_storage_proto.Services().ByName("StorageService")
	storageServicePutObjectMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("PutObject")
	storageServiceGetObjectMethodDescriptor    = storageServiceServiceDescriptor.Methods().ByName("GetObject")
	storageServiceListObjectsMethodDescriptor  = storageServiceServiceDescriptor.Methods().ByName("ListObjects")
	storageServiceDeleteObjectMethodDescriptor = storageServiceServiceDescriptor.Methods().ByName("DeleteObject")
)

// StorageServiceClient is a client for the storage.v1.StorageService service.
type StorageServiceClient interface {
	PutObject(context.Context, *connect.Request[v1.PutObjectRequest]) (*connect.Response[v1.PutObjectResponse], error)
	GetObject(context.Context, *connect.Request[v1.GetObjectRequest]) (*connect.Response[v1.GetObjectResponse], error)
	ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error)
	DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error)
}

// NewStorageServiceClient constructs a client for the storage.v1.StorageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStorageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StorageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &storageServiceClient{
		putObject: connect.NewClient[v1.PutObjectRequest, v1.PutObjectResponse](
			httpClient,
			baseURL+StorageServicePutObjectProcedure,
			connect.WithSchema(storageServicePutObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getObject: connect.NewClient[v1.GetObjectRequest, v1.GetObjectResponse](
			httpClient,
			baseURL+StorageServiceGetObjectProcedure,
			connect.WithSchema(storageServiceGetObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listObjects: connect.NewClient[v1.ListObjectsRequest, v1.ListObjectsResponse](
			httpClient,
			baseURL+StorageServiceListObjectsProcedure,
			connect.WithSchema(storageServiceListObjectsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteObject: connect.NewClient[v1.DeleteObjectRequest, v1.DeleteObjectResponse](
			httpClient,
			baseURL+StorageServiceDeleteObjectProcedure,
			connect.WithSchema(storageServiceDeleteObjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// storageServiceClient implements StorageServiceClient.
type storageServiceClient struct {
	putObject    *connect.Client[v1.PutObjectRequest, v1.PutObjectResponse]
	getObject    *connect.Client[v1.GetObjectRequest, v1.GetObjectResponse]
	listObjects  *connect.Client[v1.ListObjectsRequest, v1.ListObjectsResponse]
	deleteObject *connect.Client[v1.DeleteObjectRequest, v1.DeleteObjectResponse]
}

// PutObject calls storage.v1.StorageService.PutObject.
func (c *storageServiceClient) PutObject(ctx context.Context, req *connect.Request[v1.PutObjectRequest]) (*connect.Response[v1.PutObjectResponse], error) {
	return c.putObject.CallUnary(ctx, req)
}

// GetObject calls storage.v1.StorageService.GetObject.
func (c *storageServiceClient) GetObject(ctx context.Context, req *connect.Request[v1.GetObjectRequest]) (*connect.Response[v1.GetObjectResponse], error) {
	return c.getObject.CallUnary(ctx, req)
}

// ListObjects calls storage.v1.StorageService.ListObjects.
func (c *storageServiceClient) ListObjects(ctx context.Context, req *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error) {
	return c.listObjects.CallUnary(ctx, req)
}

// DeleteObject calls storage.v1.StorageService.DeleteObject.
func (c *storageServiceClient) DeleteObject(ctx context.Context, req *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error) {
	return c.deleteObject.CallUnary(ctx, req)
}

// StorageServiceHandler is an implementation of the storage.v1.StorageService service.
type StorageServiceHandler interface {
	PutObject(context.Context, *connect.Request[v1.PutObjectRequest]) (*connect.Response[v1.PutObjectResponse], error)
	GetObject(context.Context, *connect.Request[v1.GetObjectRequest]) (*connect.Response[v1.GetObjectResponse], error)
	ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error)
	DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error)
}

// NewStorageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStorageServiceHandler(svc StorageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storageServicePutObjectHandler := connect.NewUnaryHandler(
		StorageServicePutObjectProcedure,
		svc.PutObject,
		connect.WithSchema(storageServicePutObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceGetObjectHandler := connect.NewUnaryHandler(
		StorageServiceGetObjectProcedure,
		svc.GetObject,
		connect.WithSchema(storageServiceGetObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceListObjectsHandler := connect.NewUnaryHandler(
		StorageServiceListObjectsProcedure,
		svc.ListObjects,
		connect.WithSchema(storageServiceListObjectsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	storageServiceDeleteObjectHandler := connect.NewUnaryHandler(
		StorageServiceDeleteObjectProcedure,
		svc.DeleteObject,
		connect.WithSchema(storageServiceDeleteObjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/storage.v1.StorageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StorageServicePutObjectProcedure:
			storageServicePutObjectHandler.ServeHTTP(w, r)
		case StorageServiceGetObjectProcedure:
			storageServiceGetObjectHandler.ServeHTTP(w, r)
		case StorageServiceListObjectsProcedure:
			storageServiceListObjectsHandler.ServeHTTP(w, r)
		case StorageServiceDeleteObjectProcedure:
			storageServiceDeleteObjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStorageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStorageServiceHandler struct{}

func (UnimplementedStorageServiceHandler) PutObject(context.Context, *connect.Request[v1.PutObjectRequest]) (*connect.Response[v1.PutObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.PutObject is not implemented"))
}

func (UnimplementedStorageServiceHandler) GetObject(context.Context, *connect.Request[v1.GetObjectRequest]) (*connect.Response[v1.GetObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.GetObject is not implemented"))
}

func (UnimplementedStorageServiceHandler) ListObjects(context.Context, *connect.Request[v1.ListObjectsRequest]) (*connect.Response[v1.ListObjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.ListObjects is not implemented"))
}

func (UnimplementedStorageServiceHandler) DeleteObject(context.Context, *connect.Request[v1.DeleteObjectRequest]) (*connect.Response[v1.DeleteObjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("storage.v1.StorageService.DeleteObject is not implemented"))
}
