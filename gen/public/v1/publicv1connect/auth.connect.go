// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: public/v1/auth.proto

package publicv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/public/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "public.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/public.v1.AuthService/Login"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/public.v1.AuthService/Logout"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/public.v1.AuthService/RefreshToken"
	// AuthServiceGetCurrentUserProcedure is the fully-qualified name of the AuthService's
	// GetCurrentUser RPC.
	AuthServiceGetCurrentUserProcedure = "/public.v1.AuthService/GetCurrentUser"
	// AuthServiceCreateAPIKeyProcedure is the fully-qualified name of the AuthService's CreateAPIKey
	// RPC.
	AuthServiceCreateAPIKeyProcedure = "/public.v1.AuthService/CreateAPIKey"
	// AuthServiceListAPIKeysProcedure is the fully-qualified name of the AuthService's ListAPIKeys RPC.
	AuthServiceListAPIKeysProcedure = "/public.v1.AuthService/ListAPIKeys"
	// AuthServiceRevokeAPIKeyProcedure is the fully-qualified name of the AuthService's RevokeAPIKey
	// RPC.
	AuthServiceRevokeAPIKeyProcedure = "/public.v1.AuthService/RevokeAPIKey"
	// AuthServiceGetSSOProvidersProcedure is the fully-qualified name of the AuthService's
	// GetSSOProviders RPC.
	AuthServiceGetSSOProvidersProcedure = "/public.v1.AuthService/GetSSOProviders"
	// AuthServiceInitiateSSOLoginProcedure is the fully-qualified name of the AuthService's
	// InitiateSSOLogin RPC.
	AuthServiceInitiateSSOLoginProcedure = "/public.v1.AuthService/InitiateSSOLogin"
	// AuthServiceCompleteSSOLoginProcedure is the fully-qualified name of the AuthService's
	// CompleteSSOLogin RPC.
	AuthServiceCompleteSSOLoginProcedure = "/public.v1.AuthService/CompleteSSOLogin"
)

// AuthServiceClient is a client for the public.v1.AuthService service.
type AuthServiceClient interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// API Keys (for programmatic access)
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[emptypb.Empty], error)
	// SSO Configuration (cloud offering)
	GetSSOProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSSOProvidersResponse], error)
	InitiateSSOLogin(context.Context, *connect.Request[v1.InitiateSSOLoginRequest]) (*connect.Response[v1.InitiateSSOLoginResponse], error)
	CompleteSSOLogin(context.Context, *connect.Request[v1.CompleteSSOLoginRequest]) (*connect.Response[v1.CompleteSSOLoginResponse], error)
}

// NewAuthServiceClient constructs a client for the public.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_public_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		getCurrentUser: connect.NewClient[emptypb.Empty, v1.GetCurrentUserResponse](
			httpClient,
			baseURL+AuthServiceGetCurrentUserProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetCurrentUser")),
			connect.WithClientOptions(opts...),
		),
		createAPIKey: connect.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+AuthServiceCreateAPIKeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("CreateAPIKey")),
			connect.WithClientOptions(opts...),
		),
		listAPIKeys: connect.NewClient[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse](
			httpClient,
			baseURL+AuthServiceListAPIKeysProcedure,
			connect.WithSchema(authServiceMethods.ByName("ListAPIKeys")),
			connect.WithClientOptions(opts...),
		),
		revokeAPIKey: connect.NewClient[v1.RevokeAPIKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceRevokeAPIKeyProcedure,
			connect.WithSchema(authServiceMethods.ByName("RevokeAPIKey")),
			connect.WithClientOptions(opts...),
		),
		getSSOProviders: connect.NewClient[emptypb.Empty, v1.GetSSOProvidersResponse](
			httpClient,
			baseURL+AuthServiceGetSSOProvidersProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetSSOProviders")),
			connect.WithClientOptions(opts...),
		),
		initiateSSOLogin: connect.NewClient[v1.InitiateSSOLoginRequest, v1.InitiateSSOLoginResponse](
			httpClient,
			baseURL+AuthServiceInitiateSSOLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("InitiateSSOLogin")),
			connect.WithClientOptions(opts...),
		),
		completeSSOLogin: connect.NewClient[v1.CompleteSSOLoginRequest, v1.CompleteSSOLoginResponse](
			httpClient,
			baseURL+AuthServiceCompleteSSOLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("CompleteSSOLogin")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login            *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logout           *connect.Client[v1.LogoutRequest, emptypb.Empty]
	refreshToken     *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	getCurrentUser   *connect.Client[emptypb.Empty, v1.GetCurrentUserResponse]
	createAPIKey     *connect.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	listAPIKeys      *connect.Client[v1.ListAPIKeysRequest, v1.ListAPIKeysResponse]
	revokeAPIKey     *connect.Client[v1.RevokeAPIKeyRequest, emptypb.Empty]
	getSSOProviders  *connect.Client[emptypb.Empty, v1.GetSSOProvidersResponse]
	initiateSSOLogin *connect.Client[v1.InitiateSSOLoginRequest, v1.InitiateSSOLoginResponse]
	completeSSOLogin *connect.Client[v1.CompleteSSOLoginRequest, v1.CompleteSSOLoginResponse]
}

// Login calls public.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Logout calls public.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.logout.CallUnary(ctx, req)
}

// RefreshToken calls public.v1.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetCurrentUser calls public.v1.AuthService.GetCurrentUser.
func (c *authServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// CreateAPIKey calls public.v1.AuthService.CreateAPIKey.
func (c *authServiceClient) CreateAPIKey(ctx context.Context, req *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// ListAPIKeys calls public.v1.AuthService.ListAPIKeys.
func (c *authServiceClient) ListAPIKeys(ctx context.Context, req *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return c.listAPIKeys.CallUnary(ctx, req)
}

// RevokeAPIKey calls public.v1.AuthService.RevokeAPIKey.
func (c *authServiceClient) RevokeAPIKey(ctx context.Context, req *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeAPIKey.CallUnary(ctx, req)
}

// GetSSOProviders calls public.v1.AuthService.GetSSOProviders.
func (c *authServiceClient) GetSSOProviders(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSSOProvidersResponse], error) {
	return c.getSSOProviders.CallUnary(ctx, req)
}

// InitiateSSOLogin calls public.v1.AuthService.InitiateSSOLogin.
func (c *authServiceClient) InitiateSSOLogin(ctx context.Context, req *connect.Request[v1.InitiateSSOLoginRequest]) (*connect.Response[v1.InitiateSSOLoginResponse], error) {
	return c.initiateSSOLogin.CallUnary(ctx, req)
}

// CompleteSSOLogin calls public.v1.AuthService.CompleteSSOLogin.
func (c *authServiceClient) CompleteSSOLogin(ctx context.Context, req *connect.Request[v1.CompleteSSOLoginRequest]) (*connect.Response[v1.CompleteSSOLoginResponse], error) {
	return c.completeSSOLogin.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the public.v1.AuthService service.
type AuthServiceHandler interface {
	// Authentication
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error)
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetCurrentUserResponse], error)
	// API Keys (for programmatic access)
	CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error)
	ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error)
	RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[emptypb.Empty], error)
	// SSO Configuration (cloud offering)
	GetSSOProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSSOProvidersResponse], error)
	InitiateSSOLogin(context.Context, *connect.Request[v1.InitiateSSOLoginRequest]) (*connect.Response[v1.InitiateSSOLoginResponse], error)
	CompleteSSOLogin(context.Context, *connect.Request[v1.CompleteSSOLoginRequest]) (*connect.Response[v1.CompleteSSOLoginResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_public_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		AuthServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(authServiceMethods.ByName("GetCurrentUser")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCreateAPIKeyHandler := connect.NewUnaryHandler(
		AuthServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		connect.WithSchema(authServiceMethods.ByName("CreateAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceListAPIKeysHandler := connect.NewUnaryHandler(
		AuthServiceListAPIKeysProcedure,
		svc.ListAPIKeys,
		connect.WithSchema(authServiceMethods.ByName("ListAPIKeys")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRevokeAPIKeyHandler := connect.NewUnaryHandler(
		AuthServiceRevokeAPIKeyProcedure,
		svc.RevokeAPIKey,
		connect.WithSchema(authServiceMethods.ByName("RevokeAPIKey")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetSSOProvidersHandler := connect.NewUnaryHandler(
		AuthServiceGetSSOProvidersProcedure,
		svc.GetSSOProviders,
		connect.WithSchema(authServiceMethods.ByName("GetSSOProviders")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceInitiateSSOLoginHandler := connect.NewUnaryHandler(
		AuthServiceInitiateSSOLoginProcedure,
		svc.InitiateSSOLogin,
		connect.WithSchema(authServiceMethods.ByName("InitiateSSOLogin")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompleteSSOLoginHandler := connect.NewUnaryHandler(
		AuthServiceCompleteSSOLoginProcedure,
		svc.CompleteSSOLogin,
		connect.WithSchema(authServiceMethods.ByName("CompleteSSOLogin")),
		connect.WithHandlerOptions(opts...),
	)
	return "/public.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceGetCurrentUserProcedure:
			authServiceGetCurrentUserHandler.ServeHTTP(w, r)
		case AuthServiceCreateAPIKeyProcedure:
			authServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case AuthServiceListAPIKeysProcedure:
			authServiceListAPIKeysHandler.ServeHTTP(w, r)
		case AuthServiceRevokeAPIKeyProcedure:
			authServiceRevokeAPIKeyHandler.ServeHTTP(w, r)
		case AuthServiceGetSSOProvidersProcedure:
			authServiceGetSSOProvidersHandler.ServeHTTP(w, r)
		case AuthServiceInitiateSSOLoginProcedure:
			authServiceInitiateSSOLoginHandler.ServeHTTP(w, r)
		case AuthServiceCompleteSSOLoginProcedure:
			authServiceCompleteSSOLoginHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetCurrentUser(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.GetCurrentUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) CreateAPIKey(context.Context, *connect.Request[v1.CreateAPIKeyRequest]) (*connect.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.CreateAPIKey is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListAPIKeys(context.Context, *connect.Request[v1.ListAPIKeysRequest]) (*connect.Response[v1.ListAPIKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.ListAPIKeys is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokeAPIKey(context.Context, *connect.Request[v1.RevokeAPIKeyRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.RevokeAPIKey is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSSOProviders(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSSOProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.GetSSOProviders is not implemented"))
}

func (UnimplementedAuthServiceHandler) InitiateSSOLogin(context.Context, *connect.Request[v1.InitiateSSOLoginRequest]) (*connect.Response[v1.InitiateSSOLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.InitiateSSOLogin is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompleteSSOLogin(context.Context, *connect.Request[v1.CompleteSSOLoginRequest]) (*connect.Response[v1.CompleteSSOLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.AuthService.CompleteSSOLogin is not implemented"))
}
