// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: public/v1/fleet.proto

package publicv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/public/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FleetServiceName is the fully-qualified name of the FleetService service.
	FleetServiceName = "public.v1.FleetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FleetServiceListDevicesProcedure is the fully-qualified name of the FleetService's ListDevices
	// RPC.
	FleetServiceListDevicesProcedure = "/public.v1.FleetService/ListDevices"
	// FleetServiceGetDeviceProcedure is the fully-qualified name of the FleetService's GetDevice RPC.
	FleetServiceGetDeviceProcedure = "/public.v1.FleetService/GetDevice"
	// FleetServiceUpdateDeviceProcedure is the fully-qualified name of the FleetService's UpdateDevice
	// RPC.
	FleetServiceUpdateDeviceProcedure = "/public.v1.FleetService/UpdateDevice"
	// FleetServiceDeleteDeviceProcedure is the fully-qualified name of the FleetService's DeleteDevice
	// RPC.
	FleetServiceDeleteDeviceProcedure = "/public.v1.FleetService/DeleteDevice"
	// FleetServiceGetDeviceStatsProcedure is the fully-qualified name of the FleetService's
	// GetDeviceStats RPC.
	FleetServiceGetDeviceStatsProcedure = "/public.v1.FleetService/GetDeviceStats"
	// FleetServiceDiscoverDevicesProcedure is the fully-qualified name of the FleetService's
	// DiscoverDevices RPC.
	FleetServiceDiscoverDevicesProcedure = "/public.v1.FleetService/DiscoverDevices"
	// FleetServiceGetTelemetryProcedure is the fully-qualified name of the FleetService's GetTelemetry
	// RPC.
	FleetServiceGetTelemetryProcedure = "/public.v1.FleetService/GetTelemetry"
	// FleetServiceStreamTelemetryProcedure is the fully-qualified name of the FleetService's
	// StreamTelemetry RPC.
	FleetServiceStreamTelemetryProcedure = "/public.v1.FleetService/StreamTelemetry"
	// FleetServiceCreateDeploymentProcedure is the fully-qualified name of the FleetService's
	// CreateDeployment RPC.
	FleetServiceCreateDeploymentProcedure = "/public.v1.FleetService/CreateDeployment"
	// FleetServiceListDeploymentsProcedure is the fully-qualified name of the FleetService's
	// ListDeployments RPC.
	FleetServiceListDeploymentsProcedure = "/public.v1.FleetService/ListDeployments"
	// FleetServiceGetDeploymentProcedure is the fully-qualified name of the FleetService's
	// GetDeployment RPC.
	FleetServiceGetDeploymentProcedure = "/public.v1.FleetService/GetDeployment"
	// FleetServiceStartDeploymentProcedure is the fully-qualified name of the FleetService's
	// StartDeployment RPC.
	FleetServiceStartDeploymentProcedure = "/public.v1.FleetService/StartDeployment"
	// FleetServicePauseDeploymentProcedure is the fully-qualified name of the FleetService's
	// PauseDeployment RPC.
	FleetServicePauseDeploymentProcedure = "/public.v1.FleetService/PauseDeployment"
	// FleetServiceCancelDeploymentProcedure is the fully-qualified name of the FleetService's
	// CancelDeployment RPC.
	FleetServiceCancelDeploymentProcedure = "/public.v1.FleetService/CancelDeployment"
	// FleetServiceRollbackDeploymentProcedure is the fully-qualified name of the FleetService's
	// RollbackDeployment RPC.
	FleetServiceRollbackDeploymentProcedure = "/public.v1.FleetService/RollbackDeployment"
	// FleetServiceGetDeploymentStatusProcedure is the fully-qualified name of the FleetService's
	// GetDeploymentStatus RPC.
	FleetServiceGetDeploymentStatusProcedure = "/public.v1.FleetService/GetDeploymentStatus"
	// FleetServiceStreamDeploymentEventsProcedure is the fully-qualified name of the FleetService's
	// StreamDeploymentEvents RPC.
	FleetServiceStreamDeploymentEventsProcedure = "/public.v1.FleetService/StreamDeploymentEvents"
	// FleetServiceGetConfigurationProcedure is the fully-qualified name of the FleetService's
	// GetConfiguration RPC.
	FleetServiceGetConfigurationProcedure = "/public.v1.FleetService/GetConfiguration"
	// FleetServiceUpdateConfigurationProcedure is the fully-qualified name of the FleetService's
	// UpdateConfiguration RPC.
	FleetServiceUpdateConfigurationProcedure = "/public.v1.FleetService/UpdateConfiguration"
	// FleetServiceStreamEventsProcedure is the fully-qualified name of the FleetService's StreamEvents
	// RPC.
	FleetServiceStreamEventsProcedure = "/public.v1.FleetService/StreamEvents"
)

// FleetServiceClient is a client for the public.v1.FleetService service.
type FleetServiceClient interface {
	// Device management
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	GetDeviceStats(context.Context, *connect.Request[v1.GetDeviceStatsRequest]) (*connect.Response[v1.GetDeviceStatsResponse], error)
	// Device discovery
	DiscoverDevices(context.Context, *connect.Request[v1.DiscoverDevicesRequest]) (*connect.Response[v1.DiscoverDevicesResponse], error)
	// Telemetry
	GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error)
	StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest]) (*connect.ServerStreamForClient[v1.StreamTelemetryResponse], error)
	// Deployment management - Unified API for all deployment types
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error)
	PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error)
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	RollbackDeployment(context.Context, *connect.Request[v1.RollbackDeploymentRequest]) (*connect.Response[v1.RollbackDeploymentResponse], error)
	GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error)
	StreamDeploymentEvents(context.Context, *connect.Request[v1.StreamDeploymentEventsRequest]) (*connect.ServerStreamForClient[v1.StreamDeploymentEventsResponse], error)
	// Configuration
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	UpdateConfiguration(context.Context, *connect.Request[v1.UpdateConfigurationRequest]) (*connect.Response[v1.UpdateConfigurationResponse], error)
	// Events streaming (SSE replacement)
	StreamEvents(context.Context, *connect.Request[v1.StreamEventsRequest]) (*connect.ServerStreamForClient[v1.StreamEventsResponse], error)
}

// NewFleetServiceClient constructs a client for the public.v1.FleetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFleetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FleetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fleetServiceMethods := v1.File_public_v1_fleet_proto.Services().ByName("FleetService").Methods()
	return &fleetServiceClient{
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+FleetServiceListDevicesProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[v1.GetDeviceRequest, v1.GetDeviceResponse](
			httpClient,
			baseURL+FleetServiceGetDeviceProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetDevice")),
			connect.WithClientOptions(opts...),
		),
		updateDevice: connect.NewClient[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse](
			httpClient,
			baseURL+FleetServiceUpdateDeviceProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("UpdateDevice")),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, emptypb.Empty](
			httpClient,
			baseURL+FleetServiceDeleteDeviceProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("DeleteDevice")),
			connect.WithClientOptions(opts...),
		),
		getDeviceStats: connect.NewClient[v1.GetDeviceStatsRequest, v1.GetDeviceStatsResponse](
			httpClient,
			baseURL+FleetServiceGetDeviceStatsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetDeviceStats")),
			connect.WithClientOptions(opts...),
		),
		discoverDevices: connect.NewClient[v1.DiscoverDevicesRequest, v1.DiscoverDevicesResponse](
			httpClient,
			baseURL+FleetServiceDiscoverDevicesProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("DiscoverDevices")),
			connect.WithClientOptions(opts...),
		),
		getTelemetry: connect.NewClient[v1.GetTelemetryRequest, v1.GetTelemetryResponse](
			httpClient,
			baseURL+FleetServiceGetTelemetryProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetTelemetry")),
			connect.WithClientOptions(opts...),
		),
		streamTelemetry: connect.NewClient[v1.StreamTelemetryRequest, v1.StreamTelemetryResponse](
			httpClient,
			baseURL+FleetServiceStreamTelemetryProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("StreamTelemetry")),
			connect.WithClientOptions(opts...),
		),
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+FleetServiceCreateDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("CreateDeployment")),
			connect.WithClientOptions(opts...),
		),
		listDeployments: connect.NewClient[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse](
			httpClient,
			baseURL+FleetServiceListDeploymentsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("ListDeployments")),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+FleetServiceGetDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetDeployment")),
			connect.WithClientOptions(opts...),
		),
		startDeployment: connect.NewClient[v1.StartDeploymentRequest, v1.StartDeploymentResponse](
			httpClient,
			baseURL+FleetServiceStartDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("StartDeployment")),
			connect.WithClientOptions(opts...),
		),
		pauseDeployment: connect.NewClient[v1.PauseDeploymentRequest, v1.PauseDeploymentResponse](
			httpClient,
			baseURL+FleetServicePauseDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("PauseDeployment")),
			connect.WithClientOptions(opts...),
		),
		cancelDeployment: connect.NewClient[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse](
			httpClient,
			baseURL+FleetServiceCancelDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("CancelDeployment")),
			connect.WithClientOptions(opts...),
		),
		rollbackDeployment: connect.NewClient[v1.RollbackDeploymentRequest, v1.RollbackDeploymentResponse](
			httpClient,
			baseURL+FleetServiceRollbackDeploymentProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("RollbackDeployment")),
			connect.WithClientOptions(opts...),
		),
		getDeploymentStatus: connect.NewClient[v1.GetDeploymentStatusRequest, v1.GetDeploymentStatusResponse](
			httpClient,
			baseURL+FleetServiceGetDeploymentStatusProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetDeploymentStatus")),
			connect.WithClientOptions(opts...),
		),
		streamDeploymentEvents: connect.NewClient[v1.StreamDeploymentEventsRequest, v1.StreamDeploymentEventsResponse](
			httpClient,
			baseURL+FleetServiceStreamDeploymentEventsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("StreamDeploymentEvents")),
			connect.WithClientOptions(opts...),
		),
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+FleetServiceGetConfigurationProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("GetConfiguration")),
			connect.WithClientOptions(opts...),
		),
		updateConfiguration: connect.NewClient[v1.UpdateConfigurationRequest, v1.UpdateConfigurationResponse](
			httpClient,
			baseURL+FleetServiceUpdateConfigurationProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("UpdateConfiguration")),
			connect.WithClientOptions(opts...),
		),
		streamEvents: connect.NewClient[v1.StreamEventsRequest, v1.StreamEventsResponse](
			httpClient,
			baseURL+FleetServiceStreamEventsProcedure,
			connect.WithSchema(fleetServiceMethods.ByName("StreamEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fleetServiceClient implements FleetServiceClient.
type fleetServiceClient struct {
	listDevices            *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	getDevice              *connect.Client[v1.GetDeviceRequest, v1.GetDeviceResponse]
	updateDevice           *connect.Client[v1.UpdateDeviceRequest, v1.UpdateDeviceResponse]
	deleteDevice           *connect.Client[v1.DeleteDeviceRequest, emptypb.Empty]
	getDeviceStats         *connect.Client[v1.GetDeviceStatsRequest, v1.GetDeviceStatsResponse]
	discoverDevices        *connect.Client[v1.DiscoverDevicesRequest, v1.DiscoverDevicesResponse]
	getTelemetry           *connect.Client[v1.GetTelemetryRequest, v1.GetTelemetryResponse]
	streamTelemetry        *connect.Client[v1.StreamTelemetryRequest, v1.StreamTelemetryResponse]
	createDeployment       *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	listDeployments        *connect.Client[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse]
	getDeployment          *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	startDeployment        *connect.Client[v1.StartDeploymentRequest, v1.StartDeploymentResponse]
	pauseDeployment        *connect.Client[v1.PauseDeploymentRequest, v1.PauseDeploymentResponse]
	cancelDeployment       *connect.Client[v1.CancelDeploymentRequest, v1.CancelDeploymentResponse]
	rollbackDeployment     *connect.Client[v1.RollbackDeploymentRequest, v1.RollbackDeploymentResponse]
	getDeploymentStatus    *connect.Client[v1.GetDeploymentStatusRequest, v1.GetDeploymentStatusResponse]
	streamDeploymentEvents *connect.Client[v1.StreamDeploymentEventsRequest, v1.StreamDeploymentEventsResponse]
	getConfiguration       *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
	updateConfiguration    *connect.Client[v1.UpdateConfigurationRequest, v1.UpdateConfigurationResponse]
	streamEvents           *connect.Client[v1.StreamEventsRequest, v1.StreamEventsResponse]
}

// ListDevices calls public.v1.FleetService.ListDevices.
func (c *fleetServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// GetDevice calls public.v1.FleetService.GetDevice.
func (c *fleetServiceClient) GetDevice(ctx context.Context, req *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// UpdateDevice calls public.v1.FleetService.UpdateDevice.
func (c *fleetServiceClient) UpdateDevice(ctx context.Context, req *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return c.updateDevice.CallUnary(ctx, req)
}

// DeleteDevice calls public.v1.FleetService.DeleteDevice.
func (c *fleetServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// GetDeviceStats calls public.v1.FleetService.GetDeviceStats.
func (c *fleetServiceClient) GetDeviceStats(ctx context.Context, req *connect.Request[v1.GetDeviceStatsRequest]) (*connect.Response[v1.GetDeviceStatsResponse], error) {
	return c.getDeviceStats.CallUnary(ctx, req)
}

// DiscoverDevices calls public.v1.FleetService.DiscoverDevices.
func (c *fleetServiceClient) DiscoverDevices(ctx context.Context, req *connect.Request[v1.DiscoverDevicesRequest]) (*connect.Response[v1.DiscoverDevicesResponse], error) {
	return c.discoverDevices.CallUnary(ctx, req)
}

// GetTelemetry calls public.v1.FleetService.GetTelemetry.
func (c *fleetServiceClient) GetTelemetry(ctx context.Context, req *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error) {
	return c.getTelemetry.CallUnary(ctx, req)
}

// StreamTelemetry calls public.v1.FleetService.StreamTelemetry.
func (c *fleetServiceClient) StreamTelemetry(ctx context.Context, req *connect.Request[v1.StreamTelemetryRequest]) (*connect.ServerStreamForClient[v1.StreamTelemetryResponse], error) {
	return c.streamTelemetry.CallServerStream(ctx, req)
}

// CreateDeployment calls public.v1.FleetService.CreateDeployment.
func (c *fleetServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// ListDeployments calls public.v1.FleetService.ListDeployments.
func (c *fleetServiceClient) ListDeployments(ctx context.Context, req *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return c.listDeployments.CallUnary(ctx, req)
}

// GetDeployment calls public.v1.FleetService.GetDeployment.
func (c *fleetServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// StartDeployment calls public.v1.FleetService.StartDeployment.
func (c *fleetServiceClient) StartDeployment(ctx context.Context, req *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error) {
	return c.startDeployment.CallUnary(ctx, req)
}

// PauseDeployment calls public.v1.FleetService.PauseDeployment.
func (c *fleetServiceClient) PauseDeployment(ctx context.Context, req *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error) {
	return c.pauseDeployment.CallUnary(ctx, req)
}

// CancelDeployment calls public.v1.FleetService.CancelDeployment.
func (c *fleetServiceClient) CancelDeployment(ctx context.Context, req *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return c.cancelDeployment.CallUnary(ctx, req)
}

// RollbackDeployment calls public.v1.FleetService.RollbackDeployment.
func (c *fleetServiceClient) RollbackDeployment(ctx context.Context, req *connect.Request[v1.RollbackDeploymentRequest]) (*connect.Response[v1.RollbackDeploymentResponse], error) {
	return c.rollbackDeployment.CallUnary(ctx, req)
}

// GetDeploymentStatus calls public.v1.FleetService.GetDeploymentStatus.
func (c *fleetServiceClient) GetDeploymentStatus(ctx context.Context, req *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error) {
	return c.getDeploymentStatus.CallUnary(ctx, req)
}

// StreamDeploymentEvents calls public.v1.FleetService.StreamDeploymentEvents.
func (c *fleetServiceClient) StreamDeploymentEvents(ctx context.Context, req *connect.Request[v1.StreamDeploymentEventsRequest]) (*connect.ServerStreamForClient[v1.StreamDeploymentEventsResponse], error) {
	return c.streamDeploymentEvents.CallServerStream(ctx, req)
}

// GetConfiguration calls public.v1.FleetService.GetConfiguration.
func (c *fleetServiceClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// UpdateConfiguration calls public.v1.FleetService.UpdateConfiguration.
func (c *fleetServiceClient) UpdateConfiguration(ctx context.Context, req *connect.Request[v1.UpdateConfigurationRequest]) (*connect.Response[v1.UpdateConfigurationResponse], error) {
	return c.updateConfiguration.CallUnary(ctx, req)
}

// StreamEvents calls public.v1.FleetService.StreamEvents.
func (c *fleetServiceClient) StreamEvents(ctx context.Context, req *connect.Request[v1.StreamEventsRequest]) (*connect.ServerStreamForClient[v1.StreamEventsResponse], error) {
	return c.streamEvents.CallServerStream(ctx, req)
}

// FleetServiceHandler is an implementation of the public.v1.FleetService service.
type FleetServiceHandler interface {
	// Device management
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error)
	UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	GetDeviceStats(context.Context, *connect.Request[v1.GetDeviceStatsRequest]) (*connect.Response[v1.GetDeviceStatsResponse], error)
	// Device discovery
	DiscoverDevices(context.Context, *connect.Request[v1.DiscoverDevicesRequest]) (*connect.Response[v1.DiscoverDevicesResponse], error)
	// Telemetry
	GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error)
	StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest], *connect.ServerStream[v1.StreamTelemetryResponse]) error
	// Deployment management - Unified API for all deployment types
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error)
	PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error)
	CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error)
	RollbackDeployment(context.Context, *connect.Request[v1.RollbackDeploymentRequest]) (*connect.Response[v1.RollbackDeploymentResponse], error)
	GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error)
	StreamDeploymentEvents(context.Context, *connect.Request[v1.StreamDeploymentEventsRequest], *connect.ServerStream[v1.StreamDeploymentEventsResponse]) error
	// Configuration
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
	UpdateConfiguration(context.Context, *connect.Request[v1.UpdateConfigurationRequest]) (*connect.Response[v1.UpdateConfigurationResponse], error)
	// Events streaming (SSE replacement)
	StreamEvents(context.Context, *connect.Request[v1.StreamEventsRequest], *connect.ServerStream[v1.StreamEventsResponse]) error
}

// NewFleetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFleetServiceHandler(svc FleetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fleetServiceMethods := v1.File_public_v1_fleet_proto.Services().ByName("FleetService").Methods()
	fleetServiceListDevicesHandler := connect.NewUnaryHandler(
		FleetServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(fleetServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeviceHandler := connect.NewUnaryHandler(
		FleetServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(fleetServiceMethods.ByName("GetDevice")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceUpdateDeviceHandler := connect.NewUnaryHandler(
		FleetServiceUpdateDeviceProcedure,
		svc.UpdateDevice,
		connect.WithSchema(fleetServiceMethods.ByName("UpdateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		FleetServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(fleetServiceMethods.ByName("DeleteDevice")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeviceStatsHandler := connect.NewUnaryHandler(
		FleetServiceGetDeviceStatsProcedure,
		svc.GetDeviceStats,
		connect.WithSchema(fleetServiceMethods.ByName("GetDeviceStats")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceDiscoverDevicesHandler := connect.NewUnaryHandler(
		FleetServiceDiscoverDevicesProcedure,
		svc.DiscoverDevices,
		connect.WithSchema(fleetServiceMethods.ByName("DiscoverDevices")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetTelemetryHandler := connect.NewUnaryHandler(
		FleetServiceGetTelemetryProcedure,
		svc.GetTelemetry,
		connect.WithSchema(fleetServiceMethods.ByName("GetTelemetry")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceStreamTelemetryHandler := connect.NewServerStreamHandler(
		FleetServiceStreamTelemetryProcedure,
		svc.StreamTelemetry,
		connect.WithSchema(fleetServiceMethods.ByName("StreamTelemetry")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		FleetServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("CreateDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceListDeploymentsHandler := connect.NewUnaryHandler(
		FleetServiceListDeploymentsProcedure,
		svc.ListDeployments,
		connect.WithSchema(fleetServiceMethods.ByName("ListDeployments")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeploymentHandler := connect.NewUnaryHandler(
		FleetServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("GetDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceStartDeploymentHandler := connect.NewUnaryHandler(
		FleetServiceStartDeploymentProcedure,
		svc.StartDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("StartDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServicePauseDeploymentHandler := connect.NewUnaryHandler(
		FleetServicePauseDeploymentProcedure,
		svc.PauseDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("PauseDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceCancelDeploymentHandler := connect.NewUnaryHandler(
		FleetServiceCancelDeploymentProcedure,
		svc.CancelDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("CancelDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceRollbackDeploymentHandler := connect.NewUnaryHandler(
		FleetServiceRollbackDeploymentProcedure,
		svc.RollbackDeployment,
		connect.WithSchema(fleetServiceMethods.ByName("RollbackDeployment")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetDeploymentStatusHandler := connect.NewUnaryHandler(
		FleetServiceGetDeploymentStatusProcedure,
		svc.GetDeploymentStatus,
		connect.WithSchema(fleetServiceMethods.ByName("GetDeploymentStatus")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceStreamDeploymentEventsHandler := connect.NewServerStreamHandler(
		FleetServiceStreamDeploymentEventsProcedure,
		svc.StreamDeploymentEvents,
		connect.WithSchema(fleetServiceMethods.ByName("StreamDeploymentEvents")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceGetConfigurationHandler := connect.NewUnaryHandler(
		FleetServiceGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(fleetServiceMethods.ByName("GetConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceUpdateConfigurationHandler := connect.NewUnaryHandler(
		FleetServiceUpdateConfigurationProcedure,
		svc.UpdateConfiguration,
		connect.WithSchema(fleetServiceMethods.ByName("UpdateConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	fleetServiceStreamEventsHandler := connect.NewServerStreamHandler(
		FleetServiceStreamEventsProcedure,
		svc.StreamEvents,
		connect.WithSchema(fleetServiceMethods.ByName("StreamEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/public.v1.FleetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FleetServiceListDevicesProcedure:
			fleetServiceListDevicesHandler.ServeHTTP(w, r)
		case FleetServiceGetDeviceProcedure:
			fleetServiceGetDeviceHandler.ServeHTTP(w, r)
		case FleetServiceUpdateDeviceProcedure:
			fleetServiceUpdateDeviceHandler.ServeHTTP(w, r)
		case FleetServiceDeleteDeviceProcedure:
			fleetServiceDeleteDeviceHandler.ServeHTTP(w, r)
		case FleetServiceGetDeviceStatsProcedure:
			fleetServiceGetDeviceStatsHandler.ServeHTTP(w, r)
		case FleetServiceDiscoverDevicesProcedure:
			fleetServiceDiscoverDevicesHandler.ServeHTTP(w, r)
		case FleetServiceGetTelemetryProcedure:
			fleetServiceGetTelemetryHandler.ServeHTTP(w, r)
		case FleetServiceStreamTelemetryProcedure:
			fleetServiceStreamTelemetryHandler.ServeHTTP(w, r)
		case FleetServiceCreateDeploymentProcedure:
			fleetServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case FleetServiceListDeploymentsProcedure:
			fleetServiceListDeploymentsHandler.ServeHTTP(w, r)
		case FleetServiceGetDeploymentProcedure:
			fleetServiceGetDeploymentHandler.ServeHTTP(w, r)
		case FleetServiceStartDeploymentProcedure:
			fleetServiceStartDeploymentHandler.ServeHTTP(w, r)
		case FleetServicePauseDeploymentProcedure:
			fleetServicePauseDeploymentHandler.ServeHTTP(w, r)
		case FleetServiceCancelDeploymentProcedure:
			fleetServiceCancelDeploymentHandler.ServeHTTP(w, r)
		case FleetServiceRollbackDeploymentProcedure:
			fleetServiceRollbackDeploymentHandler.ServeHTTP(w, r)
		case FleetServiceGetDeploymentStatusProcedure:
			fleetServiceGetDeploymentStatusHandler.ServeHTTP(w, r)
		case FleetServiceStreamDeploymentEventsProcedure:
			fleetServiceStreamDeploymentEventsHandler.ServeHTTP(w, r)
		case FleetServiceGetConfigurationProcedure:
			fleetServiceGetConfigurationHandler.ServeHTTP(w, r)
		case FleetServiceUpdateConfigurationProcedure:
			fleetServiceUpdateConfigurationHandler.ServeHTTP(w, r)
		case FleetServiceStreamEventsProcedure:
			fleetServiceStreamEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFleetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFleetServiceHandler struct{}

func (UnimplementedFleetServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.ListDevices is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDevice(context.Context, *connect.Request[v1.GetDeviceRequest]) (*connect.Response[v1.GetDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) UpdateDevice(context.Context, *connect.Request[v1.UpdateDeviceRequest]) (*connect.Response[v1.UpdateDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.UpdateDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.DeleteDevice is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDeviceStats(context.Context, *connect.Request[v1.GetDeviceStatsRequest]) (*connect.Response[v1.GetDeviceStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetDeviceStats is not implemented"))
}

func (UnimplementedFleetServiceHandler) DiscoverDevices(context.Context, *connect.Request[v1.DiscoverDevicesRequest]) (*connect.Response[v1.DiscoverDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.DiscoverDevices is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetTelemetry(context.Context, *connect.Request[v1.GetTelemetryRequest]) (*connect.Response[v1.GetTelemetryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetTelemetry is not implemented"))
}

func (UnimplementedFleetServiceHandler) StreamTelemetry(context.Context, *connect.Request[v1.StreamTelemetryRequest], *connect.ServerStream[v1.StreamTelemetryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.StreamTelemetry is not implemented"))
}

func (UnimplementedFleetServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.CreateDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.ListDeployments is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) StartDeployment(context.Context, *connect.Request[v1.StartDeploymentRequest]) (*connect.Response[v1.StartDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.StartDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) PauseDeployment(context.Context, *connect.Request[v1.PauseDeploymentRequest]) (*connect.Response[v1.PauseDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.PauseDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) CancelDeployment(context.Context, *connect.Request[v1.CancelDeploymentRequest]) (*connect.Response[v1.CancelDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.CancelDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) RollbackDeployment(context.Context, *connect.Request[v1.RollbackDeploymentRequest]) (*connect.Response[v1.RollbackDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.RollbackDeployment is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetDeploymentStatus(context.Context, *connect.Request[v1.GetDeploymentStatusRequest]) (*connect.Response[v1.GetDeploymentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetDeploymentStatus is not implemented"))
}

func (UnimplementedFleetServiceHandler) StreamDeploymentEvents(context.Context, *connect.Request[v1.StreamDeploymentEventsRequest], *connect.ServerStream[v1.StreamDeploymentEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.StreamDeploymentEvents is not implemented"))
}

func (UnimplementedFleetServiceHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.GetConfiguration is not implemented"))
}

func (UnimplementedFleetServiceHandler) UpdateConfiguration(context.Context, *connect.Request[v1.UpdateConfigurationRequest]) (*connect.Response[v1.UpdateConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.UpdateConfiguration is not implemented"))
}

func (UnimplementedFleetServiceHandler) StreamEvents(context.Context, *connect.Request[v1.StreamEventsRequest], *connect.ServerStream[v1.StreamEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.FleetService.StreamEvents is not implemented"))
}
