// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: public/v1/organization.proto

package publicv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "fleetd.sh/gen/public/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "public.v1.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceGetOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's GetOrganization RPC.
	OrganizationServiceGetOrganizationProcedure = "/public.v1.OrganizationService/GetOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/public.v1.OrganizationService/UpdateOrganization"
	// OrganizationServiceListTeamsProcedure is the fully-qualified name of the OrganizationService's
	// ListTeams RPC.
	OrganizationServiceListTeamsProcedure = "/public.v1.OrganizationService/ListTeams"
	// OrganizationServiceCreateTeamProcedure is the fully-qualified name of the OrganizationService's
	// CreateTeam RPC.
	OrganizationServiceCreateTeamProcedure = "/public.v1.OrganizationService/CreateTeam"
	// OrganizationServiceUpdateTeamProcedure is the fully-qualified name of the OrganizationService's
	// UpdateTeam RPC.
	OrganizationServiceUpdateTeamProcedure = "/public.v1.OrganizationService/UpdateTeam"
	// OrganizationServiceDeleteTeamProcedure is the fully-qualified name of the OrganizationService's
	// DeleteTeam RPC.
	OrganizationServiceDeleteTeamProcedure = "/public.v1.OrganizationService/DeleteTeam"
	// OrganizationServiceListMembersProcedure is the fully-qualified name of the OrganizationService's
	// ListMembers RPC.
	OrganizationServiceListMembersProcedure = "/public.v1.OrganizationService/ListMembers"
	// OrganizationServiceInviteMemberProcedure is the fully-qualified name of the OrganizationService's
	// InviteMember RPC.
	OrganizationServiceInviteMemberProcedure = "/public.v1.OrganizationService/InviteMember"
	// OrganizationServiceUpdateMemberRoleProcedure is the fully-qualified name of the
	// OrganizationService's UpdateMemberRole RPC.
	OrganizationServiceUpdateMemberRoleProcedure = "/public.v1.OrganizationService/UpdateMemberRole"
	// OrganizationServiceRemoveMemberProcedure is the fully-qualified name of the OrganizationService's
	// RemoveMember RPC.
	OrganizationServiceRemoveMemberProcedure = "/public.v1.OrganizationService/RemoveMember"
	// OrganizationServiceGetBillingInfoProcedure is the fully-qualified name of the
	// OrganizationService's GetBillingInfo RPC.
	OrganizationServiceGetBillingInfoProcedure = "/public.v1.OrganizationService/GetBillingInfo"
	// OrganizationServiceGetUsageProcedure is the fully-qualified name of the OrganizationService's
	// GetUsage RPC.
	OrganizationServiceGetUsageProcedure = "/public.v1.OrganizationService/GetUsage"
)

// OrganizationServiceClient is a client for the public.v1.OrganizationService service.
type OrganizationServiceClient interface {
	// Organization management
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// Team management
	ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[emptypb.Empty], error)
	// Member management
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error)
	UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error)
	RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[emptypb.Empty], error)
	// Billing (cloud offering)
	GetBillingInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBillingInfoResponse], error)
	GetUsage(context.Context, *connect.Request[v1.GetUsageRequest]) (*connect.Response[v1.GetUsageResponse], error)
}

// NewOrganizationServiceClient constructs a client for the public.v1.OrganizationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationServiceMethods := v1.File_public_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	return &organizationServiceClient{
		getOrganization: connect.NewClient[v1.GetOrganizationRequest, v1.GetOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceGetOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		listTeams: connect.NewClient[v1.ListTeamsRequest, v1.ListTeamsResponse](
			httpClient,
			baseURL+OrganizationServiceListTeamsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListTeams")),
			connect.WithClientOptions(opts...),
		),
		createTeam: connect.NewClient[v1.CreateTeamRequest, v1.CreateTeamResponse](
			httpClient,
			baseURL+OrganizationServiceCreateTeamProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateTeam")),
			connect.WithClientOptions(opts...),
		),
		updateTeam: connect.NewClient[v1.UpdateTeamRequest, v1.UpdateTeamResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateTeamProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateTeam")),
			connect.WithClientOptions(opts...),
		),
		deleteTeam: connect.NewClient[v1.DeleteTeamRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceDeleteTeamProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteTeam")),
			connect.WithClientOptions(opts...),
		),
		listMembers: connect.NewClient[v1.ListMembersRequest, v1.ListMembersResponse](
			httpClient,
			baseURL+OrganizationServiceListMembersProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListMembers")),
			connect.WithClientOptions(opts...),
		),
		inviteMember: connect.NewClient[v1.InviteMemberRequest, v1.InviteMemberResponse](
			httpClient,
			baseURL+OrganizationServiceInviteMemberProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("InviteMember")),
			connect.WithClientOptions(opts...),
		),
		updateMemberRole: connect.NewClient[v1.UpdateMemberRoleRequest, v1.UpdateMemberRoleResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateMemberRoleProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateMemberRole")),
			connect.WithClientOptions(opts...),
		),
		removeMember: connect.NewClient[v1.RemoveMemberRequest, emptypb.Empty](
			httpClient,
			baseURL+OrganizationServiceRemoveMemberProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("RemoveMember")),
			connect.WithClientOptions(opts...),
		),
		getBillingInfo: connect.NewClient[emptypb.Empty, v1.GetBillingInfoResponse](
			httpClient,
			baseURL+OrganizationServiceGetBillingInfoProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetBillingInfo")),
			connect.WithClientOptions(opts...),
		),
		getUsage: connect.NewClient[v1.GetUsageRequest, v1.GetUsageResponse](
			httpClient,
			baseURL+OrganizationServiceGetUsageProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GetUsage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	getOrganization    *connect.Client[v1.GetOrganizationRequest, v1.GetOrganizationResponse]
	updateOrganization *connect.Client[v1.UpdateOrganizationRequest, v1.UpdateOrganizationResponse]
	listTeams          *connect.Client[v1.ListTeamsRequest, v1.ListTeamsResponse]
	createTeam         *connect.Client[v1.CreateTeamRequest, v1.CreateTeamResponse]
	updateTeam         *connect.Client[v1.UpdateTeamRequest, v1.UpdateTeamResponse]
	deleteTeam         *connect.Client[v1.DeleteTeamRequest, emptypb.Empty]
	listMembers        *connect.Client[v1.ListMembersRequest, v1.ListMembersResponse]
	inviteMember       *connect.Client[v1.InviteMemberRequest, v1.InviteMemberResponse]
	updateMemberRole   *connect.Client[v1.UpdateMemberRoleRequest, v1.UpdateMemberRoleResponse]
	removeMember       *connect.Client[v1.RemoveMemberRequest, emptypb.Empty]
	getBillingInfo     *connect.Client[emptypb.Empty, v1.GetBillingInfoResponse]
	getUsage           *connect.Client[v1.GetUsageRequest, v1.GetUsageResponse]
}

// GetOrganization calls public.v1.OrganizationService.GetOrganization.
func (c *organizationServiceClient) GetOrganization(ctx context.Context, req *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return c.getOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls public.v1.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListTeams calls public.v1.OrganizationService.ListTeams.
func (c *organizationServiceClient) ListTeams(ctx context.Context, req *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error) {
	return c.listTeams.CallUnary(ctx, req)
}

// CreateTeam calls public.v1.OrganizationService.CreateTeam.
func (c *organizationServiceClient) CreateTeam(ctx context.Context, req *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return c.createTeam.CallUnary(ctx, req)
}

// UpdateTeam calls public.v1.OrganizationService.UpdateTeam.
func (c *organizationServiceClient) UpdateTeam(ctx context.Context, req *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error) {
	return c.updateTeam.CallUnary(ctx, req)
}

// DeleteTeam calls public.v1.OrganizationService.DeleteTeam.
func (c *organizationServiceClient) DeleteTeam(ctx context.Context, req *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTeam.CallUnary(ctx, req)
}

// ListMembers calls public.v1.OrganizationService.ListMembers.
func (c *organizationServiceClient) ListMembers(ctx context.Context, req *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return c.listMembers.CallUnary(ctx, req)
}

// InviteMember calls public.v1.OrganizationService.InviteMember.
func (c *organizationServiceClient) InviteMember(ctx context.Context, req *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error) {
	return c.inviteMember.CallUnary(ctx, req)
}

// UpdateMemberRole calls public.v1.OrganizationService.UpdateMemberRole.
func (c *organizationServiceClient) UpdateMemberRole(ctx context.Context, req *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error) {
	return c.updateMemberRole.CallUnary(ctx, req)
}

// RemoveMember calls public.v1.OrganizationService.RemoveMember.
func (c *organizationServiceClient) RemoveMember(ctx context.Context, req *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeMember.CallUnary(ctx, req)
}

// GetBillingInfo calls public.v1.OrganizationService.GetBillingInfo.
func (c *organizationServiceClient) GetBillingInfo(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBillingInfoResponse], error) {
	return c.getBillingInfo.CallUnary(ctx, req)
}

// GetUsage calls public.v1.OrganizationService.GetUsage.
func (c *organizationServiceClient) GetUsage(ctx context.Context, req *connect.Request[v1.GetUsageRequest]) (*connect.Response[v1.GetUsageResponse], error) {
	return c.getUsage.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the public.v1.OrganizationService service.
type OrganizationServiceHandler interface {
	// Organization management
	GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error)
	UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error)
	// Team management
	ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[emptypb.Empty], error)
	// Member management
	ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error)
	InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error)
	UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error)
	RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[emptypb.Empty], error)
	// Billing (cloud offering)
	GetBillingInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBillingInfoResponse], error)
	GetUsage(context.Context, *connect.Request[v1.GetUsageRequest]) (*connect.Response[v1.GetUsageResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceMethods := v1.File_public_v1_organization_proto.Services().ByName("OrganizationService").Methods()
	organizationServiceGetOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceGetOrganizationProcedure,
		svc.GetOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("GetOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListTeamsHandler := connect.NewUnaryHandler(
		OrganizationServiceListTeamsProcedure,
		svc.ListTeams,
		connect.WithSchema(organizationServiceMethods.ByName("ListTeams")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceCreateTeamHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateTeamProcedure,
		svc.CreateTeam,
		connect.WithSchema(organizationServiceMethods.ByName("CreateTeam")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateTeamHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateTeamProcedure,
		svc.UpdateTeam,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateTeam")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteTeamHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteTeamProcedure,
		svc.DeleteTeam,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteTeam")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListMembersHandler := connect.NewUnaryHandler(
		OrganizationServiceListMembersProcedure,
		svc.ListMembers,
		connect.WithSchema(organizationServiceMethods.ByName("ListMembers")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceInviteMemberHandler := connect.NewUnaryHandler(
		OrganizationServiceInviteMemberProcedure,
		svc.InviteMember,
		connect.WithSchema(organizationServiceMethods.ByName("InviteMember")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateMemberRoleHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateMemberRoleProcedure,
		svc.UpdateMemberRole,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateMemberRole")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceRemoveMemberHandler := connect.NewUnaryHandler(
		OrganizationServiceRemoveMemberProcedure,
		svc.RemoveMember,
		connect.WithSchema(organizationServiceMethods.ByName("RemoveMember")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetBillingInfoHandler := connect.NewUnaryHandler(
		OrganizationServiceGetBillingInfoProcedure,
		svc.GetBillingInfo,
		connect.WithSchema(organizationServiceMethods.ByName("GetBillingInfo")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGetUsageHandler := connect.NewUnaryHandler(
		OrganizationServiceGetUsageProcedure,
		svc.GetUsage,
		connect.WithSchema(organizationServiceMethods.ByName("GetUsage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/public.v1.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceGetOrganizationProcedure:
			organizationServiceGetOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListTeamsProcedure:
			organizationServiceListTeamsHandler.ServeHTTP(w, r)
		case OrganizationServiceCreateTeamProcedure:
			organizationServiceCreateTeamHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateTeamProcedure:
			organizationServiceUpdateTeamHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteTeamProcedure:
			organizationServiceDeleteTeamHandler.ServeHTTP(w, r)
		case OrganizationServiceListMembersProcedure:
			organizationServiceListMembersHandler.ServeHTTP(w, r)
		case OrganizationServiceInviteMemberProcedure:
			organizationServiceInviteMemberHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateMemberRoleProcedure:
			organizationServiceUpdateMemberRoleHandler.ServeHTTP(w, r)
		case OrganizationServiceRemoveMemberProcedure:
			organizationServiceRemoveMemberHandler.ServeHTTP(w, r)
		case OrganizationServiceGetBillingInfoProcedure:
			organizationServiceGetBillingInfoHandler.ServeHTTP(w, r)
		case OrganizationServiceGetUsageProcedure:
			organizationServiceGetUsageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) GetOrganization(context.Context, *connect.Request[v1.GetOrganizationRequest]) (*connect.Response[v1.GetOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.GetOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[v1.UpdateOrganizationRequest]) (*connect.Response[v1.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.ListTeams is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.CreateTeam is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.UpdateTeam is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.DeleteTeam is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListMembers(context.Context, *connect.Request[v1.ListMembersRequest]) (*connect.Response[v1.ListMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.ListMembers is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) InviteMember(context.Context, *connect.Request[v1.InviteMemberRequest]) (*connect.Response[v1.InviteMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.InviteMember is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateMemberRole(context.Context, *connect.Request[v1.UpdateMemberRoleRequest]) (*connect.Response[v1.UpdateMemberRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.UpdateMemberRole is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) RemoveMember(context.Context, *connect.Request[v1.RemoveMemberRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.RemoveMember is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetBillingInfo(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetBillingInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.GetBillingInfo is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GetUsage(context.Context, *connect.Request[v1.GetUsageRequest]) (*connect.Response[v1.GetUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("public.v1.OrganizationService.GetUsage is not implemented"))
}
