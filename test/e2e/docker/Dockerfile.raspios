# Dockerfile for Raspberry Pi OS simulation
# This creates a container that mimics a Raspberry Pi environment

FROM debian:bullseye-slim

# Install dependencies that exist on Raspberry Pi OS
RUN apt-get update && apt-get install -y \
    systemd \
    systemd-sysv \
    sudo \
    curl \
    wget \
    ca-certificates \
    openssh-server \
    net-tools \
    iproute2 \
    iputils-ping \
    vim \
    procps \
    lsb-release \
    gpg \
    python3 \
    python3-pip \
    avahi-daemon \
    avahi-utils \
    libnss-mdns \
    && rm -rf /var/lib/apt/lists/*

# Create pi user (similar to default Raspberry Pi OS)
RUN useradd -m -s /bin/bash -G sudo pi && \
    echo "pi:raspberry" | chpasswd && \
    echo "pi ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Mock Raspberry Pi specific files
RUN mkdir -p /proc/device-tree && \
    echo "Raspberry Pi 5 Model B Rev 1.0" > /proc/device-tree/model && \
    echo -e "processor\t: 0\nmodel name\t: ARMv8 Processor rev 1 (v8l)\nSerial\t\t: 10000000abcdef12" > /proc/cpuinfo.mock

# Create vcgencmd mock (Pi-specific command)
RUN echo '#!/bin/bash\necho "temp=42.0Â°C"' > /usr/bin/vcgencmd && \
    chmod +x /usr/bin/vcgencmd

# Setup systemd (for testing systemd services)
RUN systemctl set-default multi-user.target && \
    systemctl mask -- \
    dev-hugepages.mount \
    sys-fs-fuse-connections.mount \
    systemd-update-utmp.service \
    systemd-tmpfiles-setup.service \
    console-getty.service

# Create fleetd directories
RUN mkdir -p /var/lib/fleetd /etc/fleetd /var/log/fleetd && \
    chown -R pi:pi /var/lib/fleetd /var/log/fleetd

# Setup SSH for testing remote deployment
RUN mkdir /var/run/sshd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Copy test scripts
COPY --chown=pi:pi test-harness.sh /home/pi/
RUN chmod +x /home/pi/test-harness.sh

# Expose ports
EXPOSE 22 8080 8088 5353/udp

# Use systemd as init
STOPSIGNAL SIGRTMIN+3
VOLUME ["/sys/fs/cgroup", "/run", "/run/lock", "/tmp"]

# Override cpuinfo when container starts
ENTRYPOINT ["/bin/bash", "-c", "cat /proc/cpuinfo.mock > /proc/cpuinfo 2>/dev/null || true; exec /lib/systemd/systemd"]