version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: fleetd
      POSTGRES_USER: fleetd
      POSTGRES_PASSWORD: fleetd_secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fleetd"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Valkey (Redis fork) for caching and rate limiting
  valkey:
    image: valkey/valkey:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - valkey_data:/data
    command: valkey-server --appendonly yes
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # VictoriaMetrics for metrics storage
  victoriametrics:
    image: victoriametrics/victoria-metrics:stable
    ports:
      - "8428:8428"
    volumes:
      - vm_data:/victoria-metrics-data
    command:
      - "--storageDataPath=/victoria-metrics-data"
      - "--httpListenAddr=:8428"
      - "--retentionPeriod=30d"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8428/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./configs/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - victoriametrics
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Traefik as reverse proxy
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--metrics.prometheus=true"
      - "--accesslog=true"
      - "--log.level=INFO"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Device API Service
  device-api:
    build:
      context: .
      dockerfile: Dockerfile.device-api
    ports:
      - "8081:8080"
    environment:
      FLEETD_DB_HOST: postgres
      FLEETD_DB_PORT: 5432
      FLEETD_DB_NAME: fleetd
      FLEETD_DB_USER: fleetd
      FLEETD_DB_PASSWORD: fleetd_secret
      FLEETD_VALKEY_ADDR: valkey:6379
      FLEETD_METRICS_ADDR: victoriametrics:8428
      FLEETD_LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device-api.rule=PathPrefix(`/api/device`)"
      - "traefik.http.routers.device-api.entrypoints=web"
      - "traefik.http.services.device-api.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Platform API Service (Control Plane)
  platform-api:
    build:
      context: .
      dockerfile: Dockerfile.platform-api
    ports:
      - "8090:8090"
    environment:
      FLEETD_DB_HOST: postgres
      FLEETD_DB_PORT: 5432
      FLEETD_DB_NAME: fleetd
      FLEETD_DB_USER: fleetd
      FLEETD_DB_PASSWORD: fleetd_secret
      FLEETD_VALKEY_ADDR: valkey:6379
      FLEETD_JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      FLEETD_DEVICE_API_URL: http://device-api:8080
      FLEETD_AUTH_MODE: ${AUTH_MODE:-production}
      FLEETD_LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
      device-api:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.platform-api.rule=PathPrefix(`/api/v1`)"
      - "traefik.http.routers.platform-api.entrypoints=web"
      - "traefik.http.services.platform-api.loadbalancer.server.port=8090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8090/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent simulator for testing
  agent-simulator:
    build:
      context: .
      dockerfile: Dockerfile.agent
    environment:
      FLEETD_CONTROL_URL: http://platform-api:8090
      FLEETD_DEVICE_API_URL: http://device-api:8080
      FLEETD_AGENT_COUNT: 5
      FLEETD_SIMULATION_MODE: true
    depends_on:
      platform-api:
        condition: service_healthy
      device-api:
        condition: service_healthy
    profiles:
      - simulation

volumes:
  postgres_data:
  valkey_data:
  vm_data:
  loki_data:
  grafana_data: